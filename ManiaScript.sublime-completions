{
    "completions": [
        {
            "contents": "Int3",
            "trigger": "Int3"
        },
        {
            "contents": "Real",
            "trigger": "Real"
        },
        {
            "contents": "Ident",
            "trigger": "Ident"
        },
        {
            "contents": "Text",
            "trigger": "Text"
        },
        {
            "contents": "Vec2",
            "trigger": "Vec2"
        },
        {
            "contents": "Integer",
            "trigger": "Integer"
        },
        {
            "contents": "Boolean",
            "trigger": "Boolean"
        },
        {
            "contents": "Vec3",
            "trigger": "Vec3"
        },
        {
            "contents": "Void",
            "trigger": "Void"
        },
        {
            "contents": "CMlMinimap",
            "trigger": "CMlMinimap"
        },
        {
            "contents": "WorldPosition",
            "trigger": "Vec3 CMlMinimap.WorldPosition"
        },
        {
            "contents": "MapPosition",
            "trigger": "Vec2 CMlMinimap.MapPosition"
        },
        {
            "contents": "MapYaw",
            "trigger": "Real CMlMinimap.MapYaw"
        },
        {
            "contents": "ZoomFactor",
            "trigger": "Real CMlMinimap.ZoomFactor"
        },
        {
            "contents": "Underground",
            "trigger": "Boolean CMlMinimap.Underground"
        },
        {
            "contents": "Fog_SetAll(${0:Real Value})",
            "trigger": "Void Fog_SetAll(Real Value)"
        },
        {
            "contents": "Fog_ClearDisk(${0:Vec3 WorldCenter}, ${1:Real Radius}, ${2:Real FadeSize})",
            "trigger": "Void Fog_ClearDisk(Vec3 WorldCenter, Real Radius, Real FadeSize)"
        },
        {
            "contents": "CEditorEditor",
            "trigger": "CEditorEditor"
        },
        {
            "contents": "Bindings_RequestInput_Done",
            "trigger": "Boolean CEditorEditor.Bindings_RequestInput_Done"
        },
        {
            "contents": "BindingContexts",
            "trigger": "Text[] CEditorEditor.BindingContexts"
        },
        {
            "contents": "RequestedContextBindings",
            "trigger": "Text[] CEditorEditor.RequestedContextBindings"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CEditorEvent[] CEditorEditor.PendingEvents"
        },
        {
            "contents": "Bindings_AddContext(${0:Text ContextName})",
            "trigger": "Void Bindings_AddContext(Text ContextName)"
        },
        {
            "contents": "Bindings_AddBinding(${0:Text ContextName}, ${1:Text BindingName})",
            "trigger": "Void Bindings_AddBinding(Text ContextName, Text BindingName)"
        },
        {
            "contents": "Bindings_RemoveContext(${0:Text ContextName})",
            "trigger": "Void Bindings_RemoveContext(Text ContextName)"
        },
        {
            "contents": "Bindings_RemoveBinding(${0:Text BindingName})",
            "trigger": "Void Bindings_RemoveBinding(Text BindingName)"
        },
        {
            "contents": "Bindings_RequestInput(${0:Text BindingName})",
            "trigger": "Void Bindings_RequestInput(Text BindingName)"
        },
        {
            "contents": "Bindings_SetBindingName(${0:Text BindingName}, ${1:Text NewBindingName})",
            "trigger": "Void Bindings_SetBindingName(Text BindingName, Text NewBindingName)"
        },
        {
            "contents": "Bindings_SetContextName(${0:Text ContextName}, ${1:Text NewContextName})",
            "trigger": "Void Bindings_SetContextName(Text ContextName, Text NewContextName)"
        },
        {
            "contents": "Bindings_GetContextBindings(${0:Text ContextName})",
            "trigger": "Void Bindings_GetContextBindings(Text ContextName)"
        },
        {
            "contents": "Bindings_GetBindingActionName(${0:Text BindingName})",
            "trigger": "Text Bindings_GetBindingActionName(Text BindingName)"
        },
        {
            "contents": "CMlPage",
            "trigger": "CMlPage"
        },
        {
            "contents": "MainFrame",
            "trigger": "CMlFrame CMlPage.MainFrame"
        },
        {
            "contents": "LinksInhibited",
            "trigger": "Boolean CMlPage.LinksInhibited"
        },
        {
            "contents": "GetClassChildren_Result",
            "trigger": "CMlControl[] CMlPage.GetClassChildren_Result"
        },
        {
            "contents": "GetFirstChild(${0:Text ControlId})",
            "trigger": "CMlControl GetFirstChild(Text ControlId)"
        },
        {
            "contents": "GetClassChildren(${0:Text Class}, ${1:CMlFrame Frame}, ${2:Boolean Recursive})",
            "trigger": "Void GetClassChildren(Text Class, CMlFrame Frame, Boolean Recursive)"
        },
        {
            "contents": "CImage",
            "trigger": "CImage"
        },
        {
            "contents": "CImage::ERenderTech::Unknown",
            "trigger": "CImage::ERenderTech::Unknown"
        },
        {
            "contents": "CImage::ERenderTech::Tech3",
            "trigger": "CImage::ERenderTech::Tech3"
        },
        {
            "contents": "CImage::ETexFilter::Point",
            "trigger": "CImage::ETexFilter::Point"
        },
        {
            "contents": "CImage::ETexFilter::Bilinear",
            "trigger": "CImage::ETexFilter::Bilinear"
        },
        {
            "contents": "CImage::ETexFilter::Trilinear",
            "trigger": "CImage::ETexFilter::Trilinear"
        },
        {
            "contents": "CImage::ETexFilter::Anisotropic",
            "trigger": "CImage::ETexFilter::Anisotropic"
        },
        {
            "contents": "CImage::ETexFilter::AnisoPoint",
            "trigger": "CImage::ETexFilter::AnisoPoint"
        },
        {
            "contents": "CImage::ETexAddress::Wrap",
            "trigger": "CImage::ETexAddress::Wrap"
        },
        {
            "contents": "CImage::ETexAddress::Mirror",
            "trigger": "CImage::ETexAddress::Mirror"
        },
        {
            "contents": "CImage::ETexAddress::Clamp",
            "trigger": "CImage::ETexAddress::Clamp"
        },
        {
            "contents": "CImage::ETexAddress::BorderSM3",
            "trigger": "CImage::ETexAddress::BorderSM3"
        },
        {
            "contents": "CImage::EColorSpace::Linear",
            "trigger": "CImage::EColorSpace::Linear"
        },
        {
            "contents": "CImage::EColorSpace::sRGB",
            "trigger": "CImage::EColorSpace::sRGB"
        },
        {
            "contents": "CImage::EVideoTimer::Game",
            "trigger": "CImage::EVideoTimer::Game"
        },
        {
            "contents": "CImage::EVideoTimer::Human",
            "trigger": "CImage::EVideoTimer::Human"
        },
        {
            "contents": "CImage::EVideoTimer::Scene",
            "trigger": "CImage::EVideoTimer::Scene"
        },
        {
            "contents": "CImage::EVideoTimer::Default",
            "trigger": "CImage::EVideoTimer::Default"
        },
        {
            "contents": "CImage::EGenerateUV::NoGenerate",
            "trigger": "CImage::EGenerateUV::NoGenerate"
        },
        {
            "contents": "CImage::EGenerateUV::CameraVertex",
            "trigger": "CImage::EGenerateUV::CameraVertex"
        },
        {
            "contents": "CImage::EGenerateUV::WorldVertex",
            "trigger": "CImage::EGenerateUV::WorldVertex"
        },
        {
            "contents": "CImage::EGenerateUV::WorldVertexXY",
            "trigger": "CImage::EGenerateUV::WorldVertexXY"
        },
        {
            "contents": "CImage::EGenerateUV::WorldVertexXZ",
            "trigger": "CImage::EGenerateUV::WorldVertexXZ"
        },
        {
            "contents": "CImage::EGenerateUV::WorldVertexYZ",
            "trigger": "CImage::EGenerateUV::WorldVertexYZ"
        },
        {
            "contents": "CImage::EGenerateUV::CameraNormal",
            "trigger": "CImage::EGenerateUV::CameraNormal"
        },
        {
            "contents": "CImage::EGenerateUV::WorldNormal",
            "trigger": "CImage::EGenerateUV::WorldNormal"
        },
        {
            "contents": "CImage::EGenerateUV::CameraReflectionVector",
            "trigger": "CImage::EGenerateUV::CameraReflectionVector"
        },
        {
            "contents": "CImage::EGenerateUV::WorldReflectionVector",
            "trigger": "CImage::EGenerateUV::WorldReflectionVector"
        },
        {
            "contents": "CImage::EGenerateUV::WorldNormalNeg",
            "trigger": "CImage::EGenerateUV::WorldNormalNeg"
        },
        {
            "contents": "CImage::EGenerateUV::WaterReflectionVector",
            "trigger": "CImage::EGenerateUV::WaterReflectionVector"
        },
        {
            "contents": "CImage::EGenerateUV::Hack1Vertex",
            "trigger": "CImage::EGenerateUV::Hack1Vertex"
        },
        {
            "contents": "CImage::EGenerateUV::DEPRECATED",
            "trigger": "CImage::EGenerateUV::DEPRECATED"
        },
        {
            "contents": "CImage::EGenerateUV::FogPlane0",
            "trigger": "CImage::EGenerateUV::FogPlane0"
        },
        {
            "contents": "CImage::EGenerateUV::Vsk3SeaFoam",
            "trigger": "CImage::EGenerateUV::Vsk3SeaFoam"
        },
        {
            "contents": "CImage::EGenerateUV::ImageSpace",
            "trigger": "CImage::EGenerateUV::ImageSpace"
        },
        {
            "contents": "CImage::EGenerateUV::LightDir0Reflect",
            "trigger": "CImage::EGenerateUV::LightDir0Reflect"
        },
        {
            "contents": "CImage::EGenerateUV::EyeNormal",
            "trigger": "CImage::EGenerateUV::EyeNormal"
        },
        {
            "contents": "CImage::EGenerateUV::ShadowB1Pw01",
            "trigger": "CImage::EGenerateUV::ShadowB1Pw01"
        },
        {
            "contents": "CImage::EGenerateUV::Tex3AsPosPrCamera",
            "trigger": "CImage::EGenerateUV::Tex3AsPosPrCamera"
        },
        {
            "contents": "CImage::EGenerateUV::FlatWaterReflect",
            "trigger": "CImage::EGenerateUV::FlatWaterReflect"
        },
        {
            "contents": "CImage::EGenerateUV::FlatWaterRefract",
            "trigger": "CImage::EGenerateUV::FlatWaterRefract"
        },
        {
            "contents": "CImage::EGenerateUV::FlatWaterFresnel",
            "trigger": "CImage::EGenerateUV::FlatWaterFresnel"
        },
        {
            "contents": "CImage::EGenerateUV::WorldPosXYblendZY",
            "trigger": "CImage::EGenerateUV::WorldPosXYblendZY"
        },
        {
            "contents": "CImage::EGenerateUV::DisableVshOutput",
            "trigger": "CImage::EGenerateUV::DisableVshOutput"
        },
        {
            "contents": "CImage::EUsage::Color",
            "trigger": "CImage::EUsage::Color"
        },
        {
            "contents": "CImage::EUsage::Light",
            "trigger": "CImage::EUsage::Light"
        },
        {
            "contents": "CImage::EUsage::DuDv",
            "trigger": "CImage::EUsage::DuDv"
        },
        {
            "contents": "CImage::EUsage::Render",
            "trigger": "CImage::EUsage::Render"
        },
        {
            "contents": "CImage::EUsage::DuDvLumi",
            "trigger": "CImage::EUsage::DuDvLumi"
        },
        {
            "contents": "CImage::EUsage::NormXYZ",
            "trigger": "CImage::EUsage::NormXYZ"
        },
        {
            "contents": "CImage::EUsage::NormXY",
            "trigger": "CImage::EUsage::NormXY"
        },
        {
            "contents": "CImage::EUsage::DepthCmp",
            "trigger": "CImage::EUsage::DepthCmp"
        },
        {
            "contents": "CImage::EUsage::DispH01",
            "trigger": "CImage::EUsage::DispH01"
        },
        {
            "contents": "CImage::EUsage::NormPal8b",
            "trigger": "CImage::EUsage::NormPal8b"
        },
        {
            "contents": "CImage::EUsage::NormXYZ",
            "trigger": "CImage::EUsage::NormXYZ"
        },
        {
            "contents": "CImage::EUsage::NormXY",
            "trigger": "CImage::EUsage::NormXY"
        },
        {
            "contents": "CImage::EUsage::NormPal8b",
            "trigger": "CImage::EUsage::NormPal8b"
        },
        {
            "contents": "CImage::EUsage::NormPal16b",
            "trigger": "CImage::EUsage::NormPal16b"
        },
        {
            "contents": "CImage::EUsage::ColorFloat",
            "trigger": "CImage::EUsage::ColorFloat"
        },
        {
            "contents": "CImage::EUsage::RenderFloat",
            "trigger": "CImage::EUsage::RenderFloat"
        },
        {
            "contents": "CImage::EUsage::DuDv1",
            "trigger": "CImage::EUsage::DuDv1"
        },
        {
            "contents": "CImage::EUsage::Alpha",
            "trigger": "CImage::EUsage::Alpha"
        },
        {
            "contents": "CImage::EUsage::LightAlpha",
            "trigger": "CImage::EUsage::LightAlpha"
        },
        {
            "contents": "CImage::EUsage::NormX0ZY",
            "trigger": "CImage::EUsage::NormX0ZY"
        },
        {
            "contents": "CImage::EUsage::NormX0ZY",
            "trigger": "CImage::EUsage::NormX0ZY"
        },
        {
            "contents": "CImage::EUsage::TexCoord",
            "trigger": "CImage::EUsage::TexCoord"
        },
        {
            "contents": "CImage::EUsage::Render16b",
            "trigger": "CImage::EUsage::Render16b"
        },
        {
            "contents": "CImage::EUsage::Vertex",
            "trigger": "CImage::EUsage::Vertex"
        },
        {
            "contents": "CImage::EUsage::BumpTxTy",
            "trigger": "CImage::EUsage::BumpTxTy"
        },
        {
            "contents": "CImage::EUsage::BumpTxTy",
            "trigger": "CImage::EUsage::BumpTxTy"
        },
        {
            "contents": "CImage::EUsage::Norm0YZX",
            "trigger": "CImage::EUsage::Norm0YZX"
        },
        {
            "contents": "CImage::EUsage::Norm0YZX",
            "trigger": "CImage::EUsage::Norm0YZX"
        },
        {
            "contents": "CImage::EUsage::YZX",
            "trigger": "CImage::EUsage::YZX"
        },
        {
            "contents": "CImage::EUsage::Depth",
            "trigger": "CImage::EUsage::Depth"
        },
        {
            "contents": "CImage::EUsage::LinearL16",
            "trigger": "CImage::EUsage::LinearL16"
        },
        {
            "contents": "CImage::EUsage::NormATI2N",
            "trigger": "CImage::EUsage::NormATI2N"
        },
        {
            "contents": "CImage::EUsage::ATI2N",
            "trigger": "CImage::EUsage::ATI2N"
        },
        {
            "contents": "CImage::EUsage::Color16b",
            "trigger": "CImage::EUsage::Color16b"
        },
        {
            "contents": "CImage::EUsage::FI0E",
            "trigger": "CImage::EUsage::FI0E"
        },
        {
            "contents": "CImage::EUsage::SpecFI0E",
            "trigger": "CImage::EUsage::SpecFI0E"
        },
        {
            "contents": "CImage::EColorDepth::DefaultColorDepth",
            "trigger": "CImage::EColorDepth::DefaultColorDepth"
        },
        {
            "contents": "CImage::EColorDepth::Color16b",
            "trigger": "CImage::EColorDepth::Color16b"
        },
        {
            "contents": "CImage::EColorDepth::Color32b",
            "trigger": "CImage::EColorDepth::Color32b"
        },
        {
            "contents": "CImage::ECubeMapFace::None",
            "trigger": "CImage::ECubeMapFace::None"
        },
        {
            "contents": "CImage::ECubeMapFace::XPos",
            "trigger": "CImage::ECubeMapFace::XPos"
        },
        {
            "contents": "CImage::ECubeMapFace::XNeg",
            "trigger": "CImage::ECubeMapFace::XNeg"
        },
        {
            "contents": "CImage::ECubeMapFace::YPos",
            "trigger": "CImage::ECubeMapFace::YPos"
        },
        {
            "contents": "CImage::ECubeMapFace::YNeg",
            "trigger": "CImage::ECubeMapFace::YNeg"
        },
        {
            "contents": "CImage::ECubeMapFace::ZPos",
            "trigger": "CImage::ECubeMapFace::ZPos"
        },
        {
            "contents": "CImage::ECubeMapFace::ZNeg",
            "trigger": "CImage::ECubeMapFace::ZNeg"
        },
        {
            "contents": "CImage::EBumpCompressMode::None",
            "trigger": "CImage::EBumpCompressMode::None"
        },
        {
            "contents": "CImage::EBumpCompressMode::Pal8b",
            "trigger": "CImage::EBumpCompressMode::Pal8b"
        },
        {
            "contents": "CImage::EBumpCompressMode::DXT1",
            "trigger": "CImage::EBumpCompressMode::DXT1"
        },
        {
            "contents": "CImage::EBumpCompressMode::Pal16b",
            "trigger": "CImage::EBumpCompressMode::Pal16b"
        },
        {
            "contents": "CImage::EPixelUpdate::None",
            "trigger": "CImage::EPixelUpdate::None"
        },
        {
            "contents": "CImage::EPixelUpdate::Render",
            "trigger": "CImage::EPixelUpdate::Render"
        },
        {
            "contents": "CImage::EPixelUpdate::Shader",
            "trigger": "CImage::EPixelUpdate::Shader"
        },
        {
            "contents": "CImage::EPixelUpdate::DynaSpecular",
            "trigger": "CImage::EPixelUpdate::DynaSpecular"
        },
        {
            "contents": "CImage::EPixelUpdate::Clear",
            "trigger": "CImage::EPixelUpdate::Clear"
        },
        {
            "contents": "CImage::EPixelUpdate::RenderVideo",
            "trigger": "CImage::EPixelUpdate::RenderVideo"
        },
        {
            "contents": "CImage::EDynamic::Off",
            "trigger": "CImage::EDynamic::Off"
        },
        {
            "contents": "CImage::EDynamic::On",
            "trigger": "CImage::EDynamic::On"
        },
        {
            "contents": "CImage::EDynamic::Buffers",
            "trigger": "CImage::EDynamic::Buffers"
        },
        {
            "contents": "CImage::ENormalRotate::None",
            "trigger": "CImage::ENormalRotate::None"
        },
        {
            "contents": "CImage::ENormalRotate::y",
            "trigger": "CImage::ENormalRotate::y"
        },
        {
            "contents": "CImage::EEdCustomSaveOp::None",
            "trigger": "CImage::EEdCustomSaveOp::None"
        },
        {
            "contents": "CImage::EEdCustomSaveOp::Diffuse",
            "trigger": "CImage::EEdCustomSaveOp::Diffuse"
        },
        {
            "contents": "CImage::EEdCustomSaveOp::DXT5",
            "trigger": "CImage::EEdCustomSaveOp::DXT5"
        },
        {
            "contents": "CImage::EEdCustomSaveOp::ShootCubeHdr",
            "trigger": "CImage::EEdCustomSaveOp::ShootCubeHdr"
        },
        {
            "contents": "CImage::ECompressor::NVidia",
            "trigger": "CImage::ECompressor::NVidia"
        },
        {
            "contents": "CImage::ECompressor::DirectX",
            "trigger": "CImage::ECompressor::DirectX"
        },
        {
            "contents": "CImage::EForceBorderSize::texel",
            "trigger": "CImage::EForceBorderSize::texel"
        },
        {
            "contents": "CImage::EForceBorderSize::texels",
            "trigger": "CImage::EForceBorderSize::texels"
        },
        {
            "contents": "CImage::EForceBorderSize::texels",
            "trigger": "CImage::EForceBorderSize::texels"
        },
        {
            "contents": "CImage::EForceBorderSize::texels",
            "trigger": "CImage::EForceBorderSize::texels"
        },
        {
            "contents": "CImage::EMipMapAlpha01::HalfBinary",
            "trigger": "CImage::EMipMapAlpha01::HalfBinary"
        },
        {
            "contents": "CImage::EMipMapAlpha01::ForceBinary",
            "trigger": "CImage::EMipMapAlpha01::ForceBinary"
        },
        {
            "contents": "CImage::EMipMapAlpha01::ShadeOfGray",
            "trigger": "CImage::EMipMapAlpha01::ShadeOfGray"
        },
        {
            "contents": "CSmMlScriptIngame",
            "trigger": "CSmMlScriptIngame"
        },
        {
            "contents": "ArenaNow",
            "trigger": "Integer CSmMlScriptIngame.ArenaNow"
        },
        {
            "contents": "InputPlayer",
            "trigger": "CSmPlayer CSmMlScriptIngame.InputPlayer"
        },
        {
            "contents": "GUIPlayer",
            "trigger": "CSmPlayer CSmMlScriptIngame.GUIPlayer"
        },
        {
            "contents": "Players",
            "trigger": "CSmPlayer[] CSmMlScriptIngame.Players"
        },
        {
            "contents": "Scores",
            "trigger": "CSmScore[] CSmMlScriptIngame.Scores"
        },
        {
            "contents": "ClanScores",
            "trigger": "Integer[] CSmMlScriptIngame.ClanScores"
        },
        {
            "contents": "HideResumePlayingButton",
            "trigger": "Boolean CSmMlScriptIngame.HideResumePlayingButton"
        },
        {
            "contents": "MapBases",
            "trigger": "CSmMapBase[] CSmMlScriptIngame.MapBases"
        },
        {
            "contents": "MapLandmarks",
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks"
        },
        {
            "contents": "MapLandmarks_PlayerSpawn",
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks_PlayerSpawn"
        },
        {
            "contents": "MapLandmarks_Gauge",
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks_Gauge"
        },
        {
            "contents": "MapLandmarks_Sector",
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks_Sector"
        },
        {
            "contents": "MapLandmarks_BotPath",
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks_BotPath"
        },
        {
            "contents": "MapLandmarks_BotSpawn",
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks_BotSpawn"
        },
        {
            "contents": "MapLandmarks_ObjectAnchor",
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks_ObjectAnchor"
        },
        {
            "contents": "MapLandmarks_Gate",
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks_Gate"
        },
        {
            "contents": "CSmMapBotSpawn",
            "trigger": "CSmMapBotSpawn"
        },
        {
            "contents": "IsFlying",
            "trigger": "Boolean CSmMapBotSpawn.IsFlying"
        },
        {
            "contents": "BotModelId",
            "trigger": "Ident CSmMapBotSpawn.BotModelId"
        },
        {
            "contents": "CPrivilegeMgr",
            "trigger": "CPrivilegeMgr"
        },
        {
            "contents": "CPrivilegeMgr::EPrivilege::PlayMultiplayerMode",
            "trigger": "CPrivilegeMgr::EPrivilege::PlayMultiplayerMode"
        },
        {
            "contents": "CPrivilegeMgr::EPrivilege::PlayMultiplayerSession",
            "trigger": "CPrivilegeMgr::EPrivilege::PlayMultiplayerSession"
        },
        {
            "contents": "CPrivilegeMgr::EPrivilege::UploadUserCreatedContent",
            "trigger": "CPrivilegeMgr::EPrivilege::UploadUserCreatedContent"
        },
        {
            "contents": "CPrivilegeMgr::EPrivilege::ViewOnlinePresence",
            "trigger": "CPrivilegeMgr::EPrivilege::ViewOnlinePresence"
        },
        {
            "contents": "CPrivilegeMgr::EPrivilege::ViewUserCreatedContent",
            "trigger": "CPrivilegeMgr::EPrivilege::ViewUserCreatedContent"
        },
        {
            "contents": "CPrivilegeMgr::EPrivilege::ViewUserCreatedContentRequired",
            "trigger": "CPrivilegeMgr::EPrivilege::ViewUserCreatedContentRequired"
        },
        {
            "contents": "CPrivilegeMgr::EPrivilege::ViewUserGameHistory",
            "trigger": "CPrivilegeMgr::EPrivilege::ViewUserGameHistory"
        },
        {
            "contents": "CPrivilegeMgr::EPrivilege::VoiceChat",
            "trigger": "CPrivilegeMgr::EPrivilege::VoiceChat"
        },
        {
            "contents": "CPrivilegeMgr::EPrivilege::PlayMultiplayerAsync",
            "trigger": "CPrivilegeMgr::EPrivilege::PlayMultiplayerAsync"
        },
        {
            "contents": "CPrivilegeMgr::EPrivilege::DownloadUserCreatedContent",
            "trigger": "CPrivilegeMgr::EPrivilege::DownloadUserCreatedContent"
        },
        {
            "contents": "TaskResults",
            "trigger": "CTaskResult[] CPrivilegeMgr.TaskResults"
        },
        {
            "contents": "ReleaseTaskResult(${0:Ident TaskId})",
            "trigger": "Void ReleaseTaskResult(Ident TaskId)"
        },
        {
            "contents": "CheckPrivilege(${0:Ident UserId}, ${1:EPrivilege Privilege})",
            "trigger": "CTaskResult CheckPrivilege(Ident UserId, EPrivilege Privilege)"
        },
        {
            "contents": "CheckPrivilegeForAllUsers(${0:EPrivilege Privilege})",
            "trigger": "CTaskResult CheckPrivilegeForAllUsers(EPrivilege Privilege)"
        },
        {
            "contents": "CheckTargetedPrivilege(${0:Ident UserId}, ${1:EPrivilege Privilege})",
            "trigger": "CTaskResult_CheckTargetedPrivilege CheckTargetedPrivilege(Ident UserId, EPrivilege Privilege)"
        },
        {
            "contents": "CheckTargetedPrivilegeForAllUsers(${0:EPrivilege Privilege})",
            "trigger": "CTaskResult_CheckTargetedPrivilege CheckTargetedPrivilegeForAllUsers(EPrivilege Privilege)"
        },
        {
            "contents": "CMlGraph",
            "trigger": "CMlGraph"
        },
        {
            "contents": "CoordsMin",
            "trigger": "Vec2 CMlGraph.CoordsMin"
        },
        {
            "contents": "CoordsMax",
            "trigger": "Vec2 CMlGraph.CoordsMax"
        },
        {
            "contents": "Curves",
            "trigger": "CMlGraphCurve[] CMlGraph.Curves"
        },
        {
            "contents": "AddCurve()",
            "trigger": "CMlGraphCurve AddCurve()"
        },
        {
            "contents": "RemoveCurve(${0:CMlGraphCurve Curve})",
            "trigger": "Void RemoveCurve(CMlGraphCurve Curve)"
        },
        {
            "contents": "CTmMlPlayer",
            "trigger": "CTmMlPlayer"
        },
        {
            "contents": "CTmMlPlayer::ERaceState::BeforeStart",
            "trigger": "CTmMlPlayer::ERaceState::BeforeStart"
        },
        {
            "contents": "CTmMlPlayer::ERaceState::Running",
            "trigger": "CTmMlPlayer::ERaceState::Running"
        },
        {
            "contents": "CTmMlPlayer::ERaceState::Finished",
            "trigger": "CTmMlPlayer::ERaceState::Finished"
        },
        {
            "contents": "CTmMlPlayer::ERaceState::Eliminated",
            "trigger": "CTmMlPlayer::ERaceState::Eliminated"
        },
        {
            "contents": "CTmMlPlayer::ETmRacePlayerCoopMode::None",
            "trigger": "CTmMlPlayer::ETmRacePlayerCoopMode::None"
        },
        {
            "contents": "CTmMlPlayer::ETmRacePlayerCoopMode::Symbiosys",
            "trigger": "CTmMlPlayer::ETmRacePlayerCoopMode::Symbiosys"
        },
        {
            "contents": "CTmMlPlayer::ETmRacePlayerCoopMode::Checkpoint",
            "trigger": "CTmMlPlayer::ETmRacePlayerCoopMode::Checkpoint"
        },
        {
            "contents": "CTmMlPlayer::ETmJumpMode::Disabled",
            "trigger": "CTmMlPlayer::ETmJumpMode::Disabled"
        },
        {
            "contents": "CTmMlPlayer::ETmJumpMode::Simple",
            "trigger": "CTmMlPlayer::ETmJumpMode::Simple"
        },
        {
            "contents": "CTmMlPlayer::ETmJumpMode::Double",
            "trigger": "CTmMlPlayer::ETmJumpMode::Double"
        },
        {
            "contents": "CTmMlPlayer::ETmJumpMode::Infinite",
            "trigger": "CTmMlPlayer::ETmJumpMode::Infinite"
        },
        {
            "contents": "CTmMlPlayer::ETmBonusModeEventType::None",
            "trigger": "CTmMlPlayer::ETmBonusModeEventType::None"
        },
        {
            "contents": "CTmMlPlayer::ETmBonusModeEventType::Bumps",
            "trigger": "CTmMlPlayer::ETmBonusModeEventType::Bumps"
        },
        {
            "contents": "CTmMlPlayer::ETmBonusModeEventType::LowGravity",
            "trigger": "CTmMlPlayer::ETmBonusModeEventType::LowGravity"
        },
        {
            "contents": "CTmMlPlayer::ETmBonusModeEventType::FreeWheeling",
            "trigger": "CTmMlPlayer::ETmBonusModeEventType::FreeWheeling"
        },
        {
            "contents": "CTmMlPlayer::ETmBonusModeEventType::LockedDirections",
            "trigger": "CTmMlPlayer::ETmBonusModeEventType::LockedDirections"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::None",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::None"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::StraightJump",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::StraightJump"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Flip",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Flip"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::BackFlip",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::BackFlip"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Spin",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Spin"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Aerial",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Aerial"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::AlleyOop",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::AlleyOop"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Roll",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Roll"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Corkscrew",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Corkscrew"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::SpinOff",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::SpinOff"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Rodeo",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Rodeo"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::FlipFlap",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::FlipFlap"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Twister",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Twister"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::FreeStyle",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::FreeStyle"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::SpinningMix",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::SpinningMix"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::FlippingChaos",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::FlippingChaos"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::RollingMadness",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::RollingMadness"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckNone",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckNone"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckStraightJump",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckStraightJump"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFlip",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFlip"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckBackFlip",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckBackFlip"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckSpin",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckSpin"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckAerial",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckAerial"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckAlleyOop",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckAlleyOop"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckRoll",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckRoll"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckCorkscrew",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckCorkscrew"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckSpinOff",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckSpinOff"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckRodeo",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckRodeo"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFlipFlap",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFlipFlap"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckTwister",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckTwister"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFreeStyle",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFreeStyle"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckSpinningMix",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckSpinningMix"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFlippingChaos",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFlippingChaos"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckRollingMadness",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckRollingMadness"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::TimePenalty",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::TimePenalty"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::RespawnPenalty",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::RespawnPenalty"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Grind",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Grind"
        },
        {
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Reset",
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Reset"
        },
        {
            "contents": "CurrentClan",
            "trigger": "Integer CTmMlPlayer.CurrentClan"
        },
        {
            "contents": "RaceState",
            "trigger": "ERaceState CTmMlPlayer.RaceState"
        },
        {
            "contents": "IsSpawned",
            "trigger": "Boolean CTmMlPlayer.IsSpawned"
        },
        {
            "contents": "Score",
            "trigger": "CTrackManiaScore CTmMlPlayer.Score"
        },
        {
            "contents": "RaceStartTime",
            "trigger": "Integer CTmMlPlayer.RaceStartTime"
        },
        {
            "contents": "LapStartTime",
            "trigger": "Integer CTmMlPlayer.LapStartTime"
        },
        {
            "contents": "CurRace",
            "trigger": "CTmResult CTmMlPlayer.CurRace"
        },
        {
            "contents": "CurLap",
            "trigger": "CTmResult CTmMlPlayer.CurLap"
        },
        {
            "contents": "CurrentNbLaps",
            "trigger": "Integer CTmMlPlayer.CurrentNbLaps"
        },
        {
            "contents": "CurTriggerIndex",
            "trigger": "Integer CTmMlPlayer.CurTriggerIndex"
        },
        {
            "contents": "CurCheckpointRaceTime",
            "trigger": "Integer CTmMlPlayer.CurCheckpointRaceTime"
        },
        {
            "contents": "CurCheckpointLapTime",
            "trigger": "Integer CTmMlPlayer.CurCheckpointLapTime"
        },
        {
            "contents": "CoopSymbiosysPercentTotal",
            "trigger": "Integer CTmMlPlayer.CoopSymbiosysPercentTotal"
        },
        {
            "contents": "CoopCheckpointCurController",
            "trigger": "Integer CTmMlPlayer.CoopCheckpointCurController"
        },
        {
            "contents": "CoopMode",
            "trigger": "ETmRacePlayerCoopMode CTmMlPlayer.CoopMode"
        },
        {
            "contents": "ControllerCount",
            "trigger": "Integer CTmMlPlayer.ControllerCount"
        },
        {
            "contents": "ControllerId0",
            "trigger": "Integer CTmMlPlayer.ControllerId0"
        },
        {
            "contents": "ControllerId1",
            "trigger": "Integer CTmMlPlayer.ControllerId1"
        },
        {
            "contents": "ControllerId2",
            "trigger": "Integer CTmMlPlayer.ControllerId2"
        },
        {
            "contents": "ControllerId3",
            "trigger": "Integer CTmMlPlayer.ControllerId3"
        },
        {
            "contents": "ForcedAerialCamera",
            "trigger": "Boolean CTmMlPlayer.ForcedAerialCamera"
        },
        {
            "contents": "ButtonSmashFrenzy",
            "trigger": "Boolean CTmMlPlayer.ButtonSmashFrenzy"
        },
        {
            "contents": "EnableTurboButton",
            "trigger": "Boolean CTmMlPlayer.EnableTurboButton"
        },
        {
            "contents": "MaxiAirControl",
            "trigger": "Boolean CTmMlPlayer.MaxiAirControl"
        },
        {
            "contents": "EnableEmptyCars",
            "trigger": "Boolean CTmMlPlayer.EnableEmptyCars"
        },
        {
            "contents": "JumpMode",
            "trigger": "ETmJumpMode CTmMlPlayer.JumpMode"
        },
        {
            "contents": "TinyCar",
            "trigger": "Boolean CTmMlPlayer.TinyCar"
        },
        {
            "contents": "EnableCatchUpSpeed",
            "trigger": "Boolean CTmMlPlayer.EnableCatchUpSpeed"
        },
        {
            "contents": "EnableStuntMode",
            "trigger": "Boolean CTmMlPlayer.EnableStuntMode"
        },
        {
            "contents": "EnableOnlineMode",
            "trigger": "Boolean CTmMlPlayer.EnableOnlineMode"
        },
        {
            "contents": "AccelCoef",
            "trigger": "Real CTmMlPlayer.AccelCoef"
        },
        {
            "contents": "ControlCoef",
            "trigger": "Real CTmMlPlayer.ControlCoef"
        },
        {
            "contents": "GravityCoef",
            "trigger": "Real CTmMlPlayer.GravityCoef"
        },
        {
            "contents": "Position",
            "trigger": "Vec3 CTmMlPlayer.Position"
        },
        {
            "contents": "AimDirection",
            "trigger": "Vec3 CTmMlPlayer.AimDirection"
        },
        {
            "contents": "AimYaw",
            "trigger": "Real CTmMlPlayer.AimYaw"
        },
        {
            "contents": "AimPitch",
            "trigger": "Real CTmMlPlayer.AimPitch"
        },
        {
            "contents": "Upwardness",
            "trigger": "Real CTmMlPlayer.Upwardness"
        },
        {
            "contents": "CurRaceContinuousRank",
            "trigger": "Integer CTmMlPlayer.CurRaceContinuousRank"
        },
        {
            "contents": "Distance",
            "trigger": "Real CTmMlPlayer.Distance"
        },
        {
            "contents": "Speed",
            "trigger": "Real CTmMlPlayer.Speed"
        },
        {
            "contents": "DisplaySpeed",
            "trigger": "Integer CTmMlPlayer.DisplaySpeed"
        },
        {
            "contents": "InputSteer",
            "trigger": "Real CTmMlPlayer.InputSteer"
        },
        {
            "contents": "InputGasPedal",
            "trigger": "Real CTmMlPlayer.InputGasPedal"
        },
        {
            "contents": "InputIsBraking",
            "trigger": "Boolean CTmMlPlayer.InputIsBraking"
        },
        {
            "contents": "EngineRpm",
            "trigger": "Real CTmMlPlayer.EngineRpm"
        },
        {
            "contents": "EngineCurGear",
            "trigger": "Integer CTmMlPlayer.EngineCurGear"
        },
        {
            "contents": "EngineTurboRatio",
            "trigger": "Real CTmMlPlayer.EngineTurboRatio"
        },
        {
            "contents": "WheelsContactCount",
            "trigger": "Integer CTmMlPlayer.WheelsContactCount"
        },
        {
            "contents": "WheelsSkiddingCount",
            "trigger": "Integer CTmMlPlayer.WheelsSkiddingCount"
        },
        {
            "contents": "DamageHullRatio",
            "trigger": "Real CTmMlPlayer.DamageHullRatio"
        },
        {
            "contents": "DamageWindowRatio",
            "trigger": "Real CTmMlPlayer.DamageWindowRatio"
        },
        {
            "contents": "InWaterDuration",
            "trigger": "Integer CTmMlPlayer.InWaterDuration"
        },
        {
            "contents": "FreeWheelingDuration",
            "trigger": "Integer CTmMlPlayer.FreeWheelingDuration"
        },
        {
            "contents": "FlyingDuration",
            "trigger": "Integer CTmMlPlayer.FlyingDuration"
        },
        {
            "contents": "SparklingDuration",
            "trigger": "Integer CTmMlPlayer.SparklingDuration"
        },
        {
            "contents": "LightTrailsDuration",
            "trigger": "Integer CTmMlPlayer.LightTrailsDuration"
        },
        {
            "contents": "SkiddingDuration",
            "trigger": "Integer CTmMlPlayer.SkiddingDuration"
        },
        {
            "contents": "SkiddingDistance",
            "trigger": "Real CTmMlPlayer.SkiddingDistance"
        },
        {
            "contents": "FlyingDistance",
            "trigger": "Real CTmMlPlayer.FlyingDistance"
        },
        {
            "contents": "BonusModeIsJump",
            "trigger": "Boolean CTmMlPlayer.BonusModeIsJump"
        },
        {
            "contents": "BonusModeIsTurbo",
            "trigger": "Boolean CTmMlPlayer.BonusModeIsTurbo"
        },
        {
            "contents": "BonusModeIsMiniCar",
            "trigger": "Boolean CTmMlPlayer.BonusModeIsMiniCar"
        },
        {
            "contents": "BonusModeIsBigCar",
            "trigger": "Boolean CTmMlPlayer.BonusModeIsBigCar"
        },
        {
            "contents": "BonusModeIsEmptyCars",
            "trigger": "Boolean CTmMlPlayer.BonusModeIsEmptyCars"
        },
        {
            "contents": "BonusModeIsSpeedyCars",
            "trigger": "Boolean CTmMlPlayer.BonusModeIsSpeedyCars"
        },
        {
            "contents": "BonusModeIsGold",
            "trigger": "Boolean CTmMlPlayer.BonusModeIsGold"
        },
        {
            "contents": "BonusModeEmptyCarsStock",
            "trigger": "Integer CTmMlPlayer.BonusModeEmptyCarsStock"
        },
        {
            "contents": "BonusModeTurboStock",
            "trigger": "Integer CTmMlPlayer.BonusModeTurboStock"
        },
        {
            "contents": "BonusModeJumpStock",
            "trigger": "Integer CTmMlPlayer.BonusModeJumpStock"
        },
        {
            "contents": "BonusBumpCooldown",
            "trigger": "Integer CTmMlPlayer.BonusBumpCooldown"
        },
        {
            "contents": "BonusIsPossible",
            "trigger": "Boolean CTmMlPlayer.BonusIsPossible"
        },
        {
            "contents": "BonusModeTimeTillEvent",
            "trigger": "Integer CTmMlPlayer.BonusModeTimeTillEvent"
        },
        {
            "contents": "BonusModeTimeTillEndEvent",
            "trigger": "Integer CTmMlPlayer.BonusModeTimeTillEndEvent"
        },
        {
            "contents": "BonusModeTimeTillEventWarning",
            "trigger": "Integer CTmMlPlayer.BonusModeTimeTillEventWarning"
        },
        {
            "contents": "BonusModeEventType",
            "trigger": "ETmBonusModeEventType CTmMlPlayer.BonusModeEventType"
        },
        {
            "contents": "BonusModeEventIsGold",
            "trigger": "Boolean CTmMlPlayer.BonusModeEventIsGold"
        },
        {
            "contents": "StuntLastTime",
            "trigger": "Integer CTmMlPlayer.StuntLastTime"
        },
        {
            "contents": "StuntPoints",
            "trigger": "Integer CTmMlPlayer.StuntPoints"
        },
        {
            "contents": "StuntCombo",
            "trigger": "Integer CTmMlPlayer.StuntCombo"
        },
        {
            "contents": "StuntPerfectLanding",
            "trigger": "Boolean CTmMlPlayer.StuntPerfectLanding"
        },
        {
            "contents": "StuntMasterLanding",
            "trigger": "Boolean CTmMlPlayer.StuntMasterLanding"
        },
        {
            "contents": "StuntEpicLanding",
            "trigger": "Boolean CTmMlPlayer.StuntEpicLanding"
        },
        {
            "contents": "StuntLast",
            "trigger": "ESceneVehiclePhyStuntFigure CTmMlPlayer.StuntLast"
        },
        {
            "contents": "StuntTurboGauge",
            "trigger": "Integer CTmMlPlayer.StuntTurboGauge"
        },
        {
            "contents": "StuntTurboGaugeMax",
            "trigger": "Integer CTmMlPlayer.StuntTurboGaugeMax"
        },
        {
            "contents": "TimeElapsedSinceLastStunt",
            "trigger": "Integer CTmMlPlayer.TimeElapsedSinceLastStunt"
        },
        {
            "contents": "StuntAngle",
            "trigger": "Integer CTmMlPlayer.StuntAngle"
        },
        {
            "contents": "UniqueCameraRespawnCount",
            "trigger": "Integer CTmMlPlayer.UniqueCameraRespawnCount"
        },
        {
            "contents": "UniqueCameraAvailableRespawnLeft",
            "trigger": "Integer CTmMlPlayer.UniqueCameraAvailableRespawnLeft"
        },
        {
            "contents": "TimeLeftForStuntCombo",
            "trigger": "Integer CTmMlPlayer.TimeLeftForStuntCombo"
        },
        {
            "contents": "TimeTillSmashRespawn",
            "trigger": "Integer CTmMlPlayer.TimeTillSmashRespawn"
        },
        {
            "contents": "TimeTillSmashGiveUp",
            "trigger": "Integer CTmMlPlayer.TimeTillSmashGiveUp"
        },
        {
            "contents": "SmashNeedHelp",
            "trigger": "Boolean CTmMlPlayer.SmashNeedHelp"
        },
        {
            "contents": "StuntStickNeedHelp",
            "trigger": "Boolean CTmMlPlayer.StuntStickNeedHelp"
        },
        {
            "contents": "StuntJumpNeedHelp",
            "trigger": "Boolean CTmMlPlayer.StuntJumpNeedHelp"
        },
        {
            "contents": "StuntJumpCharge",
            "trigger": "Real CTmMlPlayer.StuntJumpCharge"
        },
        {
            "contents": "StuntMasterCharge",
            "trigger": "Real CTmMlPlayer.StuntMasterCharge"
        },
        {
            "contents": "StuntEpicCharge",
            "trigger": "Real CTmMlPlayer.StuntEpicCharge"
        },
        {
            "contents": "TimeBeforeDeadlyZone",
            "trigger": "Integer CTmMlPlayer.TimeBeforeDeadlyZone"
        },
        {
            "contents": "IsDeadlyZoneActive",
            "trigger": "Boolean CTmMlPlayer.IsDeadlyZoneActive"
        },
        {
            "contents": "StuntStateReset()",
            "trigger": "Void StuntStateReset()"
        },
        {
            "contents": "CModulePlaygroundStore",
            "trigger": "CModulePlaygroundStore"
        },
        {
            "contents": "Reset()",
            "trigger": "Void Reset()"
        },
        {
            "contents": "Reset(${0:CPlayer Player})",
            "trigger": "Void Reset(CPlayer Player)"
        },
        {
            "contents": "SetMoney(${0:CPlayer Player}, ${1:Integer Amount})",
            "trigger": "Void SetMoney(CPlayer Player, Integer Amount)"
        },
        {
            "contents": "GetMoney(${0:CPlayer Player})",
            "trigger": "Integer GetMoney(CPlayer Player)"
        },
        {
            "contents": "AddMoney(${0:CPlayer Player}, ${1:Integer Amount})",
            "trigger": "Boolean AddMoney(CPlayer Player, Integer Amount)"
        },
        {
            "contents": "SubMoney(${0:CPlayer Player}, ${1:Integer Amount})",
            "trigger": "Boolean SubMoney(CPlayer Player, Integer Amount)"
        },
        {
            "contents": "SetActionLevel(${0:CPlayer Player}, ${1:Text ActionUrl}, ${2:Integer ActionLevel})",
            "trigger": "Void SetActionLevel(CPlayer Player, Text ActionUrl, Integer ActionLevel)"
        },
        {
            "contents": "GetActionLevel(${0:CPlayer Player}, ${1:Text ActionUrl})",
            "trigger": "Integer GetActionLevel(CPlayer Player, Text ActionUrl)"
        },
        {
            "contents": "SetItemCanBeBought(${0:CPlayer Player}, ${1:Text ActionUrl}, ${2:Boolean CanBeBought})",
            "trigger": "Void SetItemCanBeBought(CPlayer Player, Text ActionUrl, Boolean CanBeBought)"
        },
        {
            "contents": "GetItemCanBeBought(${0:CPlayer Player}, ${1:Text ActionUrl})",
            "trigger": "Boolean GetItemCanBeBought(CPlayer Player, Text ActionUrl)"
        },
        {
            "contents": "CTaskResult_GhostList",
            "trigger": "CTaskResult_GhostList"
        },
        {
            "contents": "Ghosts",
            "trigger": "CGhost[] CTaskResult_GhostList.Ghosts"
        },
        {
            "contents": "CXmlDocument",
            "trigger": "CXmlDocument"
        },
        {
            "contents": "TextContents",
            "trigger": "Text CXmlDocument.TextContents"
        },
        {
            "contents": "Root",
            "trigger": "CXmlNode CXmlDocument.Root"
        },
        {
            "contents": "Nodes",
            "trigger": "CXmlNode[] CXmlDocument.Nodes"
        },
        {
            "contents": "GetFirstChild(${0:Text Name})",
            "trigger": "CXmlNode GetFirstChild(Text Name)"
        },
        {
            "contents": "CTitle",
            "trigger": "CTitle"
        },
        {
            "contents": "TitleId",
            "trigger": "Text CTitle.TitleId"
        },
        {
            "contents": "AuthorLogin",
            "trigger": "Text CTitle.AuthorLogin"
        },
        {
            "contents": "AuthorName",
            "trigger": "Text CTitle.AuthorName"
        },
        {
            "contents": "Name",
            "trigger": "Text CTitle.Name"
        },
        {
            "contents": "Desc",
            "trigger": "Text CTitle.Desc"
        },
        {
            "contents": "InfoUrl",
            "trigger": "Text CTitle.InfoUrl"
        },
        {
            "contents": "DownloadUrl",
            "trigger": "Text CTitle.DownloadUrl"
        },
        {
            "contents": "TitleVersion",
            "trigger": "Text CTitle.TitleVersion"
        },
        {
            "contents": "MakerTitleId",
            "trigger": "Text CTitle.MakerTitleId"
        },
        {
            "contents": "BaseTitleId",
            "trigger": "Text CTitle.BaseTitleId"
        },
        {
            "contents": "CMlMediaPlayer",
            "trigger": "CMlMediaPlayer"
        },
        {
            "contents": "IsInitPlay",
            "trigger": "Boolean CMlMediaPlayer.IsInitPlay"
        },
        {
            "contents": "Music",
            "trigger": "Boolean CMlMediaPlayer.Music"
        },
        {
            "contents": "IsLooping",
            "trigger": "Boolean CMlMediaPlayer.IsLooping"
        },
        {
            "contents": "Volume",
            "trigger": "Real CMlMediaPlayer.Volume"
        },
        {
            "contents": "Url",
            "trigger": "Text CMlMediaPlayer.Url"
        },
        {
            "contents": "Play()",
            "trigger": "Void Play()"
        },
        {
            "contents": "Stop()",
            "trigger": "Void Stop()"
        },
        {
            "contents": "StopAndRewind()",
            "trigger": "Void StopAndRewind()"
        },
        {
            "contents": "CMlStation",
            "trigger": "CMlStation"
        },
        {
            "contents": "ParentApp",
            "trigger": "CManiaAppStation CMlStation.ParentApp"
        },
        {
            "contents": "Station",
            "trigger": "CStation CMlStation.Station"
        },
        {
            "contents": "EnterStation()",
            "trigger": "Void EnterStation()"
        },
        {
            "contents": "CEditorModule",
            "trigger": "CEditorModule"
        },
        {
            "contents": "CEditorModule::EModuleType::Undefined",
            "trigger": "CEditorModule::EModuleType::Undefined"
        },
        {
            "contents": "CEditorModule::EModuleType::Hud",
            "trigger": "CEditorModule::EModuleType::Hud"
        },
        {
            "contents": "CEditorModule::EModuleType::Inventory",
            "trigger": "CEditorModule::EModuleType::Inventory"
        },
        {
            "contents": "CEditorModule::EModuleType::Store",
            "trigger": "CEditorModule::EModuleType::Store"
        },
        {
            "contents": "CEditorModule::EModuleType::ScoresTable",
            "trigger": "CEditorModule::EModuleType::ScoresTable"
        },
        {
            "contents": "CEditorModule::EModuleType::Equipment",
            "trigger": "CEditorModule::EModuleType::Equipment"
        },
        {
            "contents": "CEditorModule::EModuleType::MenuBase",
            "trigger": "CEditorModule::EModuleType::MenuBase"
        },
        {
            "contents": "CEditorModule::EModuleType::MenuPage",
            "trigger": "CEditorModule::EModuleType::MenuPage"
        },
        {
            "contents": "EditedMenu",
            "trigger": "CModuleMenuModel CEditorModule.EditedMenu"
        },
        {
            "contents": "EditedMenuPage",
            "trigger": "CModuleMenuPageModel CEditorModule.EditedMenuPage"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CEditorPluginModuleEvent[] CEditorModule.PendingEvents"
        },
        {
            "contents": "NewModule(${0:EModuleType ModuleType})",
            "trigger": "Void NewModule(EModuleType ModuleType)"
        },
        {
            "contents": "OpenModule(${0:Text Url})",
            "trigger": "Void OpenModule(Text Url)"
        },
        {
            "contents": "Save()",
            "trigger": "Void Save()"
        },
        {
            "contents": "SaveAs(${0:Text Url})",
            "trigger": "Void SaveAs(Text Url)"
        },
        {
            "contents": "SaveCopyAs(${0:Text Url})",
            "trigger": "Void SaveCopyAs(Text Url)"
        },
        {
            "contents": "ForceExit()",
            "trigger": "Void ForceExit()"
        },
        {
            "contents": "CPackCreatorPack",
            "trigger": "CPackCreatorPack"
        },
        {
            "contents": "PackId",
            "trigger": "Ident CPackCreatorPack.PackId"
        },
        {
            "contents": "CreatorId",
            "trigger": "Ident CPackCreatorPack.CreatorId"
        },
        {
            "contents": "IsTitlePack",
            "trigger": "Boolean CPackCreatorPack.IsTitlePack"
        },
        {
            "contents": "Recipients",
            "trigger": "CPackCreatorRecipient[] CPackCreatorPack.Recipients"
        },
        {
            "contents": "Recipients_Add(${0:Text Login}, ${1:Integer UseCost}, ${2:Integer GetCost})",
            "trigger": "Void Recipients_Add(Text Login, Integer UseCost, Integer GetCost)"
        },
        {
            "contents": "Recipients_Remove(${0:Text Login})",
            "trigger": "Void Recipients_Remove(Text Login)"
        },
        {
            "contents": "CTmRaceClientEvent",
            "trigger": "CTmRaceClientEvent"
        },
        {
            "contents": "CTmRaceClientEvent::EType::Unknown",
            "trigger": "CTmRaceClientEvent::EType::Unknown"
        },
        {
            "contents": "CTmRaceClientEvent::EType::WayPoint",
            "trigger": "CTmRaceClientEvent::EType::WayPoint"
        },
        {
            "contents": "CTmRaceClientEvent::EType::Respawn",
            "trigger": "CTmRaceClientEvent::EType::Respawn"
        },
        {
            "contents": "CTmRaceClientEvent::EType::Turbo",
            "trigger": "CTmRaceClientEvent::EType::Turbo"
        },
        {
            "contents": "CTmRaceClientEvent::EType::Horn",
            "trigger": "CTmRaceClientEvent::EType::Horn"
        },
        {
            "contents": "CTmRaceClientEvent::EType::Impact",
            "trigger": "CTmRaceClientEvent::EType::Impact"
        },
        {
            "contents": "CTmRaceClientEvent::EType::WaterSplash",
            "trigger": "CTmRaceClientEvent::EType::WaterSplash"
        },
        {
            "contents": "CTmRaceClientEvent::EType::GlassSmash",
            "trigger": "CTmRaceClientEvent::EType::GlassSmash"
        },
        {
            "contents": "CTmRaceClientEvent::EType::PartDetached",
            "trigger": "CTmRaceClientEvent::EType::PartDetached"
        },
        {
            "contents": "CTmRaceClientEvent::EType::StopEngine",
            "trigger": "CTmRaceClientEvent::EType::StopEngine"
        },
        {
            "contents": "CTmRaceClientEvent::EType::StartEngine",
            "trigger": "CTmRaceClientEvent::EType::StartEngine"
        },
        {
            "contents": "CTmRaceClientEvent::EType::AirSpawnRelease",
            "trigger": "CTmRaceClientEvent::EType::AirSpawnRelease"
        },
        {
            "contents": "Type",
            "trigger": "EType CTmRaceClientEvent.Type"
        },
        {
            "contents": "Player",
            "trigger": "CTmMlPlayer CTmRaceClientEvent.Player"
        },
        {
            "contents": "CheckpointInRace",
            "trigger": "Integer CTmRaceClientEvent.CheckpointInRace"
        },
        {
            "contents": "CheckpointInLap",
            "trigger": "Integer CTmRaceClientEvent.CheckpointInLap"
        },
        {
            "contents": "IsEndRace",
            "trigger": "Boolean CTmRaceClientEvent.IsEndRace"
        },
        {
            "contents": "IsEndLap",
            "trigger": "Boolean CTmRaceClientEvent.IsEndLap"
        },
        {
            "contents": "RaceTime",
            "trigger": "Integer CTmRaceClientEvent.RaceTime"
        },
        {
            "contents": "LapTime",
            "trigger": "Integer CTmRaceClientEvent.LapTime"
        },
        {
            "contents": "StuntsScore",
            "trigger": "Integer CTmRaceClientEvent.StuntsScore"
        },
        {
            "contents": "NbRespawns",
            "trigger": "Integer CTmRaceClientEvent.NbRespawns"
        },
        {
            "contents": "CTaskResult_BuddiesChallengeRecord",
            "trigger": "CTaskResult_BuddiesChallengeRecord"
        },
        {
            "contents": "Login",
            "trigger": "Text CTaskResult_BuddiesChallengeRecord.Login"
        },
        {
            "contents": "BuddiesChallengeRecord",
            "trigger": "CHighScoreComparison[] CTaskResult_BuddiesChallengeRecord.BuddiesChallengeRecord"
        },
        {
            "contents": "SortByOpponentCount()",
            "trigger": "Void SortByOpponentCount()"
        },
        {
            "contents": "SortByOpponentDisplayName()",
            "trigger": "Void SortByOpponentDisplayName()"
        },
        {
            "contents": "SortByOpponentLogin()",
            "trigger": "Void SortByOpponentLogin()"
        },
        {
            "contents": "SortByOpponentRecordDate()",
            "trigger": "Void SortByOpponentRecordDate()"
        },
        {
            "contents": "SortByOpponentRecordTime()",
            "trigger": "Void SortByOpponentRecordTime()"
        },
        {
            "contents": "CDataFileMgr",
            "trigger": "CDataFileMgr"
        },
        {
            "contents": "CDataFileMgr::EMediaType::Image",
            "trigger": "CDataFileMgr::EMediaType::Image"
        },
        {
            "contents": "CDataFileMgr::EMediaType::Sound",
            "trigger": "CDataFileMgr::EMediaType::Sound"
        },
        {
            "contents": "CDataFileMgr::EMediaType::Script",
            "trigger": "CDataFileMgr::EMediaType::Script"
        },
        {
            "contents": "CDataFileMgr::EMediaType::MatchSettings",
            "trigger": "CDataFileMgr::EMediaType::MatchSettings"
        },
        {
            "contents": "CDataFileMgr::EMediaType::Module",
            "trigger": "CDataFileMgr::EMediaType::Module"
        },
        {
            "contents": "TaskResults",
            "trigger": "CTaskResult[] CDataFileMgr.TaskResults"
        },
        {
            "contents": "Campaigns",
            "trigger": "CCampaign[] CDataFileMgr.Campaigns"
        },
        {
            "contents": "Ghosts",
            "trigger": "CGhost[] CDataFileMgr.Ghosts"
        },
        {
            "contents": "TaskResult_Release(${0:Ident TaskId})",
            "trigger": "Void TaskResult_Release(Ident TaskId)"
        },
        {
            "contents": "Campaign_Get(${0:Text CampaignId})",
            "trigger": "CCampaign Campaign_Get(Text CampaignId)"
        },
        {
            "contents": "Map_GetUserList(${0:Ident UserId})",
            "trigger": "CTaskResult_MapList Map_GetUserList(Ident UserId)"
        },
        {
            "contents": "Map_GetGameList(${0:Text Path}, ${1:Boolean Flatten})",
            "trigger": "CTaskResult_MapList Map_GetGameList(Text Path, Boolean Flatten)"
        },
        {
            "contents": "Map_GetFilteredGameList(${0:Integer Scope}, ${1:Text Path}, ${2:Boolean Flatten})",
            "trigger": "CTaskResult_MapList Map_GetFilteredGameList(Integer Scope, Text Path, Boolean Flatten)"
        },
        {
            "contents": "Ghost_Release(${0:Ident GhostId})",
            "trigger": "Void Ghost_Release(Ident GhostId)"
        },
        {
            "contents": "Replay_GetGameList(${0:Text Path}, ${1:Boolean Flatten})",
            "trigger": "CTaskResult_ReplayList Replay_GetGameList(Text Path, Boolean Flatten)"
        },
        {
            "contents": "Replay_GetFilteredGameList(${0:Integer Scope}, ${1:Text Path}, ${2:Boolean Flatten})",
            "trigger": "CTaskResult_ReplayList Replay_GetFilteredGameList(Integer Scope, Text Path, Boolean Flatten)"
        },
        {
            "contents": "Replay_Load(${0:Text Path})",
            "trigger": "CTaskResult_GhostList Replay_Load(Text Path)"
        },
        {
            "contents": "Replay_Save(${0:Text Path}, ${1:CMap Map}, ${2:CGhost Ghost})",
            "trigger": "CTaskResult Replay_Save(Text Path, CMap Map, CGhost Ghost)"
        },
        {
            "contents": "Media_GetGameList(${0:EMediaType Type}, ${1:Text Path}, ${2:Boolean Flatten})",
            "trigger": "CTaskResult_FileList Media_GetGameList(EMediaType Type, Text Path, Boolean Flatten)"
        },
        {
            "contents": "Media_GetFilteredGameList(${0:EMediaType Type}, ${1:Integer Scope}, ${2:Text Path}, ${3:Boolean Flatten})",
            "trigger": "CTaskResult_FileList Media_GetFilteredGameList(EMediaType Type, Integer Scope, Text Path, Boolean Flatten)"
        },
        {
            "contents": "CPlug",
            "trigger": "CPlug"
        },
        {
            "contents": "CMlEntry",
            "trigger": "CMlEntry"
        },
        {
            "contents": "CMlEntry::ETextFormat::Basic",
            "trigger": "CMlEntry::ETextFormat::Basic"
        },
        {
            "contents": "CMlEntry::ETextFormat::Script",
            "trigger": "CMlEntry::ETextFormat::Script"
        },
        {
            "contents": "CMlEntry::ETextFormat::Password",
            "trigger": "CMlEntry::ETextFormat::Password"
        },
        {
            "contents": "CMlEntry::ETextFormat::Newpassword",
            "trigger": "CMlEntry::ETextFormat::Newpassword"
        },
        {
            "contents": "Value",
            "trigger": "Text CMlEntry.Value"
        },
        {
            "contents": "TextFormat",
            "trigger": "ETextFormat CMlEntry.TextFormat"
        },
        {
            "contents": "Opacity",
            "trigger": "Real CMlEntry.Opacity"
        },
        {
            "contents": "TextColor",
            "trigger": "Vec3 CMlEntry.TextColor"
        },
        {
            "contents": "TextSizeReal",
            "trigger": "Real CMlEntry.TextSizeReal"
        },
        {
            "contents": "MaxLine",
            "trigger": "Integer CMlEntry.MaxLine"
        },
        {
            "contents": "AutoNewLine",
            "trigger": "Boolean CMlEntry.AutoNewLine"
        },
        {
            "contents": "StartEdition()",
            "trigger": "Void StartEdition()"
        },
        {
            "contents": "SetText(${0:Text NewText}, ${1:Boolean SendSubmitEvent})",
            "trigger": "Void SetText(Text NewText, Boolean SendSubmitEvent)"
        },
        {
            "contents": "CUIConfigMgr",
            "trigger": "CUIConfigMgr"
        },
        {
            "contents": "UIAll",
            "trigger": "CUIConfig CUIConfigMgr.UIAll"
        },
        {
            "contents": "UI",
            "trigger": "CUIConfig[] CUIConfigMgr.UI"
        },
        {
            "contents": "UILayers",
            "trigger": "CUILayer[] CUIConfigMgr.UILayers"
        },
        {
            "contents": "UIReplayLayers",
            "trigger": "CUILayer[] CUIConfigMgr.UIReplayLayers"
        },
        {
            "contents": "UISequenceMaxDuration",
            "trigger": "Integer CUIConfigMgr.UISequenceMaxDuration"
        },
        {
            "contents": "HoldLoadingScreen",
            "trigger": "Boolean CUIConfigMgr.HoldLoadingScreen"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CUIConfigEvent[] CUIConfigMgr.PendingEvents"
        },
        {
            "contents": "ResetAll()",
            "trigger": "Void ResetAll()"
        },
        {
            "contents": "GetUI(${0:CPlayer Player})",
            "trigger": "CUIConfig GetUI(CPlayer Player)"
        },
        {
            "contents": "GetUI(${0:CUser User})",
            "trigger": "CUIConfig GetUI(CUser User)"
        },
        {
            "contents": "UILayerCreate()",
            "trigger": "CUILayer UILayerCreate()"
        },
        {
            "contents": "UILayerDestroy(${0:CUILayer Layer})",
            "trigger": "Void UILayerDestroy(CUILayer Layer)"
        },
        {
            "contents": "UILayerDestroyAll()",
            "trigger": "Void UILayerDestroyAll()"
        },
        {
            "contents": "CAchievementsAchievementDesc",
            "trigger": "CAchievementsAchievementDesc"
        },
        {
            "contents": "TitleId",
            "trigger": "Text CAchievementsAchievementDesc.TitleId"
        },
        {
            "contents": "DisplayName",
            "trigger": "Text CAchievementsAchievementDesc.DisplayName"
        },
        {
            "contents": "Description",
            "trigger": "Text CAchievementsAchievementDesc.Description"
        },
        {
            "contents": "IconUrl",
            "trigger": "Text CAchievementsAchievementDesc.IconUrl"
        },
        {
            "contents": "CNotificationsConsumer",
            "trigger": "CNotificationsConsumer"
        },
        {
            "contents": "CNotificationsConsumer::EFilterPriority::All",
            "trigger": "CNotificationsConsumer::EFilterPriority::All"
        },
        {
            "contents": "CNotificationsConsumer::EFilterPriority::MoreThanMemo",
            "trigger": "CNotificationsConsumer::EFilterPriority::MoreThanMemo"
        },
        {
            "contents": "CNotificationsConsumer::EFilterPriority::MoreThanNotice",
            "trigger": "CNotificationsConsumer::EFilterPriority::MoreThanNotice"
        },
        {
            "contents": "Events",
            "trigger": "CNotificationsConsumerEvent[] CNotificationsConsumer.Events"
        },
        {
            "contents": "Notifications",
            "trigger": "CNotificationsConsumerNotification[] CNotificationsConsumer.Notifications"
        },
        {
            "contents": "FilteredNotifications",
            "trigger": "CNotificationsConsumerNotification[] CNotificationsConsumer.FilteredNotifications"
        },
        {
            "contents": "Filter_Priority",
            "trigger": "EFilterPriority CNotificationsConsumer.Filter_Priority"
        },
        {
            "contents": "CTaskResult_BuddiesChallengeRecordsComparison",
            "trigger": "CTaskResult_BuddiesChallengeRecordsComparison"
        },
        {
            "contents": "Login",
            "trigger": "Text CTaskResult_BuddiesChallengeRecordsComparison.Login"
        },
        {
            "contents": "BuddiesComparison",
            "trigger": "CHighScoreComparisonSummary[] CTaskResult_BuddiesChallengeRecordsComparison.BuddiesComparison"
        },
        {
            "contents": "SortByPlayerCount()",
            "trigger": "Void SortByPlayerCount()"
        },
        {
            "contents": "SortByOpponentLogin()",
            "trigger": "Void SortByOpponentLogin()"
        },
        {
            "contents": "SortByOpponentCount()",
            "trigger": "Void SortByOpponentCount()"
        },
        {
            "contents": "SortByOpponentDate()",
            "trigger": "Void SortByOpponentDate()"
        },
        {
            "contents": "SortByOpponentDisplayName()",
            "trigger": "Void SortByOpponentDisplayName()"
        },
        {
            "contents": "CModulePlaygroundScoresTable",
            "trigger": "CModulePlaygroundScoresTable"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::CustomString",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::CustomString"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::CustomNatural",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::CustomNatural"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::CustomInteger",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::CustomInteger"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::CustomReal",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::CustomReal"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::CustomTime",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::CustomTime"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::Avatar",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::Avatar"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::Name",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::Name"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::ManiaStars",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::ManiaStars"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::Tools",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::Tools"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::Tags",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::Tags"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMBestTime",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMBestTime"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMPrevTime",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMPrevTime"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMBestLapTime",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMBestLapTime"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMStunts",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMStunts"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMRespawns",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMRespawns"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMCheckpoints",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMCheckpoints"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMPoints",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMPoints"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMPrevRaceDeltaPoints",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMPrevRaceDeltaPoints"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::SMPoints",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::SMPoints"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EColumnType::SMRoundPoints",
            "trigger": "CModulePlaygroundScoresTable::EColumnType::SMRoundPoints"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::Default",
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::Default"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::Name",
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::Name"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::LadderRanking",
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::LadderRanking"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::TMPoints",
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::TMPoints"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::TMBestTime",
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::TMBestTime"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::TMStunts",
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::TMStunts"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::TMRespawns",
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::TMRespawns"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::TMCheckpoints",
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::TMCheckpoints"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::TMPrevTime",
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::TMPrevTime"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::SMPoints",
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::SMPoints"
        },
        {
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::SMRoundPoints",
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::SMRoundPoints"
        },
        {
            "contents": "SetFooterText(${0:Text FooterText})",
            "trigger": "Void SetFooterText(Text FooterText)"
        },
        {
            "contents": "ResetCustomColumns(${0:CScore Score})",
            "trigger": "Void ResetCustomColumns(CScore Score)"
        },
        {
            "contents": "ResetCustomColumns()",
            "trigger": "Void ResetCustomColumns()"
        },
        {
            "contents": "Scores_Sort(${0:EScoreSortOrder SortOrder})",
            "trigger": "Void Scores_Sort(EScoreSortOrder SortOrder)"
        },
        {
            "contents": "SetColumnValue(${0:CScore Score}, ${1:Text ColumnId}, ${2:Text ColumnValue})",
            "trigger": "Void SetColumnValue(CScore Score, Text ColumnId, Text ColumnValue)"
        },
        {
            "contents": "SetColumnValue(${0:CScore Score}, ${1:Text ColumnId}, ${2:Integer ColumnValue})",
            "trigger": "Void SetColumnValue(CScore Score, Text ColumnId, Integer ColumnValue)"
        },
        {
            "contents": "SetColumnValue(${0:CScore Score}, ${1:Text ColumnId}, ${2:Real ColumnValue})",
            "trigger": "Void SetColumnValue(CScore Score, Text ColumnId, Real ColumnValue)"
        },
        {
            "contents": "SetColumnVisibility(${0:EColumnType Type}, ${1:Boolean Visibility})",
            "trigger": "Void SetColumnVisibility(EColumnType Type, Boolean Visibility)"
        },
        {
            "contents": "SetColumnVisibility(${0:Text ColumnId}, ${1:Boolean Visibility})",
            "trigger": "Void SetColumnVisibility(Text ColumnId, Boolean Visibility)"
        },
        {
            "contents": "CAudioSource",
            "trigger": "CAudioSource"
        },
        {
            "contents": "IsPlaying",
            "trigger": "Boolean CAudioSource.IsPlaying"
        },
        {
            "contents": "DownloadInProgress",
            "trigger": "Boolean CAudioSource.DownloadInProgress"
        },
        {
            "contents": "Volume",
            "trigger": "Real CAudioSource.Volume"
        },
        {
            "contents": "FadeDuration",
            "trigger": "Real CAudioSource.FadeDuration"
        },
        {
            "contents": "VolumedB",
            "trigger": "Real CAudioSource.VolumedB"
        },
        {
            "contents": "Pitch",
            "trigger": "Real CAudioSource.Pitch"
        },
        {
            "contents": "RelativePosition",
            "trigger": "Vec3 CAudioSource.RelativePosition"
        },
        {
            "contents": "PanRadiusLfe",
            "trigger": "Vec3 CAudioSource.PanRadiusLfe"
        },
        {
            "contents": "PlayCursor",
            "trigger": "Real CAudioSource.PlayCursor"
        },
        {
            "contents": "PlayLength",
            "trigger": "Real CAudioSource.PlayLength"
        },
        {
            "contents": "Play()",
            "trigger": "Void Play()"
        },
        {
            "contents": "Stop()",
            "trigger": "Void Stop()"
        },
        {
            "contents": "CAchievementsStatDesc",
            "trigger": "CAchievementsStatDesc"
        },
        {
            "contents": "TitleId",
            "trigger": "Text CAchievementsStatDesc.TitleId"
        },
        {
            "contents": "DisplayName",
            "trigger": "Text CAchievementsStatDesc.DisplayName"
        },
        {
            "contents": "Description",
            "trigger": "Text CAchievementsStatDesc.Description"
        },
        {
            "contents": "CSmAction",
            "trigger": "CSmAction"
        },
        {
            "contents": "Now",
            "trigger": "Integer CSmAction.Now"
        },
        {
            "contents": "Variant",
            "trigger": "Integer CSmAction.Variant"
        },
        {
            "contents": "Players",
            "trigger": "CSmPlayer[] CSmAction.Players"
        },
        {
            "contents": "Owner",
            "trigger": "CSmPlayer CSmAction.Owner"
        },
        {
            "contents": "IsActive",
            "trigger": "Boolean CSmAction.IsActive"
        },
        {
            "contents": "IsBound",
            "trigger": "Boolean CSmAction.IsBound"
        },
        {
            "contents": "Energy",
            "trigger": "Integer CSmAction.Energy"
        },
        {
            "contents": "EnergyMax",
            "trigger": "Integer CSmAction.EnergyMax"
        },
        {
            "contents": "EnergyCost",
            "trigger": "Integer CSmAction.EnergyCost"
        },
        {
            "contents": "EnergyReload",
            "trigger": "Boolean CSmAction.EnergyReload"
        },
        {
            "contents": "AmmoGain",
            "trigger": "Real CSmAction.AmmoGain"
        },
        {
            "contents": "State_EntityId1",
            "trigger": "Ident CSmAction.State_EntityId1"
        },
        {
            "contents": "State_Integer1",
            "trigger": "Integer CSmAction.State_Integer1"
        },
        {
            "contents": "State_Boolean1",
            "trigger": "Boolean CSmAction.State_Boolean1"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CSmActionEvent[] CSmAction.PendingEvents"
        },
        {
            "contents": "IsJumping",
            "trigger": "Boolean CSmAction.IsJumping"
        },
        {
            "contents": "IsGliding",
            "trigger": "Boolean CSmAction.IsGliding"
        },
        {
            "contents": "IsAttractor",
            "trigger": "Boolean CSmAction.IsAttractor"
        },
        {
            "contents": "IsFlying",
            "trigger": "Boolean CSmAction.IsFlying"
        },
        {
            "contents": "IsSliding",
            "trigger": "Boolean CSmAction.IsSliding"
        },
        {
            "contents": "IsRunning",
            "trigger": "Boolean CSmAction.IsRunning"
        },
        {
            "contents": "IsFrozen",
            "trigger": "Boolean CSmAction.IsFrozen"
        },
        {
            "contents": "IsSneaking",
            "trigger": "Boolean CSmAction.IsSneaking"
        },
        {
            "contents": "IsFreeLooking",
            "trigger": "Boolean CSmAction.IsFreeLooking"
        },
        {
            "contents": "HasNoPlayerCollision",
            "trigger": "Boolean CSmAction.HasNoPlayerCollision"
        },
        {
            "contents": "Cooldown",
            "trigger": "Integer CSmAction.Cooldown"
        },
        {
            "contents": "SendRulesEvent(${0:Text Param1}, ${1:Text[] Param2}, ${2:CSmPlayer Shooter}, ${3:CSmPlayer Victim})",
            "trigger": "Void SendRulesEvent(Text Param1, Text[] Param2, CSmPlayer Shooter, CSmPlayer Victim)"
        },
        {
            "contents": "SendRulesEvent(${0:Text Param1}, ${1:Text[] Param2}, ${2:CSmPlayer Shooter}, ${3:CSmPlayer Victim}, ${4:CSmObject Object})",
            "trigger": "Void SendRulesEvent(Text Param1, Text[] Param2, CSmPlayer Shooter, CSmPlayer Victim, CSmObject Object)"
        },
        {
            "contents": "SendRulesEvent(${0:Text Param1}, ${1:Text[] Param2}, ${2:CSmPlayer Shooter}, ${3:CSmPlayer Victim}, ${4:CSmObject Object}, ${5:CModeTurret Turret})",
            "trigger": "Void SendRulesEvent(Text Param1, Text[] Param2, CSmPlayer Shooter, CSmPlayer Victim, CSmObject Object, CModeTurret Turret)"
        },
        {
            "contents": "Anim_GetModelId(${0:Text ModelName})",
            "trigger": "Ident Anim_GetModelId(Text ModelName)"
        },
        {
            "contents": "Anim_PlayAtLocation(${0:Ident AnimModelId}, ${1:Vec3 Position}, ${2:Vec3 Direction})",
            "trigger": "Ident Anim_PlayAtLocation(Ident AnimModelId, Vec3 Position, Vec3 Direction)"
        },
        {
            "contents": "Anim_PlayOnPlayer(${0:Ident AnimModelId}, ${1:CSmPlayer Player})",
            "trigger": "Ident Anim_PlayOnPlayer(Ident AnimModelId, CSmPlayer Player)"
        },
        {
            "contents": "Anim_Stop(${0:Ident AnimId})",
            "trigger": "Void Anim_Stop(Ident AnimId)"
        },
        {
            "contents": "Projectile_GetModelId(${0:Text ModelName})",
            "trigger": "Ident Projectile_GetModelId(Text ModelName)"
        },
        {
            "contents": "Projectile_CreateAtLocation(${0:Ident ProjectileModelId}, ${1:CSmPlayer PlayerToIgnore}, ${2:Vec3 InitialPosition}, ${3:Vec3 InitialDirection}, ${4:Vec3 InitialVelocity})",
            "trigger": "Ident Projectile_CreateAtLocation(Ident ProjectileModelId, CSmPlayer PlayerToIgnore, Vec3 InitialPosition, Vec3 InitialDirection, Vec3 InitialVelocity)"
        },
        {
            "contents": "Projectile_CreateOnPlayer(${0:Ident ProjectileModelId}, ${1:CSmPlayer Shooter})",
            "trigger": "Ident Projectile_CreateOnPlayer(Ident ProjectileModelId, CSmPlayer Shooter)"
        },
        {
            "contents": "Cooldown_IsReady()",
            "trigger": "Boolean Cooldown_IsReady()"
        },
        {
            "contents": "Cooldown_Start()",
            "trigger": "Void Cooldown_Start()"
        },
        {
            "contents": "Shield_CreateAtLocation(${0:Vec3 Position}, ${1:Vec3 Direction})",
            "trigger": "Ident Shield_CreateAtLocation(Vec3 Position, Vec3 Direction)"
        },
        {
            "contents": "Shield_CreateOnPlayer(${0:CSmPlayer ShieldOwner})",
            "trigger": "Ident Shield_CreateOnPlayer(CSmPlayer ShieldOwner)"
        },
        {
            "contents": "Shield_Destroy(${0:Ident ShieldId})",
            "trigger": "Void Shield_Destroy(Ident ShieldId)"
        },
        {
            "contents": "Shield_Exists(${0:Ident ShieldId})",
            "trigger": "Boolean Shield_Exists(Ident ShieldId)"
        },
        {
            "contents": "Shield_GetArmor(${0:Ident ShieldId})",
            "trigger": "Integer Shield_GetArmor(Ident ShieldId)"
        },
        {
            "contents": "Shield_SetArmor(${0:Ident ShieldId}, ${1:Integer ShieldArmor})",
            "trigger": "Void Shield_SetArmor(Ident ShieldId, Integer ShieldArmor)"
        },
        {
            "contents": "Shield_GetIsActive(${0:Ident ShieldId})",
            "trigger": "Boolean Shield_GetIsActive(Ident ShieldId)"
        },
        {
            "contents": "Shield_SetIsActive(${0:Ident ShieldId}, ${1:Boolean ShieldIsActive})",
            "trigger": "Void Shield_SetIsActive(Ident ShieldId, Boolean ShieldIsActive)"
        },
        {
            "contents": "Shield_GetArmorMax(${0:Ident ShieldId})",
            "trigger": "Integer Shield_GetArmorMax(Ident ShieldId)"
        },
        {
            "contents": "Shield_GetTickReload(${0:Ident ShieldId})",
            "trigger": "Integer Shield_GetTickReload(Ident ShieldId)"
        },
        {
            "contents": "Shield_GetCooldown(${0:Ident ShieldId})",
            "trigger": "Integer Shield_GetCooldown(Ident ShieldId)"
        },
        {
            "contents": "GetPlayerAmmo(${0:CSmPlayer Player})",
            "trigger": "Integer GetPlayerAmmo(CSmPlayer Player)"
        },
        {
            "contents": "GetPlayerAmmoMax(${0:CSmPlayer Player})",
            "trigger": "Integer GetPlayerAmmoMax(CSmPlayer Player)"
        },
        {
            "contents": "CManiaAppPlayground",
            "trigger": "CManiaAppPlayground"
        },
        {
            "contents": "CTmMode",
            "trigger": "CTmMode"
        },
        {
            "contents": "CTmMode::ETmScoreSortOrder::TotalPoints",
            "trigger": "CTmMode::ETmScoreSortOrder::TotalPoints"
        },
        {
            "contents": "CTmMode::ETmScoreSortOrder::BestRace_Time",
            "trigger": "CTmMode::ETmScoreSortOrder::BestRace_Time"
        },
        {
            "contents": "CTmMode::ETmScoreSortOrder::BestRace_Stunts",
            "trigger": "CTmMode::ETmScoreSortOrder::BestRace_Stunts"
        },
        {
            "contents": "CTmMode::ETmScoreSortOrder::BestRace_NbRespawns",
            "trigger": "CTmMode::ETmScoreSortOrder::BestRace_NbRespawns"
        },
        {
            "contents": "CTmMode::ETmScoreSortOrder::BestRace_CheckpointsProgress",
            "trigger": "CTmMode::ETmScoreSortOrder::BestRace_CheckpointsProgress"
        },
        {
            "contents": "CTmMode::ETmScoreSortOrder::PrevRace_Time",
            "trigger": "CTmMode::ETmScoreSortOrder::PrevRace_Time"
        },
        {
            "contents": "CTmMode::ETmScoreSortOrder::Name",
            "trigger": "CTmMode::ETmScoreSortOrder::Name"
        },
        {
            "contents": "CTmMode::ETmScoreSortOrder::LadderRankSortValue",
            "trigger": "CTmMode::ETmScoreSortOrder::LadderRankSortValue"
        },
        {
            "contents": "CTmMode::ETMRespawnBehaviour::Normal",
            "trigger": "CTmMode::ETMRespawnBehaviour::Normal"
        },
        {
            "contents": "CTmMode::ETMRespawnBehaviour::DoNothing",
            "trigger": "CTmMode::ETMRespawnBehaviour::DoNothing"
        },
        {
            "contents": "CTmMode::ETMRespawnBehaviour::GiveUpBeforeFirstCheckPoint",
            "trigger": "CTmMode::ETMRespawnBehaviour::GiveUpBeforeFirstCheckPoint"
        },
        {
            "contents": "CTmMode::ETMRespawnBehaviour::AlwaysGiveUp",
            "trigger": "CTmMode::ETMRespawnBehaviour::AlwaysGiveUp"
        },
        {
            "contents": "CTmMode::ETmRaceChronoBehaviour::Auto",
            "trigger": "CTmMode::ETmRaceChronoBehaviour::Auto"
        },
        {
            "contents": "CTmMode::ETmRaceChronoBehaviour::Hidden",
            "trigger": "CTmMode::ETmRaceChronoBehaviour::Hidden"
        },
        {
            "contents": "CTmMode::ETmRaceChronoBehaviour::CountDown",
            "trigger": "CTmMode::ETmRaceChronoBehaviour::CountDown"
        },
        {
            "contents": "CTmMode::ETmRaceChronoBehaviour::Normal",
            "trigger": "CTmMode::ETmRaceChronoBehaviour::Normal"
        },
        {
            "contents": "CTmMode::EPersonalGhost::Disabled",
            "trigger": "CTmMode::EPersonalGhost::Disabled"
        },
        {
            "contents": "CTmMode::EPersonalGhost::Latest",
            "trigger": "CTmMode::EPersonalGhost::Latest"
        },
        {
            "contents": "CTmMode::EPersonalGhost::FastestRace",
            "trigger": "CTmMode::EPersonalGhost::FastestRace"
        },
        {
            "contents": "AllPlayers",
            "trigger": "CTmPlayer[] CTmMode.AllPlayers"
        },
        {
            "contents": "Spectators",
            "trigger": "CTmPlayer[] CTmMode.Spectators"
        },
        {
            "contents": "Players",
            "trigger": "CTmPlayer[] CTmMode.Players"
        },
        {
            "contents": "PlayersRacing",
            "trigger": "CTmPlayer[] CTmMode.PlayersRacing"
        },
        {
            "contents": "PlayersWaiting",
            "trigger": "CTmPlayer[] CTmMode.PlayersWaiting"
        },
        {
            "contents": "Scores",
            "trigger": "CTmScore[] CTmMode.Scores"
        },
        {
            "contents": "Clan1Score",
            "trigger": "Integer CTmMode.Clan1Score"
        },
        {
            "contents": "Clan2Score",
            "trigger": "Integer CTmMode.Clan2Score"
        },
        {
            "contents": "ClanScores",
            "trigger": "Integer[] CTmMode.ClanScores"
        },
        {
            "contents": "ClansNbTotal",
            "trigger": "Integer CTmMode.ClansNbTotal"
        },
        {
            "contents": "ClansNbPlayers",
            "trigger": "Integer[] CTmMode.ClansNbPlayers"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CTmModeEvent[] CTmMode.PendingEvents"
        },
        {
            "contents": "CutOffTimeLimit",
            "trigger": "Integer CTmMode.CutOffTimeLimit"
        },
        {
            "contents": "NbLaps",
            "trigger": "Integer CTmMode.NbLaps"
        },
        {
            "contents": "IndependantLaps",
            "trigger": "Boolean CTmMode.IndependantLaps"
        },
        {
            "contents": "UseClans",
            "trigger": "Boolean CTmMode.UseClans"
        },
        {
            "contents": "UseForcedClans",
            "trigger": "Boolean CTmMode.UseForcedClans"
        },
        {
            "contents": "RespawnBehaviour",
            "trigger": "ETMRespawnBehaviour CTmMode.RespawnBehaviour"
        },
        {
            "contents": "UiRounds",
            "trigger": "Boolean CTmMode.UiRounds"
        },
        {
            "contents": "UiLaps",
            "trigger": "Boolean CTmMode.UiLaps"
        },
        {
            "contents": "UiStuntsMode",
            "trigger": "Boolean CTmMode.UiStuntsMode"
        },
        {
            "contents": "UiDisplayStuntsNames",
            "trigger": "Boolean CTmMode.UiDisplayStuntsNames"
        },
        {
            "contents": "UiDisableHelpMessage",
            "trigger": "Boolean CTmMode.UiDisableHelpMessage"
        },
        {
            "contents": "UiScoresPointsLimit",
            "trigger": "Integer CTmMode.UiScoresPointsLimit"
        },
        {
            "contents": "UiRaceChrono",
            "trigger": "ETmRaceChronoBehaviour CTmMode.UiRaceChrono"
        },
        {
            "contents": "EnableCollisions",
            "trigger": "Boolean CTmMode.EnableCollisions"
        },
        {
            "contents": "EnableScaleCar",
            "trigger": "Boolean CTmMode.EnableScaleCar"
        },
        {
            "contents": "EnableCheckpointBonus",
            "trigger": "Boolean CTmMode.EnableCheckpointBonus"
        },
        {
            "contents": "EnableUniqueCamera",
            "trigger": "Boolean CTmMode.EnableUniqueCamera"
        },
        {
            "contents": "EnableBonusEvents",
            "trigger": "Boolean CTmMode.EnableBonusEvents"
        },
        {
            "contents": "HideOpponents",
            "trigger": "Boolean CTmMode.HideOpponents"
        },
        {
            "contents": "ForceMaxOpponents",
            "trigger": "Integer CTmMode.ForceMaxOpponents"
        },
        {
            "contents": "EnableLegacyXmlRpcCallbacks",
            "trigger": "Boolean CTmMode.EnableLegacyXmlRpcCallbacks"
        },
        {
            "contents": "MedalGhost_ShowGold",
            "trigger": "Boolean CTmMode.MedalGhost_ShowGold"
        },
        {
            "contents": "MedalGhost_ShowSilver",
            "trigger": "Boolean CTmMode.MedalGhost_ShowSilver"
        },
        {
            "contents": "MedalGhost_ShowBronze",
            "trigger": "Boolean CTmMode.MedalGhost_ShowBronze"
        },
        {
            "contents": "PersonalGhost",
            "trigger": "EPersonalGhost CTmMode.PersonalGhost"
        },
        {
            "contents": "MapStartLinePos",
            "trigger": "Vec3 CTmMode.MapStartLinePos"
        },
        {
            "contents": "MapCheckpointPos",
            "trigger": "Vec3[] CTmMode.MapCheckpointPos"
        },
        {
            "contents": "MapFinishLinePos",
            "trigger": "Vec3[] CTmMode.MapFinishLinePos"
        },
        {
            "contents": "MapIsLapRace",
            "trigger": "Boolean CTmMode.MapIsLapRace"
        },
        {
            "contents": "MapNbLaps",
            "trigger": "Integer CTmMode.MapNbLaps"
        },
        {
            "contents": "PassOn(${0:CTmModeEvent Event})",
            "trigger": "Void PassOn(CTmModeEvent Event)"
        },
        {
            "contents": "Discard(${0:CTmModeEvent Event})",
            "trigger": "Void Discard(CTmModeEvent Event)"
        },
        {
            "contents": "SpawnPlayer(${0:CTmPlayer Player}, ${1:Integer ClanNum}, ${2:Integer RaceStartTime})",
            "trigger": "Void SpawnPlayer(CTmPlayer Player, Integer ClanNum, Integer RaceStartTime)"
        },
        {
            "contents": "UnspawnPlayer(${0:CTmPlayer Player})",
            "trigger": "Void UnspawnPlayer(CTmPlayer Player)"
        },
        {
            "contents": "SetPlayerClan(${0:CTmPlayer Player}, ${1:Integer ClanNum})",
            "trigger": "Void SetPlayerClan(CTmPlayer Player, Integer ClanNum)"
        },
        {
            "contents": "Scores_Sort(${0:ETmScoreSortOrder SortOrder})",
            "trigger": "Void Scores_Sort(ETmScoreSortOrder SortOrder)"
        },
        {
            "contents": "Scores_Clear()",
            "trigger": "Void Scores_Clear()"
        },
        {
            "contents": "Ladder_ComputeRank(${0:ETmScoreSortOrder SortOrder})",
            "trigger": "Void Ladder_ComputeRank(ETmScoreSortOrder SortOrder)"
        },
        {
            "contents": "Cheats_Reset()",
            "trigger": "Void Cheats_Reset()"
        },
        {
            "contents": "RaceGhost_Add(${0:CGhost Ghost}, ${1:Boolean DisplayAsPlayerBest})",
            "trigger": "Ident RaceGhost_Add(CGhost Ghost, Boolean DisplayAsPlayerBest)"
        },
        {
            "contents": "RaceGhost_AddWithOffset(${0:CGhost Ghost}, ${1:Integer OffsetMs})",
            "trigger": "Ident RaceGhost_AddWithOffset(CGhost Ghost, Integer OffsetMs)"
        },
        {
            "contents": "RaceGhost_Add(${0:CGhost Ghost}, ${1:Boolean DisplayAsPlayerBest}, ${2:Ident ModelId})",
            "trigger": "Ident RaceGhost_Add(CGhost Ghost, Boolean DisplayAsPlayerBest, Ident ModelId)"
        },
        {
            "contents": "RaceGhost_Remove(${0:Ident GhostInstId})",
            "trigger": "Void RaceGhost_Remove(Ident GhostInstId)"
        },
        {
            "contents": "RaceGhost_RemoveAll()",
            "trigger": "Void RaceGhost_RemoveAll()"
        },
        {
            "contents": "RaceGhost_GetStartTime(${0:Ident GhostInstId})",
            "trigger": "Integer RaceGhost_GetStartTime(Ident GhostInstId)"
        },
        {
            "contents": "RaceGhost_GetCurCheckpoint(${0:Ident GhostInstId})",
            "trigger": "Integer RaceGhost_GetCurCheckpoint(Ident GhostInstId)"
        },
        {
            "contents": "RaceGhost_GetCheckpointTime(${0:Ident GhostInstId}, ${1:Integer Checkpoint})",
            "trigger": "Integer RaceGhost_GetCheckpointTime(Ident GhostInstId, Integer Checkpoint)"
        },
        {
            "contents": "RaceGhost_IsReplayOver(${0:Ident GhostInstId})",
            "trigger": "Boolean RaceGhost_IsReplayOver(Ident GhostInstId)"
        },
        {
            "contents": "CSmScore",
            "trigger": "CSmScore"
        },
        {
            "contents": "TeamNum",
            "trigger": "Integer CSmScore.TeamNum"
        },
        {
            "contents": "Points",
            "trigger": "Integer CSmScore.Points"
        },
        {
            "contents": "RoundPoints",
            "trigger": "Integer CSmScore.RoundPoints"
        },
        {
            "contents": "NbEliminationsInflicted",
            "trigger": "Integer CSmScore.NbEliminationsInflicted"
        },
        {
            "contents": "NbEliminationsTaken",
            "trigger": "Integer CSmScore.NbEliminationsTaken"
        },
        {
            "contents": "NbRespawnsRequested",
            "trigger": "Integer CSmScore.NbRespawnsRequested"
        },
        {
            "contents": "DamageInflicted",
            "trigger": "Integer CSmScore.DamageInflicted"
        },
        {
            "contents": "DamageTaken",
            "trigger": "Integer CSmScore.DamageTaken"
        },
        {
            "contents": "Clear()",
            "trigger": "Void Clear()"
        },
        {
            "contents": "CModulePlayground",
            "trigger": "CModulePlayground"
        },
        {
            "contents": "Hide()",
            "trigger": "Void Hide()"
        },
        {
            "contents": "Hide(${0:CUIConfig UIConfig})",
            "trigger": "Void Hide(CUIConfig UIConfig)"
        },
        {
            "contents": "Show()",
            "trigger": "Void Show()"
        },
        {
            "contents": "Show(${0:CUIConfig UIConfig})",
            "trigger": "Void Show(CUIConfig UIConfig)"
        },
        {
            "contents": "IsVisible(${0:CUIConfig UIConfig})",
            "trigger": "Boolean IsVisible(CUIConfig UIConfig)"
        },
        {
            "contents": "CModeTurret",
            "trigger": "CModeTurret"
        },
        {
            "contents": "Armor",
            "trigger": "Integer CModeTurret.Armor"
        },
        {
            "contents": "ArmorMax",
            "trigger": "Integer CModeTurret.ArmorMax"
        },
        {
            "contents": "Owner",
            "trigger": "CModeTurret CModeTurret.Owner"
        },
        {
            "contents": "CMlFileEntry",
            "trigger": "CMlFileEntry"
        },
        {
            "contents": "FullFileName",
            "trigger": "Text CMlFileEntry.FullFileName"
        },
        {
            "contents": "CTaskResult_GetOnlinePresence",
            "trigger": "CTaskResult_GetOnlinePresence"
        },
        {
            "contents": "OnlinePresences",
            "trigger": "COnlinePresence[] CTaskResult_GetOnlinePresence.OnlinePresences"
        },
        {
            "contents": "AddLogin(${0:Text Login})",
            "trigger": "Void AddLogin(Text Login)"
        },
        {
            "contents": "StartTask()",
            "trigger": "Void StartTask()"
        },
        {
            "contents": "CBlockModelClip",
            "trigger": "CBlockModelClip"
        },
        {
            "contents": "CBlockModelClip::EnumClipType::ClassicClip",
            "trigger": "CBlockModelClip::EnumClipType::ClassicClip"
        },
        {
            "contents": "CBlockModelClip::EnumClipType::FreeClipSide",
            "trigger": "CBlockModelClip::EnumClipType::FreeClipSide"
        },
        {
            "contents": "CBlockModelClip::EnumClipType::FreeClipTop",
            "trigger": "CBlockModelClip::EnumClipType::FreeClipTop"
        },
        {
            "contents": "CBlockModelClip::EnumClipType::FreeClipBottom",
            "trigger": "CBlockModelClip::EnumClipType::FreeClipBottom"
        },
        {
            "contents": "CBlockModelClip::MultiDirEnum::SameDir",
            "trigger": "CBlockModelClip::MultiDirEnum::SameDir"
        },
        {
            "contents": "CBlockModelClip::MultiDirEnum::SymmetricalDirs",
            "trigger": "CBlockModelClip::MultiDirEnum::SymmetricalDirs"
        },
        {
            "contents": "CBlockModelClip::MultiDirEnum::AllDir",
            "trigger": "CBlockModelClip::MultiDirEnum::AllDir"
        },
        {
            "contents": "CBlockModelClip::MultiDirEnum::OpposedDirOnly",
            "trigger": "CBlockModelClip::MultiDirEnum::OpposedDirOnly"
        },
        {
            "contents": "CBlockModelClip::MultiDirEnum::PerpendicularDirsOnly",
            "trigger": "CBlockModelClip::MultiDirEnum::PerpendicularDirsOnly"
        },
        {
            "contents": "CBlockModelClip::MultiDirEnum::NextDirOnly",
            "trigger": "CBlockModelClip::MultiDirEnum::NextDirOnly"
        },
        {
            "contents": "CBlockModelClip::MultiDirEnum::PreviousDirOnly",
            "trigger": "CBlockModelClip::MultiDirEnum::PreviousDirOnly"
        },
        {
            "contents": "CSmBlock",
            "trigger": "CSmBlock"
        },
        {
            "contents": "Base",
            "trigger": "CSmBase CSmBlock.Base"
        },
        {
            "contents": "CAchievementsStat",
            "trigger": "CAchievementsStat"
        },
        {
            "contents": "UserId",
            "trigger": "Ident CAchievementsStat.UserId"
        },
        {
            "contents": "StatDesc",
            "trigger": "CAchievementsStatDesc CAchievementsStat.StatDesc"
        },
        {
            "contents": "Value",
            "trigger": "Integer CAchievementsStat.Value"
        },
        {
            "contents": "CTmModeEvent",
            "trigger": "CTmModeEvent"
        },
        {
            "contents": "CTmModeEvent::EType::Unknown",
            "trigger": "CTmModeEvent::EType::Unknown"
        },
        {
            "contents": "CTmModeEvent::EType::StartLine",
            "trigger": "CTmModeEvent::EType::StartLine"
        },
        {
            "contents": "CTmModeEvent::EType::WayPoint",
            "trigger": "CTmModeEvent::EType::WayPoint"
        },
        {
            "contents": "CTmModeEvent::EType::GiveUp",
            "trigger": "CTmModeEvent::EType::GiveUp"
        },
        {
            "contents": "CTmModeEvent::EType::Respawn",
            "trigger": "CTmModeEvent::EType::Respawn"
        },
        {
            "contents": "CTmModeEvent::EType::Stunt",
            "trigger": "CTmModeEvent::EType::Stunt"
        },
        {
            "contents": "CTmModeEvent::EType::OnPlayerAdded",
            "trigger": "CTmModeEvent::EType::OnPlayerAdded"
        },
        {
            "contents": "CTmModeEvent::EType::OnPlayerRemoved",
            "trigger": "CTmModeEvent::EType::OnPlayerRemoved"
        },
        {
            "contents": "CTmModeEvent::EType::OnCommand",
            "trigger": "CTmModeEvent::EType::OnCommand"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::None",
            "trigger": "CTmModeEvent::EStuntFigure::None"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::StraightJump",
            "trigger": "CTmModeEvent::EStuntFigure::StraightJump"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::Flip",
            "trigger": "CTmModeEvent::EStuntFigure::Flip"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::BackFlip",
            "trigger": "CTmModeEvent::EStuntFigure::BackFlip"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::Spin",
            "trigger": "CTmModeEvent::EStuntFigure::Spin"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::Aerial",
            "trigger": "CTmModeEvent::EStuntFigure::Aerial"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::AlleyOop",
            "trigger": "CTmModeEvent::EStuntFigure::AlleyOop"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::Roll",
            "trigger": "CTmModeEvent::EStuntFigure::Roll"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::Corkscrew",
            "trigger": "CTmModeEvent::EStuntFigure::Corkscrew"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::SpinOff",
            "trigger": "CTmModeEvent::EStuntFigure::SpinOff"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::Rodeo",
            "trigger": "CTmModeEvent::EStuntFigure::Rodeo"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::FlipFlap",
            "trigger": "CTmModeEvent::EStuntFigure::FlipFlap"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::Twister",
            "trigger": "CTmModeEvent::EStuntFigure::Twister"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::FreeStyle",
            "trigger": "CTmModeEvent::EStuntFigure::FreeStyle"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::SpinningMix",
            "trigger": "CTmModeEvent::EStuntFigure::SpinningMix"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::FlippingChaos",
            "trigger": "CTmModeEvent::EStuntFigure::FlippingChaos"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::RollingMadness",
            "trigger": "CTmModeEvent::EStuntFigure::RollingMadness"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckNone",
            "trigger": "CTmModeEvent::EStuntFigure::WreckNone"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckStraightJump",
            "trigger": "CTmModeEvent::EStuntFigure::WreckStraightJump"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckFlip",
            "trigger": "CTmModeEvent::EStuntFigure::WreckFlip"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckBackFlip",
            "trigger": "CTmModeEvent::EStuntFigure::WreckBackFlip"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckSpin",
            "trigger": "CTmModeEvent::EStuntFigure::WreckSpin"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckAerial",
            "trigger": "CTmModeEvent::EStuntFigure::WreckAerial"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckAlleyOop",
            "trigger": "CTmModeEvent::EStuntFigure::WreckAlleyOop"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckRoll",
            "trigger": "CTmModeEvent::EStuntFigure::WreckRoll"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckCorkscrew",
            "trigger": "CTmModeEvent::EStuntFigure::WreckCorkscrew"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckSpinOff",
            "trigger": "CTmModeEvent::EStuntFigure::WreckSpinOff"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckRodeo",
            "trigger": "CTmModeEvent::EStuntFigure::WreckRodeo"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckFlipFlap",
            "trigger": "CTmModeEvent::EStuntFigure::WreckFlipFlap"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckTwister",
            "trigger": "CTmModeEvent::EStuntFigure::WreckTwister"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckFreeStyle",
            "trigger": "CTmModeEvent::EStuntFigure::WreckFreeStyle"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckSpinningMix",
            "trigger": "CTmModeEvent::EStuntFigure::WreckSpinningMix"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckFlippingChaos",
            "trigger": "CTmModeEvent::EStuntFigure::WreckFlippingChaos"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::WreckRollingMadness",
            "trigger": "CTmModeEvent::EStuntFigure::WreckRollingMadness"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::TimePenalty",
            "trigger": "CTmModeEvent::EStuntFigure::TimePenalty"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::RespawnPenalty",
            "trigger": "CTmModeEvent::EStuntFigure::RespawnPenalty"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::Grind",
            "trigger": "CTmModeEvent::EStuntFigure::Grind"
        },
        {
            "contents": "CTmModeEvent::EStuntFigure::Reset",
            "trigger": "CTmModeEvent::EStuntFigure::Reset"
        },
        {
            "contents": "Type",
            "trigger": "EType CTmModeEvent.Type"
        },
        {
            "contents": "Player",
            "trigger": "CTmPlayer CTmModeEvent.Player"
        },
        {
            "contents": "RaceTime",
            "trigger": "Integer CTmModeEvent.RaceTime"
        },
        {
            "contents": "CheckpointInRace",
            "trigger": "Integer CTmModeEvent.CheckpointInRace"
        },
        {
            "contents": "CheckpointInLap",
            "trigger": "Integer CTmModeEvent.CheckpointInLap"
        },
        {
            "contents": "IsEndLap",
            "trigger": "Boolean CTmModeEvent.IsEndLap"
        },
        {
            "contents": "IsEndRace",
            "trigger": "Boolean CTmModeEvent.IsEndRace"
        },
        {
            "contents": "LapTime",
            "trigger": "Integer CTmModeEvent.LapTime"
        },
        {
            "contents": "StuntsScore",
            "trigger": "Integer CTmModeEvent.StuntsScore"
        },
        {
            "contents": "NbRespawns",
            "trigger": "Integer CTmModeEvent.NbRespawns"
        },
        {
            "contents": "BlockId",
            "trigger": "Ident CTmModeEvent.BlockId"
        },
        {
            "contents": "Speed",
            "trigger": "Real CTmModeEvent.Speed"
        },
        {
            "contents": "Distance",
            "trigger": "Real CTmModeEvent.Distance"
        },
        {
            "contents": "Damages",
            "trigger": "Real CTmModeEvent.Damages"
        },
        {
            "contents": "StuntFigure",
            "trigger": "EStuntFigure CTmModeEvent.StuntFigure"
        },
        {
            "contents": "Angle",
            "trigger": "Integer CTmModeEvent.Angle"
        },
        {
            "contents": "Points",
            "trigger": "Integer CTmModeEvent.Points"
        },
        {
            "contents": "Combo",
            "trigger": "Integer CTmModeEvent.Combo"
        },
        {
            "contents": "IsStraight",
            "trigger": "Boolean CTmModeEvent.IsStraight"
        },
        {
            "contents": "IsReverse",
            "trigger": "Boolean CTmModeEvent.IsReverse"
        },
        {
            "contents": "IsMasterJump",
            "trigger": "Boolean CTmModeEvent.IsMasterJump"
        },
        {
            "contents": "Factor",
            "trigger": "Real CTmModeEvent.Factor"
        },
        {
            "contents": "User",
            "trigger": "CUser CTmModeEvent.User"
        },
        {
            "contents": "PlayerWasSpawned",
            "trigger": "Boolean CTmModeEvent.PlayerWasSpawned"
        },
        {
            "contents": "PlayerWasInLadderMatch",
            "trigger": "Boolean CTmModeEvent.PlayerWasInLadderMatch"
        },
        {
            "contents": "CommandName",
            "trigger": "Text CTmModeEvent.CommandName"
        },
        {
            "contents": "CommandValueBoolean",
            "trigger": "Boolean CTmModeEvent.CommandValueBoolean"
        },
        {
            "contents": "CommandValueInteger",
            "trigger": "Integer CTmModeEvent.CommandValueInteger"
        },
        {
            "contents": "CommandValueReal",
            "trigger": "Real CTmModeEvent.CommandValueReal"
        },
        {
            "contents": "CommandValueText",
            "trigger": "Text CTmModeEvent.CommandValueText"
        },
        {
            "contents": "CPlaygroundClient",
            "trigger": "CPlaygroundClient"
        },
        {
            "contents": "Map",
            "trigger": "CMap CPlaygroundClient.Map"
        },
        {
            "contents": "GameTime",
            "trigger": "Integer CPlaygroundClient.GameTime"
        },
        {
            "contents": "LocalUser",
            "trigger": "CUser CPlaygroundClient.LocalUser"
        },
        {
            "contents": "UI",
            "trigger": "CUIConfig CPlaygroundClient.UI"
        },
        {
            "contents": "ServerInfo",
            "trigger": "CServerInfo CPlaygroundClient.ServerInfo"
        },
        {
            "contents": "IsSpectator",
            "trigger": "Boolean CPlaygroundClient.IsSpectator"
        },
        {
            "contents": "IsSpectatorClient",
            "trigger": "Boolean CPlaygroundClient.IsSpectatorClient"
        },
        {
            "contents": "UseClans",
            "trigger": "Boolean CPlaygroundClient.UseClans"
        },
        {
            "contents": "UseForcedClans",
            "trigger": "Boolean CPlaygroundClient.UseForcedClans"
        },
        {
            "contents": "IsLoadingScreen",
            "trigger": "Boolean CPlaygroundClient.IsLoadingScreen"
        },
        {
            "contents": "Teams",
            "trigger": "CTeam[] CPlaygroundClient.Teams"
        },
        {
            "contents": "DisablePlayingStateTracking",
            "trigger": "Boolean CPlaygroundClient.DisablePlayingStateTracking"
        },
        {
            "contents": "QuitServer(${0:Boolean Silent})",
            "trigger": "Void QuitServer(Boolean Silent)"
        },
        {
            "contents": "QuitServerAndSetResult(${0:Boolean Silent}, ${1:Text Type}, ${2:Text[] Data})",
            "trigger": "Void QuitServerAndSetResult(Boolean Silent, Text Type, Text[] Data)"
        },
        {
            "contents": "JoinTeam1()",
            "trigger": "Void JoinTeam1()"
        },
        {
            "contents": "JoinTeam2()",
            "trigger": "Void JoinTeam2()"
        },
        {
            "contents": "RequestSpectatorClient(${0:Boolean Spectator})",
            "trigger": "Void RequestSpectatorClient(Boolean Spectator)"
        },
        {
            "contents": "SetSpectateTarget(${0:Text Player})",
            "trigger": "Void SetSpectateTarget(Text Player)"
        },
        {
            "contents": "ShowProfile(${0:Text Player})",
            "trigger": "Void ShowProfile(Text Player)"
        },
        {
            "contents": "CManiaAppBase",
            "trigger": "CManiaAppBase"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CManiaAppEvent[] CManiaAppBase.PendingEvents"
        },
        {
            "contents": "CStation",
            "trigger": "CStation"
        },
        {
            "contents": "Title",
            "trigger": "CTitle CStation.Title"
        },
        {
            "contents": "AudienceRegisteredUsers",
            "trigger": "Integer CStation.AudienceRegisteredUsers"
        },
        {
            "contents": "CampaignMedalsMax",
            "trigger": "Integer CStation.CampaignMedalsMax"
        },
        {
            "contents": "CampaignMedalsCurrent",
            "trigger": "Integer CStation.CampaignMedalsCurrent"
        },
        {
            "contents": "CampaignMedalsRanking",
            "trigger": "Integer CStation.CampaignMedalsRanking"
        },
        {
            "contents": "LadderPoints",
            "trigger": "Real CStation.LadderPoints"
        },
        {
            "contents": "LadderRank",
            "trigger": "Integer CStation.LadderRank"
        },
        {
            "contents": "DisableQuickEnter",
            "trigger": "Boolean CStation.DisableQuickEnter"
        },
        {
            "contents": "IsLogoVisible",
            "trigger": "Boolean CStation.IsLogoVisible"
        },
        {
            "contents": "GhostAlpha",
            "trigger": "Real CStation.GhostAlpha"
        },
        {
            "contents": "FocusLightColor",
            "trigger": "Vec3 CStation.FocusLightColor"
        },
        {
            "contents": "NormalLightColor",
            "trigger": "Vec3 CStation.NormalLightColor"
        },
        {
            "contents": "IsEditable",
            "trigger": "Boolean CStation.IsEditable"
        },
        {
            "contents": "CTmMlScriptIngame",
            "trigger": "CTmMlScriptIngame"
        },
        {
            "contents": "InputPlayer",
            "trigger": "CTmMlPlayer CTmMlScriptIngame.InputPlayer"
        },
        {
            "contents": "GUIPlayer",
            "trigger": "CTmMlPlayer CTmMlScriptIngame.GUIPlayer"
        },
        {
            "contents": "RaceEvents",
            "trigger": "CTmRaceClientEvent[] CTmMlScriptIngame.RaceEvents"
        },
        {
            "contents": "NbLaps",
            "trigger": "Integer CTmMlScriptIngame.NbLaps"
        },
        {
            "contents": "IndependantLaps",
            "trigger": "Boolean CTmMlScriptIngame.IndependantLaps"
        },
        {
            "contents": "Players",
            "trigger": "CTmMlPlayer[] CTmMlScriptIngame.Players"
        },
        {
            "contents": "Scores",
            "trigger": "CTmScore[] CTmMlScriptIngame.Scores"
        },
        {
            "contents": "ClanScores",
            "trigger": "Integer[] CTmMlScriptIngame.ClanScores"
        },
        {
            "contents": "SplitScreenNum",
            "trigger": "Integer CTmMlScriptIngame.SplitScreenNum"
        },
        {
            "contents": "SplitScreenCount",
            "trigger": "Integer CTmMlScriptIngame.SplitScreenCount"
        },
        {
            "contents": "CurPlayerCamera",
            "trigger": "Integer CTmMlScriptIngame.CurPlayerCamera"
        },
        {
            "contents": "MapStartLinePos",
            "trigger": "Vec3 CTmMlScriptIngame.MapStartLinePos"
        },
        {
            "contents": "MapCheckpointPos",
            "trigger": "Vec3[] CTmMlScriptIngame.MapCheckpointPos"
        },
        {
            "contents": "MapFinishLinePos",
            "trigger": "Vec3[] CTmMlScriptIngame.MapFinishLinePos"
        },
        {
            "contents": "MapIsLapRace",
            "trigger": "Boolean CTmMlScriptIngame.MapIsLapRace"
        },
        {
            "contents": "MapNbLaps",
            "trigger": "Integer CTmMlScriptIngame.MapNbLaps"
        },
        {
            "contents": "CTaskResult_ReplayList",
            "trigger": "CTaskResult_ReplayList"
        },
        {
            "contents": "ParentPath",
            "trigger": "Text CTaskResult_ReplayList.ParentPath"
        },
        {
            "contents": "Path",
            "trigger": "Text CTaskResult_ReplayList.Path"
        },
        {
            "contents": "ReplayInfos",
            "trigger": "CReplayInfo[] CTaskResult_ReplayList.ReplayInfos"
        },
        {
            "contents": "SubFolders",
            "trigger": "Text[] CTaskResult_ReplayList.SubFolders"
        },
        {
            "contents": "CNod",
            "trigger": "CNod"
        },
        {
            "contents": "Id",
            "trigger": "Ident CNod.Id"
        },
        {
            "contents": "CPackCreatorTitleInfo",
            "trigger": "CPackCreatorTitleInfo"
        },
        {
            "contents": "TitleId",
            "trigger": "Ident CPackCreatorTitleInfo.TitleId"
        },
        {
            "contents": "MakerTitleId",
            "trigger": "Ident CPackCreatorTitleInfo.MakerTitleId"
        },
        {
            "contents": "DisplayName",
            "trigger": "Text CPackCreatorTitleInfo.DisplayName"
        },
        {
            "contents": "Description",
            "trigger": "Text CPackCreatorTitleInfo.Description"
        },
        {
            "contents": "InfoUrl",
            "trigger": "Text CPackCreatorTitleInfo.InfoUrl"
        },
        {
            "contents": "DownloadUrl",
            "trigger": "Text CPackCreatorTitleInfo.DownloadUrl"
        },
        {
            "contents": "TitleVersion",
            "trigger": "Text CPackCreatorTitleInfo.TitleVersion"
        },
        {
            "contents": "AllowedClientTitleVersion",
            "trigger": "Text CPackCreatorTitleInfo.AllowedClientTitleVersion"
        },
        {
            "contents": "BaseTitleIds",
            "trigger": "Text CPackCreatorTitleInfo.BaseTitleIds"
        },
        {
            "contents": "Packaging_ImageFileName",
            "trigger": "Text CPackCreatorTitleInfo.Packaging_ImageFileName"
        },
        {
            "contents": "Packaging_LogosFileName",
            "trigger": "Text CPackCreatorTitleInfo.Packaging_LogosFileName"
        },
        {
            "contents": "Packaging_Group",
            "trigger": "Text CPackCreatorTitleInfo.Packaging_Group"
        },
        {
            "contents": "Station_ManialinkUrl",
            "trigger": "Text CPackCreatorTitleInfo.Station_ManialinkUrl"
        },
        {
            "contents": "Menus_BgReplayFileName",
            "trigger": "Text CPackCreatorTitleInfo.Menus_BgReplayFileName"
        },
        {
            "contents": "Menus_ManiaAppFileName",
            "trigger": "Text CPackCreatorTitleInfo.Menus_ManiaAppFileName"
        },
        {
            "contents": "Menus_MusicFileName",
            "trigger": "Text CPackCreatorTitleInfo.Menus_MusicFileName"
        },
        {
            "contents": "Solo_HasCampaign",
            "trigger": "Boolean CPackCreatorTitleInfo.Solo_HasCampaign"
        },
        {
            "contents": "Hud3dFontFileName",
            "trigger": "Text CPackCreatorTitleInfo.Hud3dFontFileName"
        },
        {
            "contents": "MusicFolder",
            "trigger": "Text CPackCreatorTitleInfo.MusicFolder"
        },
        {
            "contents": "CManiaAppEvent",
            "trigger": "CManiaAppEvent"
        },
        {
            "contents": "CManiaAppEvent::EType::LayerCustomEvent",
            "trigger": "CManiaAppEvent::EType::LayerCustomEvent"
        },
        {
            "contents": "CManiaAppEvent::EType::KeyPress",
            "trigger": "CManiaAppEvent::EType::KeyPress"
        },
        {
            "contents": "CManiaAppEvent::EType::ExternalCustomEvent",
            "trigger": "CManiaAppEvent::EType::ExternalCustomEvent"
        },
        {
            "contents": "CManiaAppEvent::EType::MenuNavigation",
            "trigger": "CManiaAppEvent::EType::MenuNavigation"
        },
        {
            "contents": "CManiaAppEvent::EMenuNavAction::Up",
            "trigger": "CManiaAppEvent::EMenuNavAction::Up"
        },
        {
            "contents": "CManiaAppEvent::EMenuNavAction::Right",
            "trigger": "CManiaAppEvent::EMenuNavAction::Right"
        },
        {
            "contents": "CManiaAppEvent::EMenuNavAction::Left",
            "trigger": "CManiaAppEvent::EMenuNavAction::Left"
        },
        {
            "contents": "CManiaAppEvent::EMenuNavAction::Down",
            "trigger": "CManiaAppEvent::EMenuNavAction::Down"
        },
        {
            "contents": "CManiaAppEvent::EMenuNavAction::Select",
            "trigger": "CManiaAppEvent::EMenuNavAction::Select"
        },
        {
            "contents": "CManiaAppEvent::EMenuNavAction::Cancel",
            "trigger": "CManiaAppEvent::EMenuNavAction::Cancel"
        },
        {
            "contents": "CManiaAppEvent::EMenuNavAction::PageUp",
            "trigger": "CManiaAppEvent::EMenuNavAction::PageUp"
        },
        {
            "contents": "CManiaAppEvent::EMenuNavAction::PageDown",
            "trigger": "CManiaAppEvent::EMenuNavAction::PageDown"
        },
        {
            "contents": "CManiaAppEvent::EMenuNavAction::AppMenu",
            "trigger": "CManiaAppEvent::EMenuNavAction::AppMenu"
        },
        {
            "contents": "CManiaAppEvent::EMenuNavAction::Action1",
            "trigger": "CManiaAppEvent::EMenuNavAction::Action1"
        },
        {
            "contents": "CManiaAppEvent::EMenuNavAction::Action2",
            "trigger": "CManiaAppEvent::EMenuNavAction::Action2"
        },
        {
            "contents": "Type",
            "trigger": "EType CManiaAppEvent.Type"
        },
        {
            "contents": "CustomEventLayer",
            "trigger": "CUILayer CManiaAppEvent.CustomEventLayer"
        },
        {
            "contents": "CustomEventType",
            "trigger": "Text CManiaAppEvent.CustomEventType"
        },
        {
            "contents": "CustomEventData",
            "trigger": "Text[] CManiaAppEvent.CustomEventData"
        },
        {
            "contents": "ExternalEventType",
            "trigger": "Text CManiaAppEvent.ExternalEventType"
        },
        {
            "contents": "ExternalEventData",
            "trigger": "Text[] CManiaAppEvent.ExternalEventData"
        },
        {
            "contents": "MenuNavAction",
            "trigger": "EMenuNavAction CManiaAppEvent.MenuNavAction"
        },
        {
            "contents": "IsActionAutoRepeat",
            "trigger": "Boolean CManiaAppEvent.IsActionAutoRepeat"
        },
        {
            "contents": "KeyCode",
            "trigger": "Integer CManiaAppEvent.KeyCode"
        },
        {
            "contents": "KeyName",
            "trigger": "Text CManiaAppEvent.KeyName"
        },
        {
            "contents": "CInputPad",
            "trigger": "CInputPad"
        },
        {
            "contents": "CInputPad::EButton::Left",
            "trigger": "CInputPad::EButton::Left"
        },
        {
            "contents": "CInputPad::EButton::Right",
            "trigger": "CInputPad::EButton::Right"
        },
        {
            "contents": "CInputPad::EButton::Up",
            "trigger": "CInputPad::EButton::Up"
        },
        {
            "contents": "CInputPad::EButton::Down",
            "trigger": "CInputPad::EButton::Down"
        },
        {
            "contents": "CInputPad::EButton::A",
            "trigger": "CInputPad::EButton::A"
        },
        {
            "contents": "CInputPad::EButton::B",
            "trigger": "CInputPad::EButton::B"
        },
        {
            "contents": "CInputPad::EButton::X",
            "trigger": "CInputPad::EButton::X"
        },
        {
            "contents": "CInputPad::EButton::Y",
            "trigger": "CInputPad::EButton::Y"
        },
        {
            "contents": "CInputPad::EButton::L1",
            "trigger": "CInputPad::EButton::L1"
        },
        {
            "contents": "CInputPad::EButton::R1",
            "trigger": "CInputPad::EButton::R1"
        },
        {
            "contents": "CInputPad::EButton::LeftStick",
            "trigger": "CInputPad::EButton::LeftStick"
        },
        {
            "contents": "CInputPad::EButton::RightStick",
            "trigger": "CInputPad::EButton::RightStick"
        },
        {
            "contents": "CInputPad::EButton::Menu",
            "trigger": "CInputPad::EButton::Menu"
        },
        {
            "contents": "CInputPad::EButton::View",
            "trigger": "CInputPad::EButton::View"
        },
        {
            "contents": "CInputPad::EButton::LeftStick_Left",
            "trigger": "CInputPad::EButton::LeftStick_Left"
        },
        {
            "contents": "CInputPad::EButton::LeftStick_Right",
            "trigger": "CInputPad::EButton::LeftStick_Right"
        },
        {
            "contents": "CInputPad::EButton::LeftStick_Up",
            "trigger": "CInputPad::EButton::LeftStick_Up"
        },
        {
            "contents": "CInputPad::EButton::LeftStick_Down",
            "trigger": "CInputPad::EButton::LeftStick_Down"
        },
        {
            "contents": "CInputPad::EButton::RightStick_Left",
            "trigger": "CInputPad::EButton::RightStick_Left"
        },
        {
            "contents": "CInputPad::EButton::RightStick_Right",
            "trigger": "CInputPad::EButton::RightStick_Right"
        },
        {
            "contents": "CInputPad::EButton::RightStick_Up",
            "trigger": "CInputPad::EButton::RightStick_Up"
        },
        {
            "contents": "CInputPad::EButton::RightStick_Down",
            "trigger": "CInputPad::EButton::RightStick_Down"
        },
        {
            "contents": "CInputPad::EButton::L2",
            "trigger": "CInputPad::EButton::L2"
        },
        {
            "contents": "CInputPad::EButton::R2",
            "trigger": "CInputPad::EButton::R2"
        },
        {
            "contents": "CInputPad::EButton::None",
            "trigger": "CInputPad::EButton::None"
        },
        {
            "contents": "CInputPad::EPadType::Keyboard",
            "trigger": "CInputPad::EPadType::Keyboard"
        },
        {
            "contents": "CInputPad::EPadType::Generic",
            "trigger": "CInputPad::EPadType::Generic"
        },
        {
            "contents": "CInputPad::EPadType::XBox",
            "trigger": "CInputPad::EPadType::XBox"
        },
        {
            "contents": "CInputPad::EPadType::PlayStation",
            "trigger": "CInputPad::EPadType::PlayStation"
        },
        {
            "contents": "CInputPad::EPadType::Vive",
            "trigger": "CInputPad::EPadType::Vive"
        },
        {
            "contents": "ControllerId",
            "trigger": "Integer CInputPad.ControllerId"
        },
        {
            "contents": "UserId",
            "trigger": "Ident CInputPad.UserId"
        },
        {
            "contents": "Type",
            "trigger": "EPadType CInputPad.Type"
        },
        {
            "contents": "ModelName",
            "trigger": "Text CInputPad.ModelName"
        },
        {
            "contents": "IdleDuration",
            "trigger": "Integer CInputPad.IdleDuration"
        },
        {
            "contents": "Left",
            "trigger": "Integer CInputPad.Left"
        },
        {
            "contents": "Right",
            "trigger": "Integer CInputPad.Right"
        },
        {
            "contents": "Up",
            "trigger": "Integer CInputPad.Up"
        },
        {
            "contents": "Down",
            "trigger": "Integer CInputPad.Down"
        },
        {
            "contents": "A",
            "trigger": "Integer CInputPad.A"
        },
        {
            "contents": "B",
            "trigger": "Integer CInputPad.B"
        },
        {
            "contents": "X",
            "trigger": "Integer CInputPad.X"
        },
        {
            "contents": "Y",
            "trigger": "Integer CInputPad.Y"
        },
        {
            "contents": "L1",
            "trigger": "Integer CInputPad.L1"
        },
        {
            "contents": "R1",
            "trigger": "Integer CInputPad.R1"
        },
        {
            "contents": "LeftStickBut",
            "trigger": "Integer CInputPad.LeftStickBut"
        },
        {
            "contents": "RightStickBut",
            "trigger": "Integer CInputPad.RightStickBut"
        },
        {
            "contents": "Menu",
            "trigger": "Integer CInputPad.Menu"
        },
        {
            "contents": "View",
            "trigger": "Integer CInputPad.View"
        },
        {
            "contents": "LeftStickX",
            "trigger": "Real CInputPad.LeftStickX"
        },
        {
            "contents": "LeftStickY",
            "trigger": "Real CInputPad.LeftStickY"
        },
        {
            "contents": "RightStickX",
            "trigger": "Real CInputPad.RightStickX"
        },
        {
            "contents": "RightStickY",
            "trigger": "Real CInputPad.RightStickY"
        },
        {
            "contents": "L2",
            "trigger": "Real CInputPad.L2"
        },
        {
            "contents": "R2",
            "trigger": "Real CInputPad.R2"
        },
        {
            "contents": "ButtonEvents",
            "trigger": "EButton[] CInputPad.ButtonEvents"
        },
        {
            "contents": "ClearRumble()",
            "trigger": "Void ClearRumble()"
        },
        {
            "contents": "AddRumble(${0:Integer Duration}, ${1:Real LargeMotor}, ${2:Real SmallMotor})",
            "trigger": "Void AddRumble(Integer Duration, Real LargeMotor, Real SmallMotor)"
        },
        {
            "contents": "SetColor(${0:Vec3 Color})",
            "trigger": "Void SetColor(Vec3 Color)"
        },
        {
            "contents": "CMlBrowser",
            "trigger": "CMlBrowser"
        },
        {
            "contents": "CMlBrowser::EBuddyAction::Add",
            "trigger": "CMlBrowser::EBuddyAction::Add"
        },
        {
            "contents": "CMlBrowser::EBuddyAction::Invite",
            "trigger": "CMlBrowser::EBuddyAction::Invite"
        },
        {
            "contents": "CMlBrowser::EBuddyAction::Remove",
            "trigger": "CMlBrowser::EBuddyAction::Remove"
        },
        {
            "contents": "CMlBrowser::EBuddyResult::Ok",
            "trigger": "CMlBrowser::EBuddyResult::Ok"
        },
        {
            "contents": "CMlBrowser::EBuddyResult::Error",
            "trigger": "CMlBrowser::EBuddyResult::Error"
        },
        {
            "contents": "CMlBrowser::EBuddyResult::NotFinished",
            "trigger": "CMlBrowser::EBuddyResult::NotFinished"
        },
        {
            "contents": "ParentApp",
            "trigger": "CManiaAppBrowser CMlBrowser.ParentApp"
        },
        {
            "contents": "CurMap",
            "trigger": "CMap CMlBrowser.CurMap"
        },
        {
            "contents": "BuddyDoResult",
            "trigger": "EBuddyResult CMlBrowser.BuddyDoResult"
        },
        {
            "contents": "BuddyDoErrorMessage",
            "trigger": "Text CMlBrowser.BuddyDoErrorMessage"
        },
        {
            "contents": "IsInBrowser",
            "trigger": "Boolean CMlBrowser.IsInBrowser"
        },
        {
            "contents": "BrowserFocusedFrameId",
            "trigger": "Text CMlBrowser.BrowserFocusedFrameId"
        },
        {
            "contents": "ShowCurMapCard()",
            "trigger": "Void ShowCurMapCard()"
        },
        {
            "contents": "BrowserBack()",
            "trigger": "Void BrowserBack()"
        },
        {
            "contents": "BrowserQuit()",
            "trigger": "Void BrowserQuit()"
        },
        {
            "contents": "BrowserHome()",
            "trigger": "Void BrowserHome()"
        },
        {
            "contents": "BrowserReload()",
            "trigger": "Void BrowserReload()"
        },
        {
            "contents": "SetLocalUserClubLink(${0:Text ClubLink})",
            "trigger": "Void SetLocalUserClubLink(Text ClubLink)"
        },
        {
            "contents": "CBlockUnit",
            "trigger": "CBlockUnit"
        },
        {
            "contents": "AbsoluteOffset",
            "trigger": "Int3 CBlockUnit.AbsoluteOffset"
        },
        {
            "contents": "BlockUnitModel",
            "trigger": "CBlockUnitModel CBlockUnit.BlockUnitModel"
        },
        {
            "contents": "Block",
            "trigger": "CBlock CBlockUnit.Block"
        },
        {
            "contents": "CTaskResult",
            "trigger": "CTaskResult"
        },
        {
            "contents": "CTaskResult::ETaskErrorType::Success",
            "trigger": "CTaskResult::ETaskErrorType::Success"
        },
        {
            "contents": "CTaskResult::ETaskErrorType::Canceled",
            "trigger": "CTaskResult::ETaskErrorType::Canceled"
        },
        {
            "contents": "CTaskResult::ETaskErrorType::Unexpected",
            "trigger": "CTaskResult::ETaskErrorType::Unexpected"
        },
        {
            "contents": "CTaskResult::ETaskErrorType::Internal",
            "trigger": "CTaskResult::ETaskErrorType::Internal"
        },
        {
            "contents": "CTaskResult::ETaskErrorType::DataManager",
            "trigger": "CTaskResult::ETaskErrorType::DataManager"
        },
        {
            "contents": "CTaskResult::ETaskErrorType::PrivilegeManager",
            "trigger": "CTaskResult::ETaskErrorType::PrivilegeManager"
        },
        {
            "contents": "CTaskResult::ETaskErrorType::MasterServer",
            "trigger": "CTaskResult::ETaskErrorType::MasterServer"
        },
        {
            "contents": "CTaskResult::ETaskErrorType::UbiServices",
            "trigger": "CTaskResult::ETaskErrorType::UbiServices"
        },
        {
            "contents": "CTaskResult::ETaskErrorType::UplayPC",
            "trigger": "CTaskResult::ETaskErrorType::UplayPC"
        },
        {
            "contents": "CTaskResult::ETaskErrorType::PS4",
            "trigger": "CTaskResult::ETaskErrorType::PS4"
        },
        {
            "contents": "CTaskResult::ETaskErrorType::XboxOne",
            "trigger": "CTaskResult::ETaskErrorType::XboxOne"
        },
        {
            "contents": "Id",
            "trigger": "Ident CTaskResult.Id"
        },
        {
            "contents": "IsProcessing",
            "trigger": "Boolean CTaskResult.IsProcessing"
        },
        {
            "contents": "HasSucceeded",
            "trigger": "Boolean CTaskResult.HasSucceeded"
        },
        {
            "contents": "HasFailed",
            "trigger": "Boolean CTaskResult.HasFailed"
        },
        {
            "contents": "IsCanceled",
            "trigger": "Boolean CTaskResult.IsCanceled"
        },
        {
            "contents": "ErrorType",
            "trigger": "ETaskErrorType CTaskResult.ErrorType"
        },
        {
            "contents": "ErrorCode",
            "trigger": "Integer CTaskResult.ErrorCode"
        },
        {
            "contents": "ErrorDescription",
            "trigger": "Text CTaskResult.ErrorDescription"
        },
        {
            "contents": "Cancel()",
            "trigger": "Void Cancel()"
        },
        {
            "contents": "CMapGroup",
            "trigger": "CMapGroup"
        },
        {
            "contents": "MapInfos",
            "trigger": "CMapInfo[] CMapGroup.MapInfos"
        },
        {
            "contents": "IsUnlocked()",
            "trigger": "Void IsUnlocked()"
        },
        {
            "contents": "CMlScriptIngame",
            "trigger": "CMlScriptIngame"
        },
        {
            "contents": "CMlScriptIngame::EUISound::Default",
            "trigger": "CMlScriptIngame::EUISound::Default"
        },
        {
            "contents": "CMlScriptIngame::EUISound::Silence",
            "trigger": "CMlScriptIngame::EUISound::Silence"
        },
        {
            "contents": "CMlScriptIngame::EUISound::StartMatch",
            "trigger": "CMlScriptIngame::EUISound::StartMatch"
        },
        {
            "contents": "CMlScriptIngame::EUISound::EndMatch",
            "trigger": "CMlScriptIngame::EUISound::EndMatch"
        },
        {
            "contents": "CMlScriptIngame::EUISound::StartRound",
            "trigger": "CMlScriptIngame::EUISound::StartRound"
        },
        {
            "contents": "CMlScriptIngame::EUISound::EndRound",
            "trigger": "CMlScriptIngame::EUISound::EndRound"
        },
        {
            "contents": "CMlScriptIngame::EUISound::PhaseChange",
            "trigger": "CMlScriptIngame::EUISound::PhaseChange"
        },
        {
            "contents": "CMlScriptIngame::EUISound::TieBreakPoint",
            "trigger": "CMlScriptIngame::EUISound::TieBreakPoint"
        },
        {
            "contents": "CMlScriptIngame::EUISound::TiePoint",
            "trigger": "CMlScriptIngame::EUISound::TiePoint"
        },
        {
            "contents": "CMlScriptIngame::EUISound::VictoryPoint",
            "trigger": "CMlScriptIngame::EUISound::VictoryPoint"
        },
        {
            "contents": "CMlScriptIngame::EUISound::Capture",
            "trigger": "CMlScriptIngame::EUISound::Capture"
        },
        {
            "contents": "CMlScriptIngame::EUISound::TimeOut",
            "trigger": "CMlScriptIngame::EUISound::TimeOut"
        },
        {
            "contents": "CMlScriptIngame::EUISound::Notice",
            "trigger": "CMlScriptIngame::EUISound::Notice"
        },
        {
            "contents": "CMlScriptIngame::EUISound::Warning",
            "trigger": "CMlScriptIngame::EUISound::Warning"
        },
        {
            "contents": "CMlScriptIngame::EUISound::PlayerEliminated",
            "trigger": "CMlScriptIngame::EUISound::PlayerEliminated"
        },
        {
            "contents": "CMlScriptIngame::EUISound::PlayerHit",
            "trigger": "CMlScriptIngame::EUISound::PlayerHit"
        },
        {
            "contents": "CMlScriptIngame::EUISound::Checkpoint",
            "trigger": "CMlScriptIngame::EUISound::Checkpoint"
        },
        {
            "contents": "CMlScriptIngame::EUISound::Finish",
            "trigger": "CMlScriptIngame::EUISound::Finish"
        },
        {
            "contents": "CMlScriptIngame::EUISound::Record",
            "trigger": "CMlScriptIngame::EUISound::Record"
        },
        {
            "contents": "CMlScriptIngame::EUISound::ScoreProgress",
            "trigger": "CMlScriptIngame::EUISound::ScoreProgress"
        },
        {
            "contents": "CMlScriptIngame::EUISound::RankChange",
            "trigger": "CMlScriptIngame::EUISound::RankChange"
        },
        {
            "contents": "CMlScriptIngame::EUISound::Bonus",
            "trigger": "CMlScriptIngame::EUISound::Bonus"
        },
        {
            "contents": "CMlScriptIngame::EUISound::FirstHit",
            "trigger": "CMlScriptIngame::EUISound::FirstHit"
        },
        {
            "contents": "CMlScriptIngame::EUISound::Combo",
            "trigger": "CMlScriptIngame::EUISound::Combo"
        },
        {
            "contents": "CMlScriptIngame::EUISound::PlayersRemaining",
            "trigger": "CMlScriptIngame::EUISound::PlayersRemaining"
        },
        {
            "contents": "CMlScriptIngame::EUISound::Custom1",
            "trigger": "CMlScriptIngame::EUISound::Custom1"
        },
        {
            "contents": "CMlScriptIngame::EUISound::Custom2",
            "trigger": "CMlScriptIngame::EUISound::Custom2"
        },
        {
            "contents": "CMlScriptIngame::EUISound::Custom3",
            "trigger": "CMlScriptIngame::EUISound::Custom3"
        },
        {
            "contents": "CMlScriptIngame::EUISound::Custom4",
            "trigger": "CMlScriptIngame::EUISound::Custom4"
        },
        {
            "contents": "CMlScriptIngame::EInGameMenuResult::Resume",
            "trigger": "CMlScriptIngame::EInGameMenuResult::Resume"
        },
        {
            "contents": "CMlScriptIngame::EInGameMenuResult::Quit",
            "trigger": "CMlScriptIngame::EInGameMenuResult::Quit"
        },
        {
            "contents": "CMlScriptIngame::EInGameMenuResult::NormalMenu",
            "trigger": "CMlScriptIngame::EInGameMenuResult::NormalMenu"
        },
        {
            "contents": "CMlScriptIngame::EInGameMenuResult::AdvancedMenu",
            "trigger": "CMlScriptIngame::EInGameMenuResult::AdvancedMenu"
        },
        {
            "contents": "CMlScriptIngame::EInGameMenuResult::ServerSettings",
            "trigger": "CMlScriptIngame::EInGameMenuResult::ServerSettings"
        },
        {
            "contents": "GameTime",
            "trigger": "Integer CMlScriptIngame.GameTime"
        },
        {
            "contents": "Playground",
            "trigger": "CPlaygroundClient CMlScriptIngame.Playground"
        },
        {
            "contents": "UI",
            "trigger": "CUIConfig CMlScriptIngame.UI"
        },
        {
            "contents": "ClientUI",
            "trigger": "CUIConfig CMlScriptIngame.ClientUI"
        },
        {
            "contents": "IsSpectator",
            "trigger": "Boolean CMlScriptIngame.IsSpectator"
        },
        {
            "contents": "IsSpectatorClient",
            "trigger": "Boolean CMlScriptIngame.IsSpectatorClient"
        },
        {
            "contents": "UseClans",
            "trigger": "Boolean CMlScriptIngame.UseClans"
        },
        {
            "contents": "UseForcedClans",
            "trigger": "Boolean CMlScriptIngame.UseForcedClans"
        },
        {
            "contents": "ParentApp",
            "trigger": "CManiaAppPlaygroundCommon CMlScriptIngame.ParentApp"
        },
        {
            "contents": "Map",
            "trigger": "CMap CMlScriptIngame.Map"
        },
        {
            "contents": "Teams",
            "trigger": "CTeam[] CMlScriptIngame.Teams"
        },
        {
            "contents": "IsInGameMenuDisplayed",
            "trigger": "Boolean CMlScriptIngame.IsInGameMenuDisplayed"
        },
        {
            "contents": "CurrentServerLogin",
            "trigger": "Text CMlScriptIngame.CurrentServerLogin"
        },
        {
            "contents": "CurrentServerName",
            "trigger": "Text CMlScriptIngame.CurrentServerName"
        },
        {
            "contents": "CurrentServerDesc",
            "trigger": "Text CMlScriptIngame.CurrentServerDesc"
        },
        {
            "contents": "CurrentServerJoinLink",
            "trigger": "Text CMlScriptIngame.CurrentServerJoinLink"
        },
        {
            "contents": "CurrentServerModeName",
            "trigger": "Text CMlScriptIngame.CurrentServerModeName"
        },
        {
            "contents": "AchievementsManager",
            "trigger": "CAchievementsManager CMlScriptIngame.AchievementsManager"
        },
        {
            "contents": "ShowCurChallengeCard()",
            "trigger": "Void ShowCurChallengeCard()"
        },
        {
            "contents": "ShowModeHelp()",
            "trigger": "Void ShowModeHelp()"
        },
        {
            "contents": "CopyServerLinkToClipBoard()",
            "trigger": "Void CopyServerLinkToClipBoard()"
        },
        {
            "contents": "JoinTeam1()",
            "trigger": "Void JoinTeam1()"
        },
        {
            "contents": "JoinTeam2()",
            "trigger": "Void JoinTeam2()"
        },
        {
            "contents": "RequestSpectatorClient(${0:Boolean Spectator})",
            "trigger": "Void RequestSpectatorClient(Boolean Spectator)"
        },
        {
            "contents": "SetSpectateTarget(${0:Text Player})",
            "trigger": "Void SetSpectateTarget(Text Player)"
        },
        {
            "contents": "ShowProfile(${0:Text Player})",
            "trigger": "Void ShowProfile(Text Player)"
        },
        {
            "contents": "ShowInGameMenu()",
            "trigger": "Void ShowInGameMenu()"
        },
        {
            "contents": "CloseInGameMenu(${0:EInGameMenuResult Result})",
            "trigger": "Void CloseInGameMenu(EInGameMenuResult Result)"
        },
        {
            "contents": "CloseScoresTable()",
            "trigger": "Void CloseScoresTable()"
        },
        {
            "contents": "PlayUiSound(${0:EUISound Sound}, ${1:Integer SoundVariant}, ${2:Real Volume})",
            "trigger": "Void PlayUiSound(EUISound Sound, Integer SoundVariant, Real Volume)"
        },
        {
            "contents": "CSmPlayer",
            "trigger": "CSmPlayer"
        },
        {
            "contents": "CSmPlayer::ESpawnStatus::NotSpawned",
            "trigger": "CSmPlayer::ESpawnStatus::NotSpawned"
        },
        {
            "contents": "CSmPlayer::ESpawnStatus::Spawning",
            "trigger": "CSmPlayer::ESpawnStatus::Spawning"
        },
        {
            "contents": "CSmPlayer::ESpawnStatus::Spawned",
            "trigger": "CSmPlayer::ESpawnStatus::Spawned"
        },
        {
            "contents": "Score",
            "trigger": "CSmScore CSmPlayer.Score"
        },
        {
            "contents": "SpawnStatus",
            "trigger": "ESpawnStatus CSmPlayer.SpawnStatus"
        },
        {
            "contents": "StartTime",
            "trigger": "Integer CSmPlayer.StartTime"
        },
        {
            "contents": "EndTime",
            "trigger": "Integer CSmPlayer.EndTime"
        },
        {
            "contents": "AmmoGain",
            "trigger": "Real CSmPlayer.AmmoGain"
        },
        {
            "contents": "AmmoPower",
            "trigger": "Real CSmPlayer.AmmoPower"
        },
        {
            "contents": "AutoSwitchWeapon",
            "trigger": "Boolean CSmPlayer.AutoSwitchWeapon"
        },
        {
            "contents": "CurWeapon",
            "trigger": "Integer CSmPlayer.CurWeapon"
        },
        {
            "contents": "CurAmmo",
            "trigger": "Integer CSmPlayer.CurAmmo"
        },
        {
            "contents": "CurAmmoMax",
            "trigger": "Integer CSmPlayer.CurAmmoMax"
        },
        {
            "contents": "CurAmmoUnit",
            "trigger": "Integer CSmPlayer.CurAmmoUnit"
        },
        {
            "contents": "Armor",
            "trigger": "Integer CSmPlayer.Armor"
        },
        {
            "contents": "ArmorMax",
            "trigger": "Integer CSmPlayer.ArmorMax"
        },
        {
            "contents": "ArmorGain",
            "trigger": "Integer CSmPlayer.ArmorGain"
        },
        {
            "contents": "ArmorReplenishGain",
            "trigger": "Integer CSmPlayer.ArmorReplenishGain"
        },
        {
            "contents": "ArmorPower",
            "trigger": "Real CSmPlayer.ArmorPower"
        },
        {
            "contents": "Stamina",
            "trigger": "Integer CSmPlayer.Stamina"
        },
        {
            "contents": "StaminaMax",
            "trigger": "Real CSmPlayer.StaminaMax"
        },
        {
            "contents": "StaminaGain",
            "trigger": "Real CSmPlayer.StaminaGain"
        },
        {
            "contents": "StaminaPower",
            "trigger": "Real CSmPlayer.StaminaPower"
        },
        {
            "contents": "SpeedPower",
            "trigger": "Real CSmPlayer.SpeedPower"
        },
        {
            "contents": "JumpPower",
            "trigger": "Real CSmPlayer.JumpPower"
        },
        {
            "contents": "AllowWallJump",
            "trigger": "Boolean CSmPlayer.AllowWallJump"
        },
        {
            "contents": "AllowProgressiveJump",
            "trigger": "Boolean CSmPlayer.AllowProgressiveJump"
        },
        {
            "contents": "UseAlternateWeaponVisual",
            "trigger": "Boolean CSmPlayer.UseAlternateWeaponVisual"
        },
        {
            "contents": "IsHighlighted",
            "trigger": "Boolean CSmPlayer.IsHighlighted"
        },
        {
            "contents": "EnergyLevel",
            "trigger": "Real CSmPlayer.EnergyLevel"
        },
        {
            "contents": "ForceColor",
            "trigger": "Vec3 CSmPlayer.ForceColor"
        },
        {
            "contents": "GetLinearHue",
            "trigger": "Real CSmPlayer.GetLinearHue"
        },
        {
            "contents": "ForceLinearHue",
            "trigger": "Real CSmPlayer.ForceLinearHue"
        },
        {
            "contents": "ForceModelId",
            "trigger": "Ident CSmPlayer.ForceModelId"
        },
        {
            "contents": "HasShield",
            "trigger": "Boolean CSmPlayer.HasShield"
        },
        {
            "contents": "ThrowSpeed",
            "trigger": "Real CSmPlayer.ThrowSpeed"
        },
        {
            "contents": "CurrentClan",
            "trigger": "Integer CSmPlayer.CurrentClan"
        },
        {
            "contents": "IdleDuration",
            "trigger": "Integer CSmPlayer.IdleDuration"
        },
        {
            "contents": "Position",
            "trigger": "Vec3 CSmPlayer.Position"
        },
        {
            "contents": "AimYaw",
            "trigger": "Real CSmPlayer.AimYaw"
        },
        {
            "contents": "AimPitch",
            "trigger": "Real CSmPlayer.AimPitch"
        },
        {
            "contents": "AimDirection",
            "trigger": "Vec3 CSmPlayer.AimDirection"
        },
        {
            "contents": "IsUnderground",
            "trigger": "Boolean CSmPlayer.IsUnderground"
        },
        {
            "contents": "IsTouchingGround",
            "trigger": "Boolean CSmPlayer.IsTouchingGround"
        },
        {
            "contents": "IsInAir",
            "trigger": "Boolean CSmPlayer.IsInAir"
        },
        {
            "contents": "IsOnTechGround",
            "trigger": "Boolean CSmPlayer.IsOnTechGround"
        },
        {
            "contents": "IsOnTechLaser",
            "trigger": "Boolean CSmPlayer.IsOnTechLaser"
        },
        {
            "contents": "IsOnTechArrow",
            "trigger": "Boolean CSmPlayer.IsOnTechArrow"
        },
        {
            "contents": "IsOnTechArmor",
            "trigger": "Boolean CSmPlayer.IsOnTechArmor"
        },
        {
            "contents": "IsOnTechSafeZone",
            "trigger": "Boolean CSmPlayer.IsOnTechSafeZone"
        },
        {
            "contents": "IsOnTech",
            "trigger": "Boolean CSmPlayer.IsOnTech"
        },
        {
            "contents": "IsOnTechNoWeapon",
            "trigger": "Boolean CSmPlayer.IsOnTechNoWeapon"
        },
        {
            "contents": "IsInWater",
            "trigger": "Boolean CSmPlayer.IsInWater"
        },
        {
            "contents": "Velocity",
            "trigger": "Vec3 CSmPlayer.Velocity"
        },
        {
            "contents": "Speed",
            "trigger": "Real CSmPlayer.Speed"
        },
        {
            "contents": "IsInOffZone",
            "trigger": "Boolean CSmPlayer.IsInOffZone"
        },
        {
            "contents": "IsCapturing",
            "trigger": "Boolean CSmPlayer.IsCapturing"
        },
        {
            "contents": "CapturedLandmark",
            "trigger": "CSmMapLandmark CSmPlayer.CapturedLandmark"
        },
        {
            "contents": "Objects",
            "trigger": "CSmObject[] CSmPlayer.Objects"
        },
        {
            "contents": "IsFakePlayer",
            "trigger": "Boolean CSmPlayer.IsFakePlayer"
        },
        {
            "contents": "IsBot",
            "trigger": "Boolean CSmPlayer.IsBot"
        },
        {
            "contents": "Driver",
            "trigger": "CSmPlayerDriver CSmPlayer.Driver"
        },
        {
            "contents": "CMapInfo",
            "trigger": "CMapInfo"
        },
        {
            "contents": "MapUid",
            "trigger": "Text CMapInfo.MapUid"
        },
        {
            "contents": "Comments",
            "trigger": "Text CMapInfo.Comments"
        },
        {
            "contents": "CopperPrice",
            "trigger": "Integer CMapInfo.CopperPrice"
        },
        {
            "contents": "CollectionName",
            "trigger": "Text CMapInfo.CollectionName"
        },
        {
            "contents": "AuthorLogin",
            "trigger": "Text CMapInfo.AuthorLogin"
        },
        {
            "contents": "AuthorNickName",
            "trigger": "Text CMapInfo.AuthorNickName"
        },
        {
            "contents": "AuthorZonePath",
            "trigger": "Text CMapInfo.AuthorZonePath"
        },
        {
            "contents": "MapType",
            "trigger": "Text CMapInfo.MapType"
        },
        {
            "contents": "MapStyle",
            "trigger": "Text CMapInfo.MapStyle"
        },
        {
            "contents": "Unlocked",
            "trigger": "Boolean CMapInfo.Unlocked"
        },
        {
            "contents": "IsPlayable",
            "trigger": "Boolean CMapInfo.IsPlayable"
        },
        {
            "contents": "CreatedWithSimpleEditor",
            "trigger": "Boolean CMapInfo.CreatedWithSimpleEditor"
        },
        {
            "contents": "TMObjective_AuthorTime",
            "trigger": "Integer CMapInfo.TMObjective_AuthorTime"
        },
        {
            "contents": "TMObjective_GoldTime",
            "trigger": "Integer CMapInfo.TMObjective_GoldTime"
        },
        {
            "contents": "TMObjective_SilverTime",
            "trigger": "Integer CMapInfo.TMObjective_SilverTime"
        },
        {
            "contents": "TMObjective_BronzeTime",
            "trigger": "Integer CMapInfo.TMObjective_BronzeTime"
        },
        {
            "contents": "TMObjective_IsLapRace",
            "trigger": "Boolean CMapInfo.TMObjective_IsLapRace"
        },
        {
            "contents": "Name",
            "trigger": "Text CMapInfo.Name"
        },
        {
            "contents": "Path",
            "trigger": "Text CMapInfo.Path"
        },
        {
            "contents": "FileName",
            "trigger": "Text CMapInfo.FileName"
        },
        {
            "contents": "CMapEditorPlugin",
            "trigger": "CMapEditorPlugin"
        },
        {
            "contents": "CMapEditorPlugin::CardinalDirections::North",
            "trigger": "CMapEditorPlugin::CardinalDirections::North"
        },
        {
            "contents": "CMapEditorPlugin::CardinalDirections::East",
            "trigger": "CMapEditorPlugin::CardinalDirections::East"
        },
        {
            "contents": "CMapEditorPlugin::CardinalDirections::South",
            "trigger": "CMapEditorPlugin::CardinalDirections::South"
        },
        {
            "contents": "CMapEditorPlugin::CardinalDirections::West",
            "trigger": "CMapEditorPlugin::CardinalDirections::West"
        },
        {
            "contents": "CMapEditorPlugin::PlaceMode::Unknown",
            "trigger": "CMapEditorPlugin::PlaceMode::Unknown"
        },
        {
            "contents": "CMapEditorPlugin::PlaceMode::Terraform",
            "trigger": "CMapEditorPlugin::PlaceMode::Terraform"
        },
        {
            "contents": "CMapEditorPlugin::PlaceMode::Block",
            "trigger": "CMapEditorPlugin::PlaceMode::Block"
        },
        {
            "contents": "CMapEditorPlugin::PlaceMode::Macroblock",
            "trigger": "CMapEditorPlugin::PlaceMode::Macroblock"
        },
        {
            "contents": "CMapEditorPlugin::PlaceMode::Skin",
            "trigger": "CMapEditorPlugin::PlaceMode::Skin"
        },
        {
            "contents": "CMapEditorPlugin::PlaceMode::CopyPaste",
            "trigger": "CMapEditorPlugin::PlaceMode::CopyPaste"
        },
        {
            "contents": "CMapEditorPlugin::PlaceMode::Test",
            "trigger": "CMapEditorPlugin::PlaceMode::Test"
        },
        {
            "contents": "CMapEditorPlugin::PlaceMode::Plugin",
            "trigger": "CMapEditorPlugin::PlaceMode::Plugin"
        },
        {
            "contents": "CMapEditorPlugin::PlaceMode::CustomSelection",
            "trigger": "CMapEditorPlugin::PlaceMode::CustomSelection"
        },
        {
            "contents": "CMapEditorPlugin::PlaceMode::OffZone",
            "trigger": "CMapEditorPlugin::PlaceMode::OffZone"
        },
        {
            "contents": "CMapEditorPlugin::PlaceMode::BlockProperty",
            "trigger": "CMapEditorPlugin::PlaceMode::BlockProperty"
        },
        {
            "contents": "CMapEditorPlugin::PlaceMode::Path",
            "trigger": "CMapEditorPlugin::PlaceMode::Path"
        },
        {
            "contents": "CMapEditorPlugin::PlaceMode::GhostBlock",
            "trigger": "CMapEditorPlugin::PlaceMode::GhostBlock"
        },
        {
            "contents": "CMapEditorPlugin::PlaceMode::Item",
            "trigger": "CMapEditorPlugin::PlaceMode::Item"
        },
        {
            "contents": "CMapEditorPlugin::PlaceMode::Light",
            "trigger": "CMapEditorPlugin::PlaceMode::Light"
        },
        {
            "contents": "CMapEditorPlugin::EditMode::Unknown",
            "trigger": "CMapEditorPlugin::EditMode::Unknown"
        },
        {
            "contents": "CMapEditorPlugin::EditMode::Place",
            "trigger": "CMapEditorPlugin::EditMode::Place"
        },
        {
            "contents": "CMapEditorPlugin::EditMode::FreeLook",
            "trigger": "CMapEditorPlugin::EditMode::FreeLook"
        },
        {
            "contents": "CMapEditorPlugin::EditMode::Erase",
            "trigger": "CMapEditorPlugin::EditMode::Erase"
        },
        {
            "contents": "CMapEditorPlugin::EditMode::Pick",
            "trigger": "CMapEditorPlugin::EditMode::Pick"
        },
        {
            "contents": "CMapEditorPlugin::EditMode::SelectionAdd",
            "trigger": "CMapEditorPlugin::EditMode::SelectionAdd"
        },
        {
            "contents": "CMapEditorPlugin::EditMode::SelectionRemove",
            "trigger": "CMapEditorPlugin::EditMode::SelectionRemove"
        },
        {
            "contents": "CMapEditorPlugin::ShadowsQuality::NotComputed",
            "trigger": "CMapEditorPlugin::ShadowsQuality::NotComputed"
        },
        {
            "contents": "CMapEditorPlugin::ShadowsQuality::VeryFast",
            "trigger": "CMapEditorPlugin::ShadowsQuality::VeryFast"
        },
        {
            "contents": "CMapEditorPlugin::ShadowsQuality::Fast",
            "trigger": "CMapEditorPlugin::ShadowsQuality::Fast"
        },
        {
            "contents": "CMapEditorPlugin::ShadowsQuality::Default",
            "trigger": "CMapEditorPlugin::ShadowsQuality::Default"
        },
        {
            "contents": "CMapEditorPlugin::ShadowsQuality::High",
            "trigger": "CMapEditorPlugin::ShadowsQuality::High"
        },
        {
            "contents": "CMapEditorPlugin::ShadowsQuality::Ultra",
            "trigger": "CMapEditorPlugin::ShadowsQuality::Ultra"
        },
        {
            "contents": "CMapEditorPlugin::ValidationStatus::NotValidable",
            "trigger": "CMapEditorPlugin::ValidationStatus::NotValidable"
        },
        {
            "contents": "CMapEditorPlugin::ValidationStatus::Validable",
            "trigger": "CMapEditorPlugin::ValidationStatus::Validable"
        },
        {
            "contents": "CMapEditorPlugin::ValidationStatus::Validated",
            "trigger": "CMapEditorPlugin::ValidationStatus::Validated"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CMapEditorPluginEvent[] CMapEditorPlugin.PendingEvents"
        },
        {
            "contents": "Map",
            "trigger": "CMap CMapEditorPlugin.Map"
        },
        {
            "contents": "MapName",
            "trigger": "Text CMapEditorPlugin.MapName"
        },
        {
            "contents": "IsEditorReadyForRequest",
            "trigger": "Boolean CMapEditorPlugin.IsEditorReadyForRequest"
        },
        {
            "contents": "HoldLoadingScreen",
            "trigger": "Boolean CMapEditorPlugin.HoldLoadingScreen"
        },
        {
            "contents": "CurrentShadowsQuality",
            "trigger": "ShadowsQuality CMapEditorPlugin.CurrentShadowsQuality"
        },
        {
            "contents": "IsUltraShadowsQualityAvailable",
            "trigger": "Boolean CMapEditorPlugin.IsUltraShadowsQualityAvailable"
        },
        {
            "contents": "PlaceMode",
            "trigger": "PlaceMode CMapEditorPlugin.PlaceMode"
        },
        {
            "contents": "EditMode",
            "trigger": "EditMode CMapEditorPlugin.EditMode"
        },
        {
            "contents": "UndergroundMode",
            "trigger": "Boolean CMapEditorPlugin.UndergroundMode"
        },
        {
            "contents": "BlockStockMode",
            "trigger": "Boolean CMapEditorPlugin.BlockStockMode"
        },
        {
            "contents": "CursorCoord",
            "trigger": "Int3 CMapEditorPlugin.CursorCoord"
        },
        {
            "contents": "CursorDir",
            "trigger": "CardinalDirections CMapEditorPlugin.CursorDir"
        },
        {
            "contents": "CursorBlockModel",
            "trigger": "CBlockModel CMapEditorPlugin.CursorBlockModel"
        },
        {
            "contents": "CursorTerrainBlockModel",
            "trigger": "CBlockModel CMapEditorPlugin.CursorTerrainBlockModel"
        },
        {
            "contents": "CursorMacroblockModel",
            "trigger": "CMacroblockModel CMapEditorPlugin.CursorMacroblockModel"
        },
        {
            "contents": "CameraVAngle",
            "trigger": "Real CMapEditorPlugin.CameraVAngle"
        },
        {
            "contents": "CameraHAngle",
            "trigger": "Real CMapEditorPlugin.CameraHAngle"
        },
        {
            "contents": "CameraToTargetDistance",
            "trigger": "Real CMapEditorPlugin.CameraToTargetDistance"
        },
        {
            "contents": "CameraTargetPosition",
            "trigger": "Vec3 CMapEditorPlugin.CameraTargetPosition"
        },
        {
            "contents": "CameraPosition",
            "trigger": "Vec3 CMapEditorPlugin.CameraPosition"
        },
        {
            "contents": "ThumbnailCameraVAngle",
            "trigger": "Real CMapEditorPlugin.ThumbnailCameraVAngle"
        },
        {
            "contents": "ThumbnailCameraHAngle",
            "trigger": "Real CMapEditorPlugin.ThumbnailCameraHAngle"
        },
        {
            "contents": "ThumbnailCameraRoll",
            "trigger": "Real CMapEditorPlugin.ThumbnailCameraRoll"
        },
        {
            "contents": "ThumbnailCameraFovY",
            "trigger": "Real CMapEditorPlugin.ThumbnailCameraFovY"
        },
        {
            "contents": "ThumbnailCameraPosition",
            "trigger": "Vec3 CMapEditorPlugin.ThumbnailCameraPosition"
        },
        {
            "contents": "EnableAirMapping",
            "trigger": "Boolean CMapEditorPlugin.EnableAirMapping"
        },
        {
            "contents": "EnableMixMapping",
            "trigger": "Boolean CMapEditorPlugin.EnableMixMapping"
        },
        {
            "contents": "Items",
            "trigger": "CItemAnchor[] CMapEditorPlugin.Items"
        },
        {
            "contents": "MediatrackIngameClips",
            "trigger": "Text[] CMapEditorPlugin.MediatrackIngameClips"
        },
        {
            "contents": "MediatrackIngameIsScriptClips",
            "trigger": "Text[] CMapEditorPlugin.MediatrackIngameIsScriptClips"
        },
        {
            "contents": "MediatrackIngameEditedClipIndex",
            "trigger": "Integer CMapEditorPlugin.MediatrackIngameEditedClipIndex"
        },
        {
            "contents": "Blocks",
            "trigger": "CBlock[] CMapEditorPlugin.Blocks"
        },
        {
            "contents": "BlockModels",
            "trigger": "CBlockModel[] CMapEditorPlugin.BlockModels"
        },
        {
            "contents": "TerrainBlockModels",
            "trigger": "CBlockModel[] CMapEditorPlugin.TerrainBlockModels"
        },
        {
            "contents": "MacroblockModels",
            "trigger": "CMacroblockModel[] CMapEditorPlugin.MacroblockModels"
        },
        {
            "contents": "AnchorData",
            "trigger": "CAnchorData[] CMapEditorPlugin.AnchorData"
        },
        {
            "contents": "CustomSelectionCoords",
            "trigger": "Int3[] CMapEditorPlugin.CustomSelectionCoords"
        },
        {
            "contents": "CustomSelectionRGB",
            "trigger": "Vec3 CMapEditorPlugin.CustomSelectionRGB"
        },
        {
            "contents": "EnableEditorInputsCustomProcessing",
            "trigger": "Boolean CMapEditorPlugin.EnableEditorInputsCustomProcessing"
        },
        {
            "contents": "EnableCursorShowingWhenInterfaceIsFocused",
            "trigger": "Boolean CMapEditorPlugin.EnableCursorShowingWhenInterfaceIsFocused"
        },
        {
            "contents": "HideEditorInterface",
            "trigger": "Boolean CMapEditorPlugin.HideEditorInterface"
        },
        {
            "contents": "HideBlockHelpers",
            "trigger": "Boolean CMapEditorPlugin.HideBlockHelpers"
        },
        {
            "contents": "ShowPlacementGrid",
            "trigger": "Boolean CMapEditorPlugin.ShowPlacementGrid"
        },
        {
            "contents": "EditorInputIsDown_Menu",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Menu"
        },
        {
            "contents": "EditorInputIsDown_SwitchToRace",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_SwitchToRace"
        },
        {
            "contents": "EditorInputIsDown_Undo",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Undo"
        },
        {
            "contents": "EditorInputIsDown_Redo",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Redo"
        },
        {
            "contents": "EditorInputIsDown_CursorUp",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorUp"
        },
        {
            "contents": "EditorInputIsDown_CursorRight",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorRight"
        },
        {
            "contents": "EditorInputIsDown_CursorDown",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorDown"
        },
        {
            "contents": "EditorInputIsDown_CursorLeft",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorLeft"
        },
        {
            "contents": "EditorInputIsDown_CursorRaise",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorRaise"
        },
        {
            "contents": "EditorInputIsDown_CursorLower",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorLower"
        },
        {
            "contents": "EditorInputIsDown_CursorTurn",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorTurn"
        },
        {
            "contents": "EditorInputIsDown_CursorPick",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorPick"
        },
        {
            "contents": "EditorInputIsDown_CursorPlace",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorPlace"
        },
        {
            "contents": "EditorInputIsDown_CursorDelete",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorDelete"
        },
        {
            "contents": "EditorInputIsDown_CameraUp",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CameraUp"
        },
        {
            "contents": "EditorInputIsDown_CameraRight",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CameraRight"
        },
        {
            "contents": "EditorInputIsDown_CameraDown",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CameraDown"
        },
        {
            "contents": "EditorInputIsDown_CameraLeft",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CameraLeft"
        },
        {
            "contents": "EditorInputIsDown_CameraZoomNext",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CameraZoomNext"
        },
        {
            "contents": "EditorInputIsDown_Camera0",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Camera0"
        },
        {
            "contents": "EditorInputIsDown_Camera1",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Camera1"
        },
        {
            "contents": "EditorInputIsDown_Camera3",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Camera3"
        },
        {
            "contents": "EditorInputIsDown_Camera7",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Camera7"
        },
        {
            "contents": "EditorInputIsDown_Camera9",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Camera9"
        },
        {
            "contents": "EditorInputIsDown_PivotChange",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_PivotChange"
        },
        {
            "contents": "EditorInputIsDown_CursorTurnSlightly",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorTurnSlightly"
        },
        {
            "contents": "EditorInputIsDown_CursorTurnSlightlyAntiClockwise",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorTurnSlightlyAntiClockwise"
        },
        {
            "contents": "EditorInputIsDown_IconUp",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_IconUp"
        },
        {
            "contents": "EditorInputIsDown_IconRight",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_IconRight"
        },
        {
            "contents": "EditorInputIsDown_IconDown",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_IconDown"
        },
        {
            "contents": "EditorInputIsDown_IconLeft",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_IconLeft"
        },
        {
            "contents": "EditorInputIsDown_RemoveAll",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_RemoveAll"
        },
        {
            "contents": "EditorInputIsDown_Save",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Save"
        },
        {
            "contents": "EditorInputIsDown_SaveAs",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_SaveAs"
        },
        {
            "contents": "EditorInputIsDown_MapStyle",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_MapStyle"
        },
        {
            "contents": "EditorInputIsDown_ClassicMapEditor",
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_ClassicMapEditor"
        },
        {
            "contents": "CollectionSquareSize",
            "trigger": "Real CMapEditorPlugin.CollectionSquareSize"
        },
        {
            "contents": "CollectionSquareHeight",
            "trigger": "Real CMapEditorPlugin.CollectionSquareHeight"
        },
        {
            "contents": "CollectionGroundY",
            "trigger": "Integer CMapEditorPlugin.CollectionGroundY"
        },
        {
            "contents": "ValidationStatus",
            "trigger": "ValidationStatus CMapEditorPlugin.ValidationStatus"
        },
        {
            "contents": "ManialinkText",
            "trigger": "Text CMapEditorPlugin.ManialinkText"
        },
        {
            "contents": "ManialinkPage",
            "trigger": "CMlPage CMapEditorPlugin.ManialinkPage"
        },
        {
            "contents": "ComputeShadows()",
            "trigger": "Void ComputeShadows()"
        },
        {
            "contents": "ComputeShadows(${0:ShadowsQuality ShadowsQuality})",
            "trigger": "Void ComputeShadows(ShadowsQuality ShadowsQuality)"
        },
        {
            "contents": "Undo()",
            "trigger": "Void Undo()"
        },
        {
            "contents": "Redo()",
            "trigger": "Void Redo()"
        },
        {
            "contents": "Help()",
            "trigger": "Void Help()"
        },
        {
            "contents": "Validate()",
            "trigger": "Void Validate()"
        },
        {
            "contents": "AutoSave()",
            "trigger": "Void AutoSave()"
        },
        {
            "contents": "Quit()",
            "trigger": "Void Quit()"
        },
        {
            "contents": "QuickQuit()",
            "trigger": "Void QuickQuit()"
        },
        {
            "contents": "QuitAndSetResult(${0:Text Type}, ${1:Text[] Data})",
            "trigger": "Void QuitAndSetResult(Text Type, Text[] Data)"
        },
        {
            "contents": "QuickQuitAndSetResult(${0:Text Type}, ${1:Text[] Data})",
            "trigger": "Void QuickQuitAndSetResult(Text Type, Text[] Data)"
        },
        {
            "contents": "TestMapFromStart()",
            "trigger": "Void TestMapFromStart()"
        },
        {
            "contents": "TestMapFromCoord(${0:Int3 Coord}, ${1:CardinalDirections Dir})",
            "trigger": "Void TestMapFromCoord(Int3 Coord, CardinalDirections Dir)"
        },
        {
            "contents": "TestMapWithMode(${0:Text RulesModeName})",
            "trigger": "Void TestMapWithMode(Text RulesModeName)"
        },
        {
            "contents": "SaveMap(${0:Text FileName})",
            "trigger": "Void SaveMap(Text FileName)"
        },
        {
            "contents": "SaveMap(${0:Text FileName}, ${1:Text Path})",
            "trigger": "Void SaveMap(Text FileName, Text Path)"
        },
        {
            "contents": "GetRaceCamera(${0:Vec3 Position}, ${1:Real Yaw}, ${2:Real Pitch}, ${3:Real Roll}, ${4:Real FovY})",
            "trigger": "Boolean GetRaceCamera(Vec3 Position, Real Yaw, Real Pitch, Real Roll, Real FovY)"
        },
        {
            "contents": "RemoveAllBlocks()",
            "trigger": "Void RemoveAllBlocks()"
        },
        {
            "contents": "RemoveAllTerrain()",
            "trigger": "Void RemoveAllTerrain()"
        },
        {
            "contents": "RemoveAllOffZone()",
            "trigger": "Void RemoveAllOffZone()"
        },
        {
            "contents": "RemoveAllObjects()",
            "trigger": "Void RemoveAllObjects()"
        },
        {
            "contents": "RemoveAll()",
            "trigger": "Void RemoveAll()"
        },
        {
            "contents": "RemoveAllBlocksAndTerrain()",
            "trigger": "Void RemoveAllBlocksAndTerrain()"
        },
        {
            "contents": "ShowCustomSelection()",
            "trigger": "Void ShowCustomSelection()"
        },
        {
            "contents": "HideCustomSelection()",
            "trigger": "Void HideCustomSelection()"
        },
        {
            "contents": "CopyPaste_Copy()",
            "trigger": "Void CopyPaste_Copy()"
        },
        {
            "contents": "CopyPaste_Cut()",
            "trigger": "Void CopyPaste_Cut()"
        },
        {
            "contents": "CopyPaste_Remove()",
            "trigger": "Void CopyPaste_Remove()"
        },
        {
            "contents": "CopyPaste_SelectAll()",
            "trigger": "Void CopyPaste_SelectAll()"
        },
        {
            "contents": "CopyPaste_ResetSelection()",
            "trigger": "Void CopyPaste_ResetSelection()"
        },
        {
            "contents": "OpenToolsMenu()",
            "trigger": "Void OpenToolsMenu()"
        },
        {
            "contents": "EditMediatrackIngame()",
            "trigger": "Void EditMediatrackIngame()"
        },
        {
            "contents": "PreloadAllBlocks()",
            "trigger": "Void PreloadAllBlocks()"
        },
        {
            "contents": "PreloadAllItems()",
            "trigger": "Void PreloadAllItems()"
        },
        {
            "contents": "CanPlaceBlock(${0:CBlockModel BlockModel}, ${1:Int3 Coord}, ${2:CardinalDirections Dir}, ${3:Boolean OnGround}, ${4:Integer VariantIndex})",
            "trigger": "Boolean CanPlaceBlock(CBlockModel BlockModel, Int3 Coord, CardinalDirections Dir, Boolean OnGround, Integer VariantIndex)"
        },
        {
            "contents": "PlaceBlock(${0:CBlockModel BlockModel}, ${1:Int3 Coord}, ${2:CardinalDirections Dir})",
            "trigger": "Boolean PlaceBlock(CBlockModel BlockModel, Int3 Coord, CardinalDirections Dir)"
        },
        {
            "contents": "CanPlaceBlock_NoDestruction(${0:CBlockModel BlockModel}, ${1:Int3 Coord}, ${2:CardinalDirections Dir}, ${3:Boolean OnGround}, ${4:Integer VariantIndex})",
            "trigger": "Boolean CanPlaceBlock_NoDestruction(CBlockModel BlockModel, Int3 Coord, CardinalDirections Dir, Boolean OnGround, Integer VariantIndex)"
        },
        {
            "contents": "PlaceBlock_NoDestruction(${0:CBlockModel BlockModel}, ${1:Int3 Coord}, ${2:CardinalDirections Dir})",
            "trigger": "Boolean PlaceBlock_NoDestruction(CBlockModel BlockModel, Int3 Coord, CardinalDirections Dir)"
        },
        {
            "contents": "CanPlaceRoadBlocks(${0:CBlockModel BlockModel}, ${1:Int3 StartCoord}, ${2:Int3 EndCoord})",
            "trigger": "Boolean CanPlaceRoadBlocks(CBlockModel BlockModel, Int3 StartCoord, Int3 EndCoord)"
        },
        {
            "contents": "PlaceRoadBlocks(${0:CBlockModel BlockModel}, ${1:Int3 StartCoord}, ${2:Int3 EndCoord})",
            "trigger": "Boolean PlaceRoadBlocks(CBlockModel BlockModel, Int3 StartCoord, Int3 EndCoord)"
        },
        {
            "contents": "CanPlaceTerrainBlocks(${0:CBlockModel BlockModel}, ${1:Int3 StartCoord}, ${2:Int3 EndCoord})",
            "trigger": "Boolean CanPlaceTerrainBlocks(CBlockModel BlockModel, Int3 StartCoord, Int3 EndCoord)"
        },
        {
            "contents": "PlaceTerrainBlocks(${0:CBlockModel BlockModel}, ${1:Int3 StartCoord}, ${2:Int3 EndCoord})",
            "trigger": "Boolean PlaceTerrainBlocks(CBlockModel BlockModel, Int3 StartCoord, Int3 EndCoord)"
        },
        {
            "contents": "PlaceTerrainBlocks_NoDestruction(${0:CBlockModel BlockModel}, ${1:Int3 StartCoord}, ${2:Int3 EndCoord})",
            "trigger": "Boolean PlaceTerrainBlocks_NoDestruction(CBlockModel BlockModel, Int3 StartCoord, Int3 EndCoord)"
        },
        {
            "contents": "CanPlaceMacroblock(${0:CMacroblockModel MacroblockModel}, ${1:Int3 Coord}, ${2:CardinalDirections Dir})",
            "trigger": "Boolean CanPlaceMacroblock(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)"
        },
        {
            "contents": "PlaceMacroblock(${0:CMacroblockModel MacroblockModel}, ${1:Int3 Coord}, ${2:CardinalDirections Dir})",
            "trigger": "Boolean PlaceMacroblock(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)"
        },
        {
            "contents": "CanPlaceMacroblock_NoDestruction(${0:CMacroblockModel MacroblockModel}, ${1:Int3 Coord}, ${2:CardinalDirections Dir})",
            "trigger": "Boolean CanPlaceMacroblock_NoDestruction(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)"
        },
        {
            "contents": "PlaceMacroblock_NoDestruction(${0:CMacroblockModel MacroblockModel}, ${1:Int3 Coord}, ${2:CardinalDirections Dir})",
            "trigger": "Boolean PlaceMacroblock_NoDestruction(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)"
        },
        {
            "contents": "CanPlaceMacroblock_NoTerrain(${0:CMacroblockModel MacroblockModel}, ${1:Int3 Coord}, ${2:CardinalDirections Dir})",
            "trigger": "Boolean CanPlaceMacroblock_NoTerrain(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)"
        },
        {
            "contents": "PlaceMacroblock_NoTerrain(${0:CMacroblockModel MacroblockModel}, ${1:Int3 Coord}, ${2:CardinalDirections Dir})",
            "trigger": "Boolean PlaceMacroblock_NoTerrain(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)"
        },
        {
            "contents": "RemoveMacroblock(${0:CMacroblockModel MacroblockModel}, ${1:Int3 Coord}, ${2:CardinalDirections Dir})",
            "trigger": "Boolean RemoveMacroblock(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)"
        },
        {
            "contents": "RemoveMacroblock_NoTerrain(${0:CMacroblockModel MacroblockModel}, ${1:Int3 Coord}, ${2:CardinalDirections Dir})",
            "trigger": "Boolean RemoveMacroblock_NoTerrain(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)"
        },
        {
            "contents": "GetBlock(${0:Int3 Coord})",
            "trigger": "CBlock GetBlock(Int3 Coord)"
        },
        {
            "contents": "IsBlockModelSkinnable(${0:CBlockModel BlockModel})",
            "trigger": "Boolean IsBlockModelSkinnable(CBlockModel BlockModel)"
        },
        {
            "contents": "GetNbBlockModelSkins(${0:CBlockModel BlockModel})",
            "trigger": "Integer GetNbBlockModelSkins(CBlockModel BlockModel)"
        },
        {
            "contents": "GetBlockModelSkin(${0:CBlockModel BlockModel}, ${1:Integer SkinIndex})",
            "trigger": "Text GetBlockModelSkin(CBlockModel BlockModel, Integer SkinIndex)"
        },
        {
            "contents": "GetSkinDisplayName(${0:Text SkinFileName})",
            "trigger": "Text GetSkinDisplayName(Text SkinFileName)"
        },
        {
            "contents": "GetBlockSkin(${0:CBlock Block})",
            "trigger": "Text GetBlockSkin(CBlock Block)"
        },
        {
            "contents": "SetBlockSkin(${0:CBlock Block}, ${1:Text SkinFileName})",
            "trigger": "Void SetBlockSkin(CBlock Block, Text SkinFileName)"
        },
        {
            "contents": "OpenBlockSkinDialog(${0:CBlock Block})",
            "trigger": "Boolean OpenBlockSkinDialog(CBlock Block)"
        },
        {
            "contents": "RemoveBlock(${0:Int3 Coord})",
            "trigger": "Boolean RemoveBlock(Int3 Coord)"
        },
        {
            "contents": "RemoveTerrainBlocks(${0:Int3 StartCoord}, ${1:Int3 EndCoord})",
            "trigger": "Boolean RemoveTerrainBlocks(Int3 StartCoord, Int3 EndCoord)"
        },
        {
            "contents": "GetBlockGroundHeight(${0:CBlockModel BlockModel}, ${1:Integer CoordX}, ${2:Integer CoordZ}, ${3:CardinalDirections Dir})",
            "trigger": "Integer GetBlockGroundHeight(CBlockModel BlockModel, Integer CoordX, Integer CoordZ, CardinalDirections Dir)"
        },
        {
            "contents": "GetGroundHeight(${0:Integer CoordX}, ${1:Integer CoordZ})",
            "trigger": "Integer GetGroundHeight(Integer CoordX, Integer CoordZ)"
        },
        {
            "contents": "GetMouseCoordOnGround()",
            "trigger": "Int3 GetMouseCoordOnGround()"
        },
        {
            "contents": "GetMouseCoordAtHeight(${0:Integer CoordY})",
            "trigger": "Int3 GetMouseCoordAtHeight(Integer CoordY)"
        },
        {
            "contents": "GetStartLineBlock()",
            "trigger": "CBlock GetStartLineBlock()"
        },
        {
            "contents": "RemoveItem(${0:CAnchorData Item})",
            "trigger": "Boolean RemoveItem(CAnchorData Item)"
        },
        {
            "contents": "CopyPaste_AddOrSubSelection(${0:Int3 StartCoord}, ${1:Int3 EndCoord})",
            "trigger": "Void CopyPaste_AddOrSubSelection(Int3 StartCoord, Int3 EndCoord)"
        },
        {
            "contents": "CopyPaste_Symmetrize()",
            "trigger": "Boolean CopyPaste_Symmetrize()"
        },
        {
            "contents": "SaveMacroblock(${0:CMacroblockModel MacroblockModel})",
            "trigger": "Void SaveMacroblock(CMacroblockModel MacroblockModel)"
        },
        {
            "contents": "GetMacroblockModelFromFilePath(${0:Text MacroblockModelFilePath})",
            "trigger": "CMacroblockModel GetMacroblockModelFromFilePath(Text MacroblockModelFilePath)"
        },
        {
            "contents": "GetTerrainBlockModelFromName(${0:Text TerrainBlockModelName})",
            "trigger": "CBlockModel GetTerrainBlockModelFromName(Text TerrainBlockModelName)"
        },
        {
            "contents": "GetBlockModelFromName(${0:Text BlockModelName})",
            "trigger": "CBlockModel GetBlockModelFromName(Text BlockModelName)"
        },
        {
            "contents": "GetMapStyle()",
            "trigger": "Text GetMapStyle()"
        },
        {
            "contents": "SetMapStyle(${0:Text MapStyle})",
            "trigger": "Void SetMapStyle(Text MapStyle)"
        },
        {
            "contents": "CSmMapGate",
            "trigger": "CSmMapGate"
        },
        {
            "contents": "Clan",
            "trigger": "Integer CSmMapGate.Clan"
        },
        {
            "contents": "Automatic",
            "trigger": "Boolean CSmMapGate.Automatic"
        },
        {
            "contents": "ManualClosed",
            "trigger": "Boolean CSmMapGate.ManualClosed"
        },
        {
            "contents": "AutoClosed",
            "trigger": "Boolean CSmMapGate.AutoClosed"
        },
        {
            "contents": "AutoIsActive",
            "trigger": "Boolean CSmMapGate.AutoIsActive"
        },
        {
            "contents": "AutoCloseDelay",
            "trigger": "Integer CSmMapGate.AutoCloseDelay"
        },
        {
            "contents": "AutoOpenSpeed",
            "trigger": "Integer CSmMapGate.AutoOpenSpeed"
        },
        {
            "contents": "CMlControl",
            "trigger": "CMlControl"
        },
        {
            "contents": "CMlControl::AlignHorizontal::Left",
            "trigger": "CMlControl::AlignHorizontal::Left"
        },
        {
            "contents": "CMlControl::AlignHorizontal::HCenter",
            "trigger": "CMlControl::AlignHorizontal::HCenter"
        },
        {
            "contents": "CMlControl::AlignHorizontal::Right",
            "trigger": "CMlControl::AlignHorizontal::Right"
        },
        {
            "contents": "CMlControl::AlignHorizontal::None",
            "trigger": "CMlControl::AlignHorizontal::None"
        },
        {
            "contents": "CMlControl::AlignVertical::Top",
            "trigger": "CMlControl::AlignVertical::Top"
        },
        {
            "contents": "CMlControl::AlignVertical::VCenter",
            "trigger": "CMlControl::AlignVertical::VCenter"
        },
        {
            "contents": "CMlControl::AlignVertical::Bottom",
            "trigger": "CMlControl::AlignVertical::Bottom"
        },
        {
            "contents": "CMlControl::AlignVertical::None",
            "trigger": "CMlControl::AlignVertical::None"
        },
        {
            "contents": "CMlControl::AlignVertical::VCenter2",
            "trigger": "CMlControl::AlignVertical::VCenter2"
        },
        {
            "contents": "Parent",
            "trigger": "CMlFrame CMlControl.Parent"
        },
        {
            "contents": "ControlId",
            "trigger": "Text CMlControl.ControlId"
        },
        {
            "contents": "ControlClasses",
            "trigger": "Text[] CMlControl.ControlClasses"
        },
        {
            "contents": "Size",
            "trigger": "Vec2 CMlControl.Size"
        },
        {
            "contents": "HorizontalAlign",
            "trigger": "AlignHorizontal CMlControl.HorizontalAlign"
        },
        {
            "contents": "VerticalAlign",
            "trigger": "AlignVertical CMlControl.VerticalAlign"
        },
        {
            "contents": "Visible",
            "trigger": "Boolean CMlControl.Visible"
        },
        {
            "contents": "RelativePosition_V3",
            "trigger": "Vec2 CMlControl.RelativePosition_V3"
        },
        {
            "contents": "ZIndex",
            "trigger": "Real CMlControl.ZIndex"
        },
        {
            "contents": "RelativeScale",
            "trigger": "Real CMlControl.RelativeScale"
        },
        {
            "contents": "RelativeRotation",
            "trigger": "Real CMlControl.RelativeRotation"
        },
        {
            "contents": "AbsolutePosition_V3",
            "trigger": "Vec2 CMlControl.AbsolutePosition_V3"
        },
        {
            "contents": "AbsoluteScale",
            "trigger": "Real CMlControl.AbsoluteScale"
        },
        {
            "contents": "AbsoluteRotation",
            "trigger": "Real CMlControl.AbsoluteRotation"
        },
        {
            "contents": "IsFocused",
            "trigger": "Boolean CMlControl.IsFocused"
        },
        {
            "contents": "HasClass(${0:Text Class})",
            "trigger": "Boolean HasClass(Text Class)"
        },
        {
            "contents": "DataAttributeExists(${0:Text DataName})",
            "trigger": "Boolean DataAttributeExists(Text DataName)"
        },
        {
            "contents": "DataAttributeGet(${0:Text DataName})",
            "trigger": "Text DataAttributeGet(Text DataName)"
        },
        {
            "contents": "DataAttributeSet(${0:Text DataName}, ${1:Text DataValue})",
            "trigger": "Void DataAttributeSet(Text DataName, Text DataValue)"
        },
        {
            "contents": "Show()",
            "trigger": "Void Show()"
        },
        {
            "contents": "Hide()",
            "trigger": "Void Hide()"
        },
        {
            "contents": "Unload()",
            "trigger": "Void Unload()"
        },
        {
            "contents": "Focus()",
            "trigger": "Void Focus()"
        },
        {
            "contents": "CPlayer",
            "trigger": "CPlayer"
        },
        {
            "contents": "User",
            "trigger": "CUser CPlayer.User"
        },
        {
            "contents": "RequestedClan",
            "trigger": "Integer CPlayer.RequestedClan"
        },
        {
            "contents": "RequestsSpectate",
            "trigger": "Boolean CPlayer.RequestsSpectate"
        },
        {
            "contents": "CTaskResult_FileList",
            "trigger": "CTaskResult_FileList"
        },
        {
            "contents": "ParentPath",
            "trigger": "Text CTaskResult_FileList.ParentPath"
        },
        {
            "contents": "Path",
            "trigger": "Text CTaskResult_FileList.Path"
        },
        {
            "contents": "Files",
            "trigger": "Text[] CTaskResult_FileList.Files"
        },
        {
            "contents": "SubFolders",
            "trigger": "Text[] CTaskResult_FileList.SubFolders"
        },
        {
            "contents": "CEditorPlugin",
            "trigger": "CEditorPlugin"
        },
        {
            "contents": "CEditorPlugin::EInteractionStatus::Active",
            "trigger": "CEditorPlugin::EInteractionStatus::Active"
        },
        {
            "contents": "CEditorPlugin::EInteractionStatus::Closed",
            "trigger": "CEditorPlugin::EInteractionStatus::Closed"
        },
        {
            "contents": "CEditorPlugin::EInteractionStatus::Aborted",
            "trigger": "CEditorPlugin::EInteractionStatus::Aborted"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CManiaAppEvent[] CEditorPlugin.PendingEvents"
        },
        {
            "contents": "ModuleEditor",
            "trigger": "CEditorModule CEditorPlugin.ModuleEditor"
        },
        {
            "contents": "MeshEditor",
            "trigger": "CEditorMesh CEditorPlugin.MeshEditor"
        },
        {
            "contents": "EditorEditor",
            "trigger": "CEditorEditor CEditorPlugin.EditorEditor"
        },
        {
            "contents": "InteractionStatus",
            "trigger": "EInteractionStatus CEditorPlugin.InteractionStatus"
        },
        {
            "contents": "CManiaAppPlaygroundCommon",
            "trigger": "CManiaAppPlaygroundCommon"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CManiaAppPlaygroundEvent[] CManiaAppPlaygroundCommon.PendingEvents"
        },
        {
            "contents": "Playground",
            "trigger": "CPlaygroundClient CManiaAppPlaygroundCommon.Playground"
        },
        {
            "contents": "Map",
            "trigger": "CMap CManiaAppPlaygroundCommon.Map"
        },
        {
            "contents": "UI",
            "trigger": "CUIConfig CManiaAppPlaygroundCommon.UI"
        },
        {
            "contents": "ClientUI",
            "trigger": "CUIConfig CManiaAppPlaygroundCommon.ClientUI"
        },
        {
            "contents": "CXmlRpc",
            "trigger": "CXmlRpc"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CXmlRpcEvent[] CXmlRpc.PendingEvents"
        },
        {
            "contents": "SendCallback(${0:Text Param1}, ${1:Text Param2})",
            "trigger": "Void SendCallback(Text Param1, Text Param2)"
        },
        {
            "contents": "SendCallbackArray(${0:Text Type}, ${1:Text[] Data})",
            "trigger": "Void SendCallbackArray(Text Type, Text[] Data)"
        },
        {
            "contents": "SendCallback_BeginRound()",
            "trigger": "Void SendCallback_BeginRound()"
        },
        {
            "contents": "SendCallback_EndRound()",
            "trigger": "Void SendCallback_EndRound()"
        },
        {
            "contents": "CPackCreatorRecipient",
            "trigger": "CPackCreatorRecipient"
        },
        {
            "contents": "Login",
            "trigger": "Text CPackCreatorRecipient.Login"
        },
        {
            "contents": "GetCost",
            "trigger": "Integer CPackCreatorRecipient.GetCost"
        },
        {
            "contents": "UseCost",
            "trigger": "Integer CPackCreatorRecipient.UseCost"
        },
        {
            "contents": "CBlockModelVariantAir",
            "trigger": "CBlockModelVariantAir"
        },
        {
            "contents": "CUserV2Profile",
            "trigger": "CUserV2Profile"
        },
        {
            "contents": "SkinName",
            "trigger": "Text CUserV2Profile.SkinName"
        },
        {
            "contents": "PrimaryColor",
            "trigger": "Vec3 CUserV2Profile.PrimaryColor"
        },
        {
            "contents": "CCollector",
            "trigger": "CCollector"
        },
        {
            "contents": "CCollector::EProdState::Aborted",
            "trigger": "CCollector::EProdState::Aborted"
        },
        {
            "contents": "CCollector::EProdState::GameBox",
            "trigger": "CCollector::EProdState::GameBox"
        },
        {
            "contents": "CCollector::EProdState::DevBuild",
            "trigger": "CCollector::EProdState::DevBuild"
        },
        {
            "contents": "CCollector::EProdState::Release",
            "trigger": "CCollector::EProdState::Release"
        },
        {
            "contents": "Name",
            "trigger": "Text CCollector.Name"
        },
        {
            "contents": "PageName",
            "trigger": "Text CCollector.PageName"
        },
        {
            "contents": "InterfaceNumber",
            "trigger": "Integer CCollector.InterfaceNumber"
        },
        {
            "contents": "Icon",
            "trigger": "CImage CCollector.Icon"
        },
        {
            "contents": "CReplayInfo",
            "trigger": "CReplayInfo"
        },
        {
            "contents": "MapUid",
            "trigger": "Text CReplayInfo.MapUid"
        },
        {
            "contents": "Name",
            "trigger": "Text CReplayInfo.Name"
        },
        {
            "contents": "Path",
            "trigger": "Text CReplayInfo.Path"
        },
        {
            "contents": "FileName",
            "trigger": "Text CReplayInfo.FileName"
        },
        {
            "contents": "CMode",
            "trigger": "CMode"
        },
        {
            "contents": "CMode::EMedal::None",
            "trigger": "CMode::EMedal::None"
        },
        {
            "contents": "CMode::EMedal::Finished",
            "trigger": "CMode::EMedal::Finished"
        },
        {
            "contents": "CMode::EMedal::Bronze",
            "trigger": "CMode::EMedal::Bronze"
        },
        {
            "contents": "CMode::EMedal::Silver",
            "trigger": "CMode::EMedal::Silver"
        },
        {
            "contents": "CMode::EMedal::Gold",
            "trigger": "CMode::EMedal::Gold"
        },
        {
            "contents": "CMode::EMedal::Author",
            "trigger": "CMode::EMedal::Author"
        },
        {
            "contents": "CMode::ESystemPlatform::None",
            "trigger": "CMode::ESystemPlatform::None"
        },
        {
            "contents": "CMode::ESystemPlatform::Steam",
            "trigger": "CMode::ESystemPlatform::Steam"
        },
        {
            "contents": "CMode::ESystemPlatform::UPlay",
            "trigger": "CMode::ESystemPlatform::UPlay"
        },
        {
            "contents": "CMode::ESystemPlatform::PS4",
            "trigger": "CMode::ESystemPlatform::PS4"
        },
        {
            "contents": "CMode::ESystemPlatform::XBoxOne",
            "trigger": "CMode::ESystemPlatform::XBoxOne"
        },
        {
            "contents": "CMode::ESystemSkuIdentifier::Unknown",
            "trigger": "CMode::ESystemSkuIdentifier::Unknown"
        },
        {
            "contents": "CMode::ESystemSkuIdentifier::EU",
            "trigger": "CMode::ESystemSkuIdentifier::EU"
        },
        {
            "contents": "CMode::ESystemSkuIdentifier::US",
            "trigger": "CMode::ESystemSkuIdentifier::US"
        },
        {
            "contents": "CMode::ESystemSkuIdentifier::JP",
            "trigger": "CMode::ESystemSkuIdentifier::JP"
        },
        {
            "contents": "ModeStatusMessage",
            "trigger": "Text CMode.ModeStatusMessage"
        },
        {
            "contents": "LoadedTitle",
            "trigger": "CTitle CMode.LoadedTitle"
        },
        {
            "contents": "ServerLogin",
            "trigger": "Text CMode.ServerLogin"
        },
        {
            "contents": "ServerName",
            "trigger": "Text CMode.ServerName"
        },
        {
            "contents": "ServerModeName",
            "trigger": "Text CMode.ServerModeName"
        },
        {
            "contents": "MapName",
            "trigger": "Text CMode.MapName"
        },
        {
            "contents": "Map",
            "trigger": "CMap CMode.Map"
        },
        {
            "contents": "MapPlayerModelName",
            "trigger": "Text CMode.MapPlayerModelName"
        },
        {
            "contents": "Users",
            "trigger": "CUser[] CMode.Users"
        },
        {
            "contents": "Teams",
            "trigger": "CTeam[] CMode.Teams"
        },
        {
            "contents": "NeutralEmblemUrl",
            "trigger": "Text CMode.NeutralEmblemUrl"
        },
        {
            "contents": "ForcedClubLinkUrl1",
            "trigger": "Text CMode.ForcedClubLinkUrl1"
        },
        {
            "contents": "ForcedClubLinkUrl2",
            "trigger": "Text CMode.ForcedClubLinkUrl2"
        },
        {
            "contents": "ClientManiaAppUrl",
            "trigger": "Text CMode.ClientManiaAppUrl"
        },
        {
            "contents": "Now",
            "trigger": "Integer CMode.Now"
        },
        {
            "contents": "Period",
            "trigger": "Integer CMode.Period"
        },
        {
            "contents": "MatchEndRequested",
            "trigger": "Boolean CMode.MatchEndRequested"
        },
        {
            "contents": "ServerShutdownRequested",
            "trigger": "Boolean CMode.ServerShutdownRequested"
        },
        {
            "contents": "MapLoaded",
            "trigger": "Boolean CMode.MapLoaded"
        },
        {
            "contents": "MapList",
            "trigger": "CMapInfo[] CMode.MapList"
        },
        {
            "contents": "NextMapIndex",
            "trigger": "Integer CMode.NextMapIndex"
        },
        {
            "contents": "UIManager",
            "trigger": "CUIConfigMgr CMode.UIManager"
        },
        {
            "contents": "Hud",
            "trigger": "CModulePlaygroundHud CMode.Hud"
        },
        {
            "contents": "Ladder_RequestInProgress",
            "trigger": "Boolean CMode.Ladder_RequestInProgress"
        },
        {
            "contents": "Solo_NewRecordSequenceInProgress",
            "trigger": "Boolean CMode.Solo_NewRecordSequenceInProgress"
        },
        {
            "contents": "XmlRpc",
            "trigger": "CXmlRpc CMode.XmlRpc"
        },
        {
            "contents": "Xml",
            "trigger": "CXmlManager CMode.Xml"
        },
        {
            "contents": "Http",
            "trigger": "CHttpManager CMode.Http"
        },
        {
            "contents": "Input",
            "trigger": "CInputManager CMode.Input"
        },
        {
            "contents": "DataFileMgr",
            "trigger": "CDataFileMgr CMode.DataFileMgr"
        },
        {
            "contents": "ScoreMgr",
            "trigger": "CScoreMgr CMode.ScoreMgr"
        },
        {
            "contents": "SystemPlatform",
            "trigger": "ESystemPlatform CMode.SystemPlatform"
        },
        {
            "contents": "SystemSkuIdentifier",
            "trigger": "ESystemSkuIdentifier CMode.SystemSkuIdentifier"
        },
        {
            "contents": "UseMinimap",
            "trigger": "Boolean CMode.UseMinimap"
        },
        {
            "contents": "Replay_AutoStart",
            "trigger": "Boolean CMode.Replay_AutoStart"
        },
        {
            "contents": "AchievementsManager",
            "trigger": "CAchievementsManager CMode.AchievementsManager"
        },
        {
            "contents": "TurretsManager",
            "trigger": "CModeTurretManager CMode.TurretsManager"
        },
        {
            "contents": "TweakTeamColorsToAvoidHueOverlap()",
            "trigger": "Void TweakTeamColorsToAvoidHueOverlap()"
        },
        {
            "contents": "RequestLoadMap()",
            "trigger": "Void RequestLoadMap()"
        },
        {
            "contents": "RequestUnloadMap()",
            "trigger": "Void RequestUnloadMap()"
        },
        {
            "contents": "Hud_Load(${0:Text ModuleName})",
            "trigger": "Void Hud_Load(Text ModuleName)"
        },
        {
            "contents": "PassOn(${0:CUIConfigEvent EventToPassOn})",
            "trigger": "Void PassOn(CUIConfigEvent EventToPassOn)"
        },
        {
            "contents": "Discard(${0:CUIConfigEvent EventToDiscard})",
            "trigger": "Void Discard(CUIConfigEvent EventToDiscard)"
        },
        {
            "contents": "Ladder_OpenMatch_Request()",
            "trigger": "Void Ladder_OpenMatch_Request()"
        },
        {
            "contents": "Ladder_AddPlayer(${0:CScore PlayerScore})",
            "trigger": "Void Ladder_AddPlayer(CScore PlayerScore)"
        },
        {
            "contents": "Ladder_OpenMatch_BeginRequest()",
            "trigger": "Void Ladder_OpenMatch_BeginRequest()"
        },
        {
            "contents": "Ladder_OpenMatch_AddPlayer(${0:CScore PlayerScore})",
            "trigger": "Void Ladder_OpenMatch_AddPlayer(CScore PlayerScore)"
        },
        {
            "contents": "Ladder_OpenMatch_EndRequest()",
            "trigger": "Void Ladder_OpenMatch_EndRequest()"
        },
        {
            "contents": "Ladder_CloseMatchRequest()",
            "trigger": "Void Ladder_CloseMatchRequest()"
        },
        {
            "contents": "Ladder_CancelMatchRequest()",
            "trigger": "Void Ladder_CancelMatchRequest()"
        },
        {
            "contents": "Ladder_SetResultsVersion(${0:Integer Version})",
            "trigger": "Void Ladder_SetResultsVersion(Integer Version)"
        },
        {
            "contents": "Ladder_SetMatchMakingMatchId(${0:Integer MatchId})",
            "trigger": "Void Ladder_SetMatchMakingMatchId(Integer MatchId)"
        },
        {
            "contents": "Ladder_EnableChallengeMode(${0:Boolean Enable})",
            "trigger": "Void Ladder_EnableChallengeMode(Boolean Enable)"
        },
        {
            "contents": "Admin_KickUser(${0:CUser User}, ${1:Text Reason})",
            "trigger": "Boolean Admin_KickUser(CUser User, Text Reason)"
        },
        {
            "contents": "Admin_SetLobbyInfo(${0:Boolean IsLobby}, ${1:Integer LobbyPlayerCount}, ${2:Integer LobbyMaxPlayerCount}, ${3:Real LobbyPlayersLevel})",
            "trigger": "Void Admin_SetLobbyInfo(Boolean IsLobby, Integer LobbyPlayerCount, Integer LobbyMaxPlayerCount, Real LobbyPlayersLevel)"
        },
        {
            "contents": "AutoTeamBalance()",
            "trigger": "Void AutoTeamBalance()"
        },
        {
            "contents": "Solo_SetNewRecord(${0:CScore PlayerScore}, ${1:EMedal PlayerScore})",
            "trigger": "Void Solo_SetNewRecord(CScore PlayerScore, EMedal PlayerScore)"
        },
        {
            "contents": "Synchro_AddBarrier()",
            "trigger": "Integer Synchro_AddBarrier()"
        },
        {
            "contents": "Synchro_BarrierReached(${0:Integer Barrier})",
            "trigger": "Boolean Synchro_BarrierReached(Integer Barrier)"
        },
        {
            "contents": "Users_AreAllies(${0:CUser User1}, ${1:CUser User2})",
            "trigger": "Boolean Users_AreAllies(CUser User1, CUser User2)"
        },
        {
            "contents": "Users_RequestSwitchToSpectator(${0:CUser User})",
            "trigger": "Void Users_RequestSwitchToSpectator(CUser User)"
        },
        {
            "contents": "Users_CreateFake(${0:Text NickName}, ${1:Integer RequestedTeam})",
            "trigger": "CUser Users_CreateFake(Text NickName, Integer RequestedTeam)"
        },
        {
            "contents": "Users_DestroyFake(${0:CUser User})",
            "trigger": "Void Users_DestroyFake(CUser User)"
        },
        {
            "contents": "Users_SetNbFakeUsers(${0:Integer NbTeam1}, ${1:Integer NbTeam2})",
            "trigger": "Void Users_SetNbFakeUsers(Integer NbTeam1, Integer NbTeam2)"
        },
        {
            "contents": "Users_DestroyAllFakes()",
            "trigger": "Void Users_DestroyAllFakes()"
        },
        {
            "contents": "ItemList_Begin()",
            "trigger": "Void ItemList_Begin()"
        },
        {
            "contents": "ItemList_Begin()",
            "trigger": "Boolean ItemList_Begin()"
        },
        {
            "contents": "ItemList_Add(${0:Text ModelName})",
            "trigger": "Ident ItemList_Add(Text ModelName)"
        },
        {
            "contents": "ItemList_AddWithSkin(${0:Text ModelName}, ${1:Text SkinName})",
            "trigger": "Ident ItemList_AddWithSkin(Text ModelName, Text SkinName)"
        },
        {
            "contents": "ItemList_End()",
            "trigger": "Void ItemList_End()"
        },
        {
            "contents": "DemoToken_StartUsingToken()",
            "trigger": "Void DemoToken_StartUsingToken()"
        },
        {
            "contents": "DemoToken_StopUsingToken()",
            "trigger": "Void DemoToken_StopUsingToken()"
        },
        {
            "contents": "DemoToken_GetAndUseToken(${0:CUser User})",
            "trigger": "Void DemoToken_GetAndUseToken(CUser User)"
        },
        {
            "contents": "ActionList_Begin()",
            "trigger": "Void ActionList_Begin()"
        },
        {
            "contents": "ActionList_Begin()",
            "trigger": "Boolean ActionList_Begin()"
        },
        {
            "contents": "ActionList_Add(${0:Text ActionName})",
            "trigger": "Ident ActionList_Add(Text ActionName)"
        },
        {
            "contents": "ActionList_End()",
            "trigger": "Void ActionList_End()"
        },
        {
            "contents": "Replay_Start()",
            "trigger": "Void Replay_Start()"
        },
        {
            "contents": "Replay_Stop()",
            "trigger": "Void Replay_Stop()"
        },
        {
            "contents": "Dbg_DumpDeclareForVariables(${0:CNod Nod}, ${1:Boolean StatsOnly})",
            "trigger": "Text Dbg_DumpDeclareForVariables(CNod Nod, Boolean StatsOnly)"
        },
        {
            "contents": "CTitleFlow",
            "trigger": "CTitleFlow"
        },
        {
            "contents": "CTitleFlow::ESplitScreenLayout::Horizontal",
            "trigger": "CTitleFlow::ESplitScreenLayout::Horizontal"
        },
        {
            "contents": "CTitleFlow::ESplitScreenLayout::Vertical",
            "trigger": "CTitleFlow::ESplitScreenLayout::Vertical"
        },
        {
            "contents": "CTitleFlow::ESplitScreenLayout::Four",
            "trigger": "CTitleFlow::ESplitScreenLayout::Four"
        },
        {
            "contents": "CTitleFlow::EResult::Success",
            "trigger": "CTitleFlow::EResult::Success"
        },
        {
            "contents": "CTitleFlow::EResult::Error_Internal",
            "trigger": "CTitleFlow::EResult::Error_Internal"
        },
        {
            "contents": "CTitleFlow::EResult::Error_DataMgr",
            "trigger": "CTitleFlow::EResult::Error_DataMgr"
        },
        {
            "contents": "CTitleFlow::EResult::Error_Net_ServerNotFound",
            "trigger": "CTitleFlow::EResult::Error_Net_ServerNotFound"
        },
        {
            "contents": "CTitleFlow::EResult::Error_Net_ServerUnreachable",
            "trigger": "CTitleFlow::EResult::Error_Net_ServerUnreachable"
        },
        {
            "contents": "CTitleFlow::EResult::Error_Net_Disconnected",
            "trigger": "CTitleFlow::EResult::Error_Net_Disconnected"
        },
        {
            "contents": "CTitleFlow::EResult::Error_Net_WrongPassword",
            "trigger": "CTitleFlow::EResult::Error_Net_WrongPassword"
        },
        {
            "contents": "CTitleFlow::EResult::Error_Network_OnlineExpired",
            "trigger": "CTitleFlow::EResult::Error_Network_OnlineExpired"
        },
        {
            "contents": "CTitleFlow::EResult::Error_Network_ServerFull",
            "trigger": "CTitleFlow::EResult::Error_Network_ServerFull"
        },
        {
            "contents": "CTitleFlow::EEditorType::ActionMaker",
            "trigger": "CTitleFlow::EEditorType::ActionMaker"
        },
        {
            "contents": "CTitleFlow::EEditorType::ChallengeEditor",
            "trigger": "CTitleFlow::EEditorType::ChallengeEditor"
        },
        {
            "contents": "CTitleFlow::EEditorType::ItemEditor",
            "trigger": "CTitleFlow::EEditorType::ItemEditor"
        },
        {
            "contents": "CTitleFlow::EEditorType::InterfaceDesigner",
            "trigger": "CTitleFlow::EEditorType::InterfaceDesigner"
        },
        {
            "contents": "CTitleFlow::EEditorType::MeshModeler",
            "trigger": "CTitleFlow::EEditorType::MeshModeler"
        },
        {
            "contents": "CTitleFlow::EEditorType::ModuleStudio",
            "trigger": "CTitleFlow::EEditorType::ModuleStudio"
        },
        {
            "contents": "CTitleFlow::EEditorType::PixelArt",
            "trigger": "CTitleFlow::EEditorType::PixelArt"
        },
        {
            "contents": "CTitleFlow::EEditorType::EditorEditor",
            "trigger": "CTitleFlow::EEditorType::EditorEditor"
        },
        {
            "contents": "IsReady",
            "trigger": "Boolean CTitleFlow.IsReady"
        },
        {
            "contents": "LatestResult",
            "trigger": "EResult CTitleFlow.LatestResult"
        },
        {
            "contents": "CustomResultType",
            "trigger": "Text CTitleFlow.CustomResultType"
        },
        {
            "contents": "CustomResultData",
            "trigger": "Text[] CTitleFlow.CustomResultData"
        },
        {
            "contents": "LocalServers",
            "trigger": "CServerInfo[] CTitleFlow.LocalServers"
        },
        {
            "contents": "JoinServer_ServerInfo",
            "trigger": "CServerInfo CTitleFlow.JoinServer_ServerInfo"
        },
        {
            "contents": "PlayMap(${0:Text Map}, ${1:Text Mode}, ${2:Text SettingsXml})",
            "trigger": "Void PlayMap(Text Map, Text Mode, Text SettingsXml)"
        },
        {
            "contents": "PlayCampaign(${0:CCampaign Campaign}, ${1:CMapInfo MapInfo}, ${2:Text Mode}, ${3:Text SettingsXml})",
            "trigger": "Void PlayCampaign(CCampaign Campaign, CMapInfo MapInfo, Text Mode, Text SettingsXml)"
        },
        {
            "contents": "PlayMapList(${0:Text[] MapList}, ${1:Text Mode}, ${2:Text SettingsXml})",
            "trigger": "Void PlayMapList(Text[] MapList, Text Mode, Text SettingsXml)"
        },
        {
            "contents": "PlayPlaylist(${0:Text Playlist}, ${1:Text OverrideMode}, ${2:Text OverrideSettingsXml})",
            "trigger": "Void PlayPlaylist(Text Playlist, Text OverrideMode, Text OverrideSettingsXml)"
        },
        {
            "contents": "PlaySplitScreen(${0:ESplitScreenLayout LayoutType}, ${1:Text[] MapList}, ${2:Text Mode}, ${3:Text SettingsXml})",
            "trigger": "Void PlaySplitScreen(ESplitScreenLayout LayoutType, Text[] MapList, Text Mode, Text SettingsXml)"
        },
        {
            "contents": "PlayMultiOnSameScreen(${0:ESplitScreenLayout LayoutType}, ${1:Text[] MapList}, ${2:Text Mode}, ${3:Text SettingsXml})",
            "trigger": "Void PlayMultiOnSameScreen(ESplitScreenLayout LayoutType, Text[] MapList, Text Mode, Text SettingsXml)"
        },
        {
            "contents": "ViewReplay(${0:Text Replay})",
            "trigger": "Void ViewReplay(Text Replay)"
        },
        {
            "contents": "OpenEditor(${0:Text EditorName}, ${1:Text MainPluginSettings})",
            "trigger": "Void OpenEditor(Text EditorName, Text MainPluginSettings)"
        },
        {
            "contents": "OpenEditor(${0:EEditorType EditorType})",
            "trigger": "Void OpenEditor(EEditorType EditorType)"
        },
        {
            "contents": "EditSkins()",
            "trigger": "Void EditSkins()"
        },
        {
            "contents": "EditReplay(${0:Text[] ReplayList})",
            "trigger": "Void EditReplay(Text[] ReplayList)"
        },
        {
            "contents": "EditGhosts(${0:Text Map})",
            "trigger": "Void EditGhosts(Text Map)"
        },
        {
            "contents": "EditAsset(${0:Text EditorName}, ${1:Text MainPluginSettingsXml}, ${2:Text RelativeFileName})",
            "trigger": "Void EditAsset(Text EditorName, Text MainPluginSettingsXml, Text RelativeFileName)"
        },
        {
            "contents": "EditMap(${0:Text Map}, ${1:Text EditorPluginScript}, ${2:Text EditorPluginArgument})",
            "trigger": "Void EditMap(Text Map, Text EditorPluginScript, Text EditorPluginArgument)"
        },
        {
            "contents": "EditNewMap(${0:Text Environment}, ${1:Text Decoration}, ${2:Text ModUrl}, ${3:Text PlayerModel}, ${4:Text MapType}, ${5:Text EditorPluginScript}, ${6:Text EditorPluginArgument})",
            "trigger": "Void EditNewMap(Text Environment, Text Decoration, Text ModUrl, Text PlayerModel, Text MapType, Text EditorPluginScript, Text EditorPluginArgument)"
        },
        {
            "contents": "EditNewMap(${0:Text Environment}, ${1:Text Decoration}, ${2:Text ModUrl}, ${3:Text PlayerModel}, ${4:Text MapType}, ${5:Boolean UseSimpleEditor}, ${6:Text EditorPluginScript}, ${7:Text EditorPluginArgument})",
            "trigger": "Void EditNewMap(Text Environment, Text Decoration, Text ModUrl, Text PlayerModel, Text MapType, Boolean UseSimpleEditor, Text EditorPluginScript, Text EditorPluginArgument)"
        },
        {
            "contents": "EditBadges()",
            "trigger": "Void EditBadges()"
        },
        {
            "contents": "DiscoverLocalServers()",
            "trigger": "Void DiscoverLocalServers()"
        },
        {
            "contents": "CreateServer(${0:Text ServerName}, ${1:Text ServerComment}, ${2:Integer MaxPlayerCount}, ${3:Text Password}, ${4:Text PasswordSpectators}, ${5:Text[] MapList}, ${6:Text Mode}, ${7:Text ScriptsSettingsXml})",
            "trigger": "Void CreateServer(Text ServerName, Text ServerComment, Integer MaxPlayerCount, Text Password, Text PasswordSpectators, Text[] MapList, Text Mode, Text ScriptsSettingsXml)"
        },
        {
            "contents": "CreateServer(${0:Text ServerName}, ${1:Text ServerComment}, ${2:Integer MaxPlayerCount}, ${3:Text Password}, ${4:Text PasswordSpectators}, ${5:Text MatchSettingsFileName})",
            "trigger": "Void CreateServer(Text ServerName, Text ServerComment, Integer MaxPlayerCount, Text Password, Text PasswordSpectators, Text MatchSettingsFileName)"
        },
        {
            "contents": "JoinServer_GetInfo(${0:Text ServerLogin})",
            "trigger": "Void JoinServer_GetInfo(Text ServerLogin)"
        },
        {
            "contents": "JoinServer_GetInfo(${0:Text ServerLogin}, ${1:Text ServerPassword})",
            "trigger": "Void JoinServer_GetInfo(Text ServerLogin, Text ServerPassword)"
        },
        {
            "contents": "JoinServer_GetInfo(${0:CServerInfo Server})",
            "trigger": "Void JoinServer_GetInfo(CServerInfo Server)"
        },
        {
            "contents": "JoinServer_GetInfo(${0:CServerInfo Server}, ${1:Text ServerPassword})",
            "trigger": "Void JoinServer_GetInfo(CServerInfo Server, Text ServerPassword)"
        },
        {
            "contents": "JoinServer_Join(${0:Boolean AsSpectator})",
            "trigger": "Void JoinServer_Join(Boolean AsSpectator)"
        },
        {
            "contents": "JoinServer_Abort()",
            "trigger": "Void JoinServer_Abort()"
        },
        {
            "contents": "Quit()",
            "trigger": "Void Quit()"
        },
        {
            "contents": "CMapEditorPluginLayer",
            "trigger": "CMapEditorPluginLayer"
        },
        {
            "contents": "Editor",
            "trigger": "CMapEditorPlugin CMapEditorPluginLayer.Editor"
        },
        {
            "contents": "CMapEditorPluginEvent",
            "trigger": "CMapEditorPluginEvent"
        },
        {
            "contents": "CMapEditorPluginEvent::Type::LayerCustomEvent",
            "trigger": "CMapEditorPluginEvent::Type::LayerCustomEvent"
        },
        {
            "contents": "CMapEditorPluginEvent::Type::KeyPress",
            "trigger": "CMapEditorPluginEvent::Type::KeyPress"
        },
        {
            "contents": "CMapEditorPluginEvent::Type::MenuNavigation",
            "trigger": "CMapEditorPluginEvent::Type::MenuNavigation"
        },
        {
            "contents": "CMapEditorPluginEvent::Type::CursorSelectionBegin",
            "trigger": "CMapEditorPluginEvent::Type::CursorSelectionBegin"
        },
        {
            "contents": "CMapEditorPluginEvent::Type::CursorSelectionEnd",
            "trigger": "CMapEditorPluginEvent::Type::CursorSelectionEnd"
        },
        {
            "contents": "CMapEditorPluginEvent::Type::CursorChange",
            "trigger": "CMapEditorPluginEvent::Type::CursorChange"
        },
        {
            "contents": "CMapEditorPluginEvent::Type::MapModified",
            "trigger": "CMapEditorPluginEvent::Type::MapModified"
        },
        {
            "contents": "CMapEditorPluginEvent::Type::EditorInput",
            "trigger": "CMapEditorPluginEvent::Type::EditorInput"
        },
        {
            "contents": "CMapEditorPluginEvent::Type::EditAnchor",
            "trigger": "CMapEditorPluginEvent::Type::EditAnchor"
        },
        {
            "contents": "CMapEditorPluginEvent::Type::EditObjectives",
            "trigger": "CMapEditorPluginEvent::Type::EditObjectives"
        },
        {
            "contents": "CMapEditorPluginEvent::Type::StartValidation",
            "trigger": "CMapEditorPluginEvent::Type::StartValidation"
        },
        {
            "contents": "CMapEditorPluginEvent::Type::StartTest",
            "trigger": "CMapEditorPluginEvent::Type::StartTest"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::Unknown",
            "trigger": "CMapEditorPluginEvent::EInput::Unknown"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::Menu",
            "trigger": "CMapEditorPluginEvent::EInput::Menu"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::SwitchToRace",
            "trigger": "CMapEditorPluginEvent::EInput::SwitchToRace"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::Undo",
            "trigger": "CMapEditorPluginEvent::EInput::Undo"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::Redo",
            "trigger": "CMapEditorPluginEvent::EInput::Redo"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CursorUp",
            "trigger": "CMapEditorPluginEvent::EInput::CursorUp"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CursorRight",
            "trigger": "CMapEditorPluginEvent::EInput::CursorRight"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CursorDown",
            "trigger": "CMapEditorPluginEvent::EInput::CursorDown"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CursorLeft",
            "trigger": "CMapEditorPluginEvent::EInput::CursorLeft"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CursorRaise",
            "trigger": "CMapEditorPluginEvent::EInput::CursorRaise"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CursorLower",
            "trigger": "CMapEditorPluginEvent::EInput::CursorLower"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CursorTurn",
            "trigger": "CMapEditorPluginEvent::EInput::CursorTurn"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CursorPick",
            "trigger": "CMapEditorPluginEvent::EInput::CursorPick"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CursorPlace",
            "trigger": "CMapEditorPluginEvent::EInput::CursorPlace"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CursorDelete",
            "trigger": "CMapEditorPluginEvent::EInput::CursorDelete"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CameraUp",
            "trigger": "CMapEditorPluginEvent::EInput::CameraUp"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CameraRight",
            "trigger": "CMapEditorPluginEvent::EInput::CameraRight"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CameraDown",
            "trigger": "CMapEditorPluginEvent::EInput::CameraDown"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CameraLeft",
            "trigger": "CMapEditorPluginEvent::EInput::CameraLeft"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CameraZoomNext",
            "trigger": "CMapEditorPluginEvent::EInput::CameraZoomNext"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::Camera0",
            "trigger": "CMapEditorPluginEvent::EInput::Camera0"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::Camera1",
            "trigger": "CMapEditorPluginEvent::EInput::Camera1"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::Camera3",
            "trigger": "CMapEditorPluginEvent::EInput::Camera3"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::Camera7",
            "trigger": "CMapEditorPluginEvent::EInput::Camera7"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::Camera9",
            "trigger": "CMapEditorPluginEvent::EInput::Camera9"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::PivotChange",
            "trigger": "CMapEditorPluginEvent::EInput::PivotChange"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CursorTurnSlightly",
            "trigger": "CMapEditorPluginEvent::EInput::CursorTurnSlightly"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::CursorTurnSlightlyAntiClockwise",
            "trigger": "CMapEditorPluginEvent::EInput::CursorTurnSlightlyAntiClockwise"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::IconUp",
            "trigger": "CMapEditorPluginEvent::EInput::IconUp"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::IconRight",
            "trigger": "CMapEditorPluginEvent::EInput::IconRight"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::IconDown",
            "trigger": "CMapEditorPluginEvent::EInput::IconDown"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::IconLeft",
            "trigger": "CMapEditorPluginEvent::EInput::IconLeft"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::RemoveAll",
            "trigger": "CMapEditorPluginEvent::EInput::RemoveAll"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::Save",
            "trigger": "CMapEditorPluginEvent::EInput::Save"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::SaveAs",
            "trigger": "CMapEditorPluginEvent::EInput::SaveAs"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::MapStyle",
            "trigger": "CMapEditorPluginEvent::EInput::MapStyle"
        },
        {
            "contents": "CMapEditorPluginEvent::EInput::ClassicMapEditor",
            "trigger": "CMapEditorPluginEvent::EInput::ClassicMapEditor"
        },
        {
            "contents": "Type",
            "trigger": "Type CMapEditorPluginEvent.Type"
        },
        {
            "contents": "Input",
            "trigger": "EInput CMapEditorPluginEvent.Input"
        },
        {
            "contents": "EditedAnchorDataId",
            "trigger": "Ident CMapEditorPluginEvent.EditedAnchorDataId"
        },
        {
            "contents": "IsFromPad",
            "trigger": "Boolean CMapEditorPluginEvent.IsFromPad"
        },
        {
            "contents": "IsFromMouse",
            "trigger": "Boolean CMapEditorPluginEvent.IsFromMouse"
        },
        {
            "contents": "IsFromKeyboard",
            "trigger": "Boolean CMapEditorPluginEvent.IsFromKeyboard"
        },
        {
            "contents": "CMlScriptEvent",
            "trigger": "CMlScriptEvent"
        },
        {
            "contents": "CMlScriptEvent::Type::KeyPress",
            "trigger": "CMlScriptEvent::Type::KeyPress"
        },
        {
            "contents": "CMlScriptEvent::Type::MouseClick",
            "trigger": "CMlScriptEvent::Type::MouseClick"
        },
        {
            "contents": "CMlScriptEvent::Type::MouseOver",
            "trigger": "CMlScriptEvent::Type::MouseOver"
        },
        {
            "contents": "CMlScriptEvent::Type::MouseOut",
            "trigger": "CMlScriptEvent::Type::MouseOut"
        },
        {
            "contents": "CMlScriptEvent::Type::EntrySubmit",
            "trigger": "CMlScriptEvent::Type::EntrySubmit"
        },
        {
            "contents": "CMlScriptEvent::Type::MenuNavigation",
            "trigger": "CMlScriptEvent::Type::MenuNavigation"
        },
        {
            "contents": "CMlScriptEvent::Type::PluginCustomEvent",
            "trigger": "CMlScriptEvent::Type::PluginCustomEvent"
        },
        {
            "contents": "CMlScriptEvent::EMenuNavAction::Up",
            "trigger": "CMlScriptEvent::EMenuNavAction::Up"
        },
        {
            "contents": "CMlScriptEvent::EMenuNavAction::Right",
            "trigger": "CMlScriptEvent::EMenuNavAction::Right"
        },
        {
            "contents": "CMlScriptEvent::EMenuNavAction::Left",
            "trigger": "CMlScriptEvent::EMenuNavAction::Left"
        },
        {
            "contents": "CMlScriptEvent::EMenuNavAction::Down",
            "trigger": "CMlScriptEvent::EMenuNavAction::Down"
        },
        {
            "contents": "CMlScriptEvent::EMenuNavAction::Select",
            "trigger": "CMlScriptEvent::EMenuNavAction::Select"
        },
        {
            "contents": "CMlScriptEvent::EMenuNavAction::Cancel",
            "trigger": "CMlScriptEvent::EMenuNavAction::Cancel"
        },
        {
            "contents": "CMlScriptEvent::EMenuNavAction::PageUp",
            "trigger": "CMlScriptEvent::EMenuNavAction::PageUp"
        },
        {
            "contents": "CMlScriptEvent::EMenuNavAction::PageDown",
            "trigger": "CMlScriptEvent::EMenuNavAction::PageDown"
        },
        {
            "contents": "CMlScriptEvent::EMenuNavAction::AppMenu",
            "trigger": "CMlScriptEvent::EMenuNavAction::AppMenu"
        },
        {
            "contents": "CMlScriptEvent::EMenuNavAction::Action1",
            "trigger": "CMlScriptEvent::EMenuNavAction::Action1"
        },
        {
            "contents": "CMlScriptEvent::EMenuNavAction::Action2",
            "trigger": "CMlScriptEvent::EMenuNavAction::Action2"
        },
        {
            "contents": "Type",
            "trigger": "Type CMlScriptEvent.Type"
        },
        {
            "contents": "KeyCode",
            "trigger": "Integer CMlScriptEvent.KeyCode"
        },
        {
            "contents": "KeyName",
            "trigger": "Text CMlScriptEvent.KeyName"
        },
        {
            "contents": "CharPressed",
            "trigger": "Text CMlScriptEvent.CharPressed"
        },
        {
            "contents": "ControlId",
            "trigger": "Text CMlScriptEvent.ControlId"
        },
        {
            "contents": "Control",
            "trigger": "CMlControl CMlScriptEvent.Control"
        },
        {
            "contents": "MenuNavAction",
            "trigger": "EMenuNavAction CMlScriptEvent.MenuNavAction"
        },
        {
            "contents": "IsActionAutoRepeat",
            "trigger": "Boolean CMlScriptEvent.IsActionAutoRepeat"
        },
        {
            "contents": "CustomEventType",
            "trigger": "Text CMlScriptEvent.CustomEventType"
        },
        {
            "contents": "CustomEventData",
            "trigger": "Text[] CMlScriptEvent.CustomEventData"
        },
        {
            "contents": "CModuleMenuFileBrowser",
            "trigger": "CModuleMenuFileBrowser"
        },
        {
            "contents": "CModuleMenuFileBrowser::EFileType::Maps",
            "trigger": "CModuleMenuFileBrowser::EFileType::Maps"
        },
        {
            "contents": "CModuleMenuFileBrowser::EFileType::Skins",
            "trigger": "CModuleMenuFileBrowser::EFileType::Skins"
        },
        {
            "contents": "CModuleMenuFileBrowser::EFileType::Items",
            "trigger": "CModuleMenuFileBrowser::EFileType::Items"
        },
        {
            "contents": "CModuleMenuFileBrowser::EFileType::Blocks",
            "trigger": "CModuleMenuFileBrowser::EFileType::Blocks"
        },
        {
            "contents": "CModuleMenuFileBrowser::EFileType::Scripts",
            "trigger": "CModuleMenuFileBrowser::EFileType::Scripts"
        },
        {
            "contents": "CModuleMenuFileBrowser::EFileType::Images",
            "trigger": "CModuleMenuFileBrowser::EFileType::Images"
        },
        {
            "contents": "CModuleMenuFileBrowser::EFileType::Manialinks",
            "trigger": "CModuleMenuFileBrowser::EFileType::Manialinks"
        },
        {
            "contents": "CModuleMenuFileBrowser::EFileType::Packs",
            "trigger": "CModuleMenuFileBrowser::EFileType::Packs"
        },
        {
            "contents": "CModuleMenuFileBrowser::EFileType::Actions",
            "trigger": "CModuleMenuFileBrowser::EFileType::Actions"
        },
        {
            "contents": "CModuleMenuFileBrowser::EFileType::Modules",
            "trigger": "CModuleMenuFileBrowser::EFileType::Modules"
        },
        {
            "contents": "CModuleMenuFileBrowser::EFileType::Meshes",
            "trigger": "CModuleMenuFileBrowser::EFileType::Meshes"
        },
        {
            "contents": "CModuleMenuFileBrowser::EFileType::Replays",
            "trigger": "CModuleMenuFileBrowser::EFileType::Replays"
        },
        {
            "contents": "CModuleMenuFileBrowser::EFileAction::Select",
            "trigger": "CModuleMenuFileBrowser::EFileAction::Select"
        },
        {
            "contents": "CModuleMenuFileBrowser::EFileAction::Save",
            "trigger": "CModuleMenuFileBrowser::EFileAction::Save"
        },
        {
            "contents": "CModuleMenuFileBrowser::EFileAction::MultiSelect",
            "trigger": "CModuleMenuFileBrowser::EFileAction::MultiSelect"
        },
        {
            "contents": "HasFinished",
            "trigger": "Boolean CModuleMenuFileBrowser.HasFinished"
        },
        {
            "contents": "Selection",
            "trigger": "Text[] CModuleMenuFileBrowser.Selection"
        },
        {
            "contents": "SetFileType(${0:EFileType FileType})",
            "trigger": "Void SetFileType(EFileType FileType)"
        },
        {
            "contents": "SetFileAction(${0:EFileAction FileAction})",
            "trigger": "Void SetFileAction(EFileAction FileAction)"
        },
        {
            "contents": "CManiaAppStation",
            "trigger": "CManiaAppStation"
        },
        {
            "contents": "Station",
            "trigger": "CStation CManiaAppStation.Station"
        },
        {
            "contents": "Maker_EditedTitles",
            "trigger": "CPackCreatorTitleInfo[] CManiaAppStation.Maker_EditedTitles"
        },
        {
            "contents": "EnterStation()",
            "trigger": "Void EnterStation()"
        },
        {
            "contents": "Maker_EditTitle(${0:Text EditedTitleId})",
            "trigger": "Void Maker_EditTitle(Text EditedTitleId)"
        },
        {
            "contents": "Maker_EditNewTitle(${0:Text EditedTitleName})",
            "trigger": "Void Maker_EditNewTitle(Text EditedTitleName)"
        },
        {
            "contents": "CEditorEvent",
            "trigger": "CEditorEvent"
        },
        {
            "contents": "CEditorEvent::Type::LayerCustomEvent",
            "trigger": "CEditorEvent::Type::LayerCustomEvent"
        },
        {
            "contents": "CEditorEvent::Type::KeyPress",
            "trigger": "CEditorEvent::Type::KeyPress"
        },
        {
            "contents": "CEditorEvent::Type::MenuNavigation",
            "trigger": "CEditorEvent::Type::MenuNavigation"
        },
        {
            "contents": "CEditorEvent::Type::FileChanged",
            "trigger": "CEditorEvent::Type::FileChanged"
        },
        {
            "contents": "CEditorEvent::Type::OnUndo",
            "trigger": "CEditorEvent::Type::OnUndo"
        },
        {
            "contents": "CEditorEvent::Type::OnRedo",
            "trigger": "CEditorEvent::Type::OnRedo"
        },
        {
            "contents": "Type",
            "trigger": "Type CEditorEvent.Type"
        },
        {
            "contents": "CBlockModelVariantGround",
            "trigger": "CBlockModelVariantGround"
        },
        {
            "contents": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::Auto",
            "trigger": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::Auto"
        },
        {
            "contents": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::Force",
            "trigger": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::Force"
        },
        {
            "contents": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::DoNotPlace",
            "trigger": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::DoNotPlace"
        },
        {
            "contents": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::DoNotDestroy",
            "trigger": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::DoNotDestroy"
        },
        {
            "contents": "CTaskResult_RealLeaderBoard",
            "trigger": "CTaskResult_RealLeaderBoard"
        },
        {
            "contents": "FromIndex",
            "trigger": "Integer CTaskResult_RealLeaderBoard.FromIndex"
        },
        {
            "contents": "Count",
            "trigger": "Integer CTaskResult_RealLeaderBoard.Count"
        },
        {
            "contents": "LeaderBoardInfo",
            "trigger": "CRealLeaderBoardInfo[] CTaskResult_RealLeaderBoard.LeaderBoardInfo"
        },
        {
            "contents": "CMacroblockModel",
            "trigger": "CMacroblockModel"
        },
        {
            "contents": "IsGround",
            "trigger": "Boolean CMacroblockModel.IsGround"
        },
        {
            "contents": "HasStart",
            "trigger": "Boolean CMacroblockModel.HasStart"
        },
        {
            "contents": "HasFinish",
            "trigger": "Boolean CMacroblockModel.HasFinish"
        },
        {
            "contents": "HasCheckpoint",
            "trigger": "Boolean CMacroblockModel.HasCheckpoint"
        },
        {
            "contents": "HasMultilap",
            "trigger": "Boolean CMacroblockModel.HasMultilap"
        },
        {
            "contents": "GeneratedBlockModel",
            "trigger": "CBlockModel CMacroblockModel.GeneratedBlockModel"
        },
        {
            "contents": "Name",
            "trigger": "Text CMacroblockModel.Name"
        },
        {
            "contents": "ClearScriptMetadata()",
            "trigger": "Void ClearScriptMetadata()"
        },
        {
            "contents": "CModuleMenuComponent",
            "trigger": "CModuleMenuComponent"
        },
        {
            "contents": "ComponentLayer",
            "trigger": "CUILayer CModuleMenuComponent.ComponentLayer"
        },
        {
            "contents": "Hide()",
            "trigger": "Void Hide()"
        },
        {
            "contents": "Show()",
            "trigger": "Void Show()"
        },
        {
            "contents": "CBlockModelVariant",
            "trigger": "CBlockModelVariant"
        },
        {
            "contents": "CBlockModelVariant::CardinalDirEnum::North",
            "trigger": "CBlockModelVariant::CardinalDirEnum::North"
        },
        {
            "contents": "CBlockModelVariant::CardinalDirEnum::East",
            "trigger": "CBlockModelVariant::CardinalDirEnum::East"
        },
        {
            "contents": "CBlockModelVariant::CardinalDirEnum::South",
            "trigger": "CBlockModelVariant::CardinalDirEnum::South"
        },
        {
            "contents": "CBlockModelVariant::CardinalDirEnum::West",
            "trigger": "CBlockModelVariant::CardinalDirEnum::West"
        },
        {
            "contents": "CBlockModelVariant::MultiDirEnum::SameDir",
            "trigger": "CBlockModelVariant::MultiDirEnum::SameDir"
        },
        {
            "contents": "CBlockModelVariant::MultiDirEnum::SymmetricalDirs",
            "trigger": "CBlockModelVariant::MultiDirEnum::SymmetricalDirs"
        },
        {
            "contents": "CBlockModelVariant::MultiDirEnum::AllDir",
            "trigger": "CBlockModelVariant::MultiDirEnum::AllDir"
        },
        {
            "contents": "CBlockModelVariant::MultiDirEnum::OpposedDirOnly",
            "trigger": "CBlockModelVariant::MultiDirEnum::OpposedDirOnly"
        },
        {
            "contents": "CBlockModelVariant::MultiDirEnum::PerpendicularDirsOnly",
            "trigger": "CBlockModelVariant::MultiDirEnum::PerpendicularDirsOnly"
        },
        {
            "contents": "CBlockModelVariant::MultiDirEnum::NextDirOnly",
            "trigger": "CBlockModelVariant::MultiDirEnum::NextDirOnly"
        },
        {
            "contents": "CBlockModelVariant::MultiDirEnum::PreviousDirOnly",
            "trigger": "CBlockModelVariant::MultiDirEnum::PreviousDirOnly"
        },
        {
            "contents": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Z",
            "trigger": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Z"
        },
        {
            "contents": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Y",
            "trigger": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Y"
        },
        {
            "contents": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_X",
            "trigger": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_X"
        },
        {
            "contents": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Z",
            "trigger": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Z"
        },
        {
            "contents": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Y",
            "trigger": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Y"
        },
        {
            "contents": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_X",
            "trigger": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_X"
        },
        {
            "contents": "CBlockModelVariant::VariantBaseTypeEnum::Inherit",
            "trigger": "CBlockModelVariant::VariantBaseTypeEnum::Inherit"
        },
        {
            "contents": "CBlockModelVariant::VariantBaseTypeEnum::None",
            "trigger": "CBlockModelVariant::VariantBaseTypeEnum::None"
        },
        {
            "contents": "CBlockModelVariant::VariantBaseTypeEnum::Conductor",
            "trigger": "CBlockModelVariant::VariantBaseTypeEnum::Conductor"
        },
        {
            "contents": "CBlockModelVariant::VariantBaseTypeEnum::Generator",
            "trigger": "CBlockModelVariant::VariantBaseTypeEnum::Generator"
        },
        {
            "contents": "Name",
            "trigger": "Text CBlockModelVariant.Name"
        },
        {
            "contents": "IsAllUnderground",
            "trigger": "Boolean CBlockModelVariant.IsAllUnderground"
        },
        {
            "contents": "IsPartUnderground",
            "trigger": "Boolean CBlockModelVariant.IsPartUnderground"
        },
        {
            "contents": "Size",
            "trigger": "Int3 CBlockModelVariant.Size"
        },
        {
            "contents": "OffsetBoundingBoxMin",
            "trigger": "Int3 CBlockModelVariant.OffsetBoundingBoxMin"
        },
        {
            "contents": "OffsetBoundingBoxMax",
            "trigger": "Int3 CBlockModelVariant.OffsetBoundingBoxMax"
        },
        {
            "contents": "BlockUnitModels",
            "trigger": "CBlockUnitModel[] CBlockModelVariant.BlockUnitModels"
        },
        {
            "contents": "CHttpRequest",
            "trigger": "CHttpRequest"
        },
        {
            "contents": "Url",
            "trigger": "Text CHttpRequest.Url"
        },
        {
            "contents": "Result",
            "trigger": "Text CHttpRequest.Result"
        },
        {
            "contents": "StatusCode",
            "trigger": "Integer CHttpRequest.StatusCode"
        },
        {
            "contents": "IsCompleted",
            "trigger": "Boolean CHttpRequest.IsCompleted"
        },
        {
            "contents": "CUILayer",
            "trigger": "CUILayer"
        },
        {
            "contents": "CUILayer::EUILayerType::Normal",
            "trigger": "CUILayer::EUILayerType::Normal"
        },
        {
            "contents": "CUILayer::EUILayerType::ScoresTable",
            "trigger": "CUILayer::EUILayerType::ScoresTable"
        },
        {
            "contents": "CUILayer::EUILayerType::ScreenIn3d",
            "trigger": "CUILayer::EUILayerType::ScreenIn3d"
        },
        {
            "contents": "CUILayer::EUILayerType::AltMenu",
            "trigger": "CUILayer::EUILayerType::AltMenu"
        },
        {
            "contents": "CUILayer::EUILayerType::Markers",
            "trigger": "CUILayer::EUILayerType::Markers"
        },
        {
            "contents": "CUILayer::EUILayerType::CutScene",
            "trigger": "CUILayer::EUILayerType::CutScene"
        },
        {
            "contents": "CUILayer::EUILayerType::InGameMenu",
            "trigger": "CUILayer::EUILayerType::InGameMenu"
        },
        {
            "contents": "CUILayer::EUILayerType::EditorPlugin",
            "trigger": "CUILayer::EUILayerType::EditorPlugin"
        },
        {
            "contents": "CUILayer::EUILayerType::ManiaplanetPlugin",
            "trigger": "CUILayer::EUILayerType::ManiaplanetPlugin"
        },
        {
            "contents": "CUILayer::EUILayerType::ManiaplanetMenu",
            "trigger": "CUILayer::EUILayerType::ManiaplanetMenu"
        },
        {
            "contents": "CUILayer::EUILayerType::LoadingScreen",
            "trigger": "CUILayer::EUILayerType::LoadingScreen"
        },
        {
            "contents": "CUILayer::EUILayerAnimation::None",
            "trigger": "CUILayer::EUILayerAnimation::None"
        },
        {
            "contents": "CUILayer::EUILayerAnimation::DownFast",
            "trigger": "CUILayer::EUILayerAnimation::DownFast"
        },
        {
            "contents": "CUILayer::EUILayerAnimation::DownSlow",
            "trigger": "CUILayer::EUILayerAnimation::DownSlow"
        },
        {
            "contents": "CUILayer::EUILayerAnimation::LeftFast",
            "trigger": "CUILayer::EUILayerAnimation::LeftFast"
        },
        {
            "contents": "CUILayer::EUILayerAnimation::LeftSlow",
            "trigger": "CUILayer::EUILayerAnimation::LeftSlow"
        },
        {
            "contents": "CUILayer::EUILayerAnimation::RightFast",
            "trigger": "CUILayer::EUILayerAnimation::RightFast"
        },
        {
            "contents": "CUILayer::EUILayerAnimation::RightSlow",
            "trigger": "CUILayer::EUILayerAnimation::RightSlow"
        },
        {
            "contents": "CUILayer::EUILayerAnimation::ScaleFast",
            "trigger": "CUILayer::EUILayerAnimation::ScaleFast"
        },
        {
            "contents": "CUILayer::EUILayerAnimation::ScaleSlow",
            "trigger": "CUILayer::EUILayerAnimation::ScaleSlow"
        },
        {
            "contents": "CUILayer::EUILayerAnimation::UpFast",
            "trigger": "CUILayer::EUILayerAnimation::UpFast"
        },
        {
            "contents": "CUILayer::EUILayerAnimation::UpSlow",
            "trigger": "CUILayer::EUILayerAnimation::UpSlow"
        },
        {
            "contents": "IsVisible",
            "trigger": "Boolean CUILayer.IsVisible"
        },
        {
            "contents": "AnimInProgress",
            "trigger": "Boolean CUILayer.AnimInProgress"
        },
        {
            "contents": "Type",
            "trigger": "EUILayerType CUILayer.Type"
        },
        {
            "contents": "InAnimation",
            "trigger": "EUILayerAnimation CUILayer.InAnimation"
        },
        {
            "contents": "OutAnimation",
            "trigger": "EUILayerAnimation CUILayer.OutAnimation"
        },
        {
            "contents": "InOutAnimation",
            "trigger": "EUILayerAnimation CUILayer.InOutAnimation"
        },
        {
            "contents": "AttachId",
            "trigger": "Text CUILayer.AttachId"
        },
        {
            "contents": "ManialinkPage",
            "trigger": "Text CUILayer.ManialinkPage"
        },
        {
            "contents": "LocalPage",
            "trigger": "CMlPage CUILayer.LocalPage"
        },
        {
            "contents": "IsLocalPageScriptRunning",
            "trigger": "Boolean CUILayer.IsLocalPageScriptRunning"
        },
        {
            "contents": "CSmMapObjectAnchor",
            "trigger": "CSmMapObjectAnchor"
        },
        {
            "contents": "ItemName",
            "trigger": "Text CSmMapObjectAnchor.ItemName"
        },
        {
            "contents": "ItemModelId",
            "trigger": "Ident CSmMapObjectAnchor.ItemModelId"
        },
        {
            "contents": "CNotificationsConsumerEvent",
            "trigger": "CNotificationsConsumerEvent"
        },
        {
            "contents": "CNotificationsConsumerEvent::EType::NewNotification",
            "trigger": "CNotificationsConsumerEvent::EType::NewNotification"
        },
        {
            "contents": "CNotificationsConsumerEvent::EType::NotificationChanged",
            "trigger": "CNotificationsConsumerEvent::EType::NotificationChanged"
        },
        {
            "contents": "Type",
            "trigger": "EType CNotificationsConsumerEvent.Type"
        },
        {
            "contents": "Notification",
            "trigger": "CNotificationsConsumerNotification CNotificationsConsumerEvent.Notification"
        },
        {
            "contents": "CModuleMenuPageModel",
            "trigger": "CModuleMenuPageModel"
        },
        {
            "contents": "ManialinkText",
            "trigger": "Text CModuleMenuPageModel.ManialinkText"
        },
        {
            "contents": "CPresenceMgr",
            "trigger": "CPresenceMgr"
        },
        {
            "contents": "CPresenceMgr::ERichPresence::Undefined",
            "trigger": "CPresenceMgr::ERichPresence::Undefined"
        },
        {
            "contents": "CPresenceMgr::ERichPresence::MainMenu",
            "trigger": "CPresenceMgr::ERichPresence::MainMenu"
        },
        {
            "contents": "CPresenceMgr::ERichPresence::Solo",
            "trigger": "CPresenceMgr::ERichPresence::Solo"
        },
        {
            "contents": "CPresenceMgr::ERichPresence::Multi",
            "trigger": "CPresenceMgr::ERichPresence::Multi"
        },
        {
            "contents": "CPresenceMgr::ERichPresence::Party",
            "trigger": "CPresenceMgr::ERichPresence::Party"
        },
        {
            "contents": "CPresenceMgr::ERichPresence::Create",
            "trigger": "CPresenceMgr::ERichPresence::Create"
        },
        {
            "contents": "TaskResults",
            "trigger": "CTaskResult[] CPresenceMgr.TaskResults"
        },
        {
            "contents": "ReleaseTaskResult(${0:Ident TaskId})",
            "trigger": "Void ReleaseTaskResult(Ident TaskId)"
        },
        {
            "contents": "SetPresence(${0:Ident UserId}, ${1:ERichPresence UplayFlow})",
            "trigger": "Void SetPresence(Ident UserId, ERichPresence UplayFlow)"
        },
        {
            "contents": "GetOnlinePresenceForPlayers(${0:Ident UserId})",
            "trigger": "CTaskResult_GetOnlinePresence GetOnlinePresenceForPlayers(Ident UserId)"
        },
        {
            "contents": "CHttpManager",
            "trigger": "CHttpManager"
        },
        {
            "contents": "Requests",
            "trigger": "CHttpRequest[] CHttpManager.Requests"
        },
        {
            "contents": "SlotsAvailable",
            "trigger": "Integer CHttpManager.SlotsAvailable"
        },
        {
            "contents": "AutomaticHeaders_Timezone",
            "trigger": "Boolean CHttpManager.AutomaticHeaders_Timezone"
        },
        {
            "contents": "CreateGet(${0:Text Url})",
            "trigger": "CHttpRequest CreateGet(Text Url)"
        },
        {
            "contents": "CreateGet(${0:Text Url}, ${1:Boolean UseCache})",
            "trigger": "CHttpRequest CreateGet(Text Url, Boolean UseCache)"
        },
        {
            "contents": "CreateGet(${0:Text Url}, ${1:Boolean UseCache}, ${2:Text AdditionalHeaders})",
            "trigger": "CHttpRequest CreateGet(Text Url, Boolean UseCache, Text AdditionalHeaders)"
        },
        {
            "contents": "CreatePost(${0:Text Url}, ${1:Text Resource})",
            "trigger": "CHttpRequest CreatePost(Text Url, Text Resource)"
        },
        {
            "contents": "CreatePost(${0:Text Url}, ${1:Text Resource}, ${2:Text AdditionalHeaders})",
            "trigger": "CHttpRequest CreatePost(Text Url, Text Resource, Text AdditionalHeaders)"
        },
        {
            "contents": "Destroy(${0:CHttpRequest Request})",
            "trigger": "Void Destroy(CHttpRequest Request)"
        },
        {
            "contents": "IsValidUrl(${0:Text Url})",
            "trigger": "Boolean IsValidUrl(Text Url)"
        },
        {
            "contents": "CAnimManager",
            "trigger": "CAnimManager"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::Linear",
            "trigger": "CAnimManager::EAnimManagerEasing::Linear"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::QuadIn",
            "trigger": "CAnimManager::EAnimManagerEasing::QuadIn"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::QuadOut",
            "trigger": "CAnimManager::EAnimManagerEasing::QuadOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::QuadInOut",
            "trigger": "CAnimManager::EAnimManagerEasing::QuadInOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::CubicIn",
            "trigger": "CAnimManager::EAnimManagerEasing::CubicIn"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::CubicOut",
            "trigger": "CAnimManager::EAnimManagerEasing::CubicOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::CubicInOut",
            "trigger": "CAnimManager::EAnimManagerEasing::CubicInOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::QuartIn",
            "trigger": "CAnimManager::EAnimManagerEasing::QuartIn"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::QuartOut",
            "trigger": "CAnimManager::EAnimManagerEasing::QuartOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::QuartInOut",
            "trigger": "CAnimManager::EAnimManagerEasing::QuartInOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::QuintIn",
            "trigger": "CAnimManager::EAnimManagerEasing::QuintIn"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::QuintOut",
            "trigger": "CAnimManager::EAnimManagerEasing::QuintOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::QuintInOut",
            "trigger": "CAnimManager::EAnimManagerEasing::QuintInOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::SineIn",
            "trigger": "CAnimManager::EAnimManagerEasing::SineIn"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::SineOut",
            "trigger": "CAnimManager::EAnimManagerEasing::SineOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::SineInOut",
            "trigger": "CAnimManager::EAnimManagerEasing::SineInOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::ExpIn",
            "trigger": "CAnimManager::EAnimManagerEasing::ExpIn"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::ExpOut",
            "trigger": "CAnimManager::EAnimManagerEasing::ExpOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::ExpInOut",
            "trigger": "CAnimManager::EAnimManagerEasing::ExpInOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::CircIn",
            "trigger": "CAnimManager::EAnimManagerEasing::CircIn"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::CircOut",
            "trigger": "CAnimManager::EAnimManagerEasing::CircOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::CircInOut",
            "trigger": "CAnimManager::EAnimManagerEasing::CircInOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::BackIn",
            "trigger": "CAnimManager::EAnimManagerEasing::BackIn"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::BackOut",
            "trigger": "CAnimManager::EAnimManagerEasing::BackOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::BackInOut",
            "trigger": "CAnimManager::EAnimManagerEasing::BackInOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::ElasticIn",
            "trigger": "CAnimManager::EAnimManagerEasing::ElasticIn"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::ElasticOut",
            "trigger": "CAnimManager::EAnimManagerEasing::ElasticOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::ElasticInOut",
            "trigger": "CAnimManager::EAnimManagerEasing::ElasticInOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::ElasticIn2",
            "trigger": "CAnimManager::EAnimManagerEasing::ElasticIn2"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::ElasticOut2",
            "trigger": "CAnimManager::EAnimManagerEasing::ElasticOut2"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::ElasticInOut2",
            "trigger": "CAnimManager::EAnimManagerEasing::ElasticInOut2"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::BounceIn",
            "trigger": "CAnimManager::EAnimManagerEasing::BounceIn"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::BounceOut",
            "trigger": "CAnimManager::EAnimManagerEasing::BounceOut"
        },
        {
            "contents": "CAnimManager::EAnimManagerEasing::BounceInOut",
            "trigger": "CAnimManager::EAnimManagerEasing::BounceInOut"
        },
        {
            "contents": "Add(${0:CMlControl Control}, ${1:Text XmlTarget}, ${2:Integer StartTime}, ${3:Integer Duration}, ${4:EAnimManagerEasing EasingFunc})",
            "trigger": "Void Add(CMlControl Control, Text XmlTarget, Integer StartTime, Integer Duration, EAnimManagerEasing EasingFunc)"
        },
        {
            "contents": "AddChain(${0:CMlControl Control}, ${1:Text XmlTarget}, ${2:Integer Duration}, ${3:EAnimManagerEasing EasingFunc})",
            "trigger": "Void AddChain(CMlControl Control, Text XmlTarget, Integer Duration, EAnimManagerEasing EasingFunc)"
        },
        {
            "contents": "Add(${0:CMlControl Control}, ${1:Text XmlTarget}, ${2:Integer Duration}, ${3:EAnimManagerEasing EasingFunc})",
            "trigger": "Void Add(CMlControl Control, Text XmlTarget, Integer Duration, EAnimManagerEasing EasingFunc)"
        },
        {
            "contents": "CManiaAppTitle",
            "trigger": "CManiaAppTitle"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CManiaAppEvent[] CManiaAppTitle.PendingEvents"
        },
        {
            "contents": "LoadingScreenRequireKeyPressed",
            "trigger": "Boolean CManiaAppTitle.LoadingScreenRequireKeyPressed"
        },
        {
            "contents": "DontScaleMainMenuForHMD",
            "trigger": "Boolean CManiaAppTitle.DontScaleMainMenuForHMD"
        },
        {
            "contents": "TitleFlow",
            "trigger": "CTitleFlow CManiaAppTitle.TitleFlow"
        },
        {
            "contents": "TitleControl",
            "trigger": "CTitleFlow CManiaAppTitle.TitleControl"
        },
        {
            "contents": "TitleEdition",
            "trigger": "CTitleEdition CManiaAppTitle.TitleEdition"
        },
        {
            "contents": "Notifications",
            "trigger": "CNotificationsConsumer CManiaAppTitle.Notifications"
        },
        {
            "contents": "ExternalRequest_Type",
            "trigger": "Text CManiaAppTitle.ExternalRequest_Type"
        },
        {
            "contents": "ExternalRequest_Data",
            "trigger": "Text[] CManiaAppTitle.ExternalRequest_Data"
        },
        {
            "contents": "AchievementsManager",
            "trigger": "CAchievementsManager CManiaAppTitle.AchievementsManager"
        },
        {
            "contents": "BadgeManager",
            "trigger": "CBadgeManager CManiaAppTitle.BadgeManager"
        },
        {
            "contents": "Authentication_GetTokenResponseReceived",
            "trigger": "Boolean CManiaAppTitle.Authentication_GetTokenResponseReceived"
        },
        {
            "contents": "Authentication_ErrorCode",
            "trigger": "Integer CManiaAppTitle.Authentication_ErrorCode"
        },
        {
            "contents": "Authentication_Token",
            "trigger": "Text CManiaAppTitle.Authentication_Token"
        },
        {
            "contents": "Menu_Quit()",
            "trigger": "Void Menu_Quit()"
        },
        {
            "contents": "Menu_Home()",
            "trigger": "Void Menu_Home()"
        },
        {
            "contents": "Menu_Solo()",
            "trigger": "Void Menu_Solo()"
        },
        {
            "contents": "Menu_Local()",
            "trigger": "Void Menu_Local()"
        },
        {
            "contents": "Menu_Internet()",
            "trigger": "Void Menu_Internet()"
        },
        {
            "contents": "Menu_Editor()",
            "trigger": "Void Menu_Editor()"
        },
        {
            "contents": "Menu_Profile()",
            "trigger": "Void Menu_Profile()"
        },
        {
            "contents": "PlayMap(${0:Text Map})",
            "trigger": "Void PlayMap(Text Map)"
        },
        {
            "contents": "ExternalRequest_Clear()",
            "trigger": "Void ExternalRequest_Clear()"
        },
        {
            "contents": "Authentication_GetToken(${0:Ident UserId}, ${1:Text AppLogin})",
            "trigger": "Void Authentication_GetToken(Ident UserId, Text AppLogin)"
        },
        {
            "contents": "CItemAnchor",
            "trigger": "CItemAnchor"
        },
        {
            "contents": "CItemAnchor::CardinalDirections::North",
            "trigger": "CItemAnchor::CardinalDirections::North"
        },
        {
            "contents": "CItemAnchor::CardinalDirections::East",
            "trigger": "CItemAnchor::CardinalDirections::East"
        },
        {
            "contents": "CItemAnchor::CardinalDirections::South",
            "trigger": "CItemAnchor::CardinalDirections::South"
        },
        {
            "contents": "CItemAnchor::CardinalDirections::West",
            "trigger": "CItemAnchor::CardinalDirections::West"
        },
        {
            "contents": "Position",
            "trigger": "Vec3 CItemAnchor.Position"
        },
        {
            "contents": "CBlock",
            "trigger": "CBlock"
        },
        {
            "contents": "CBlock::CardinalDirections::North",
            "trigger": "CBlock::CardinalDirections::North"
        },
        {
            "contents": "CBlock::CardinalDirections::East",
            "trigger": "CBlock::CardinalDirections::East"
        },
        {
            "contents": "CBlock::CardinalDirections::South",
            "trigger": "CBlock::CardinalDirections::South"
        },
        {
            "contents": "CBlock::CardinalDirections::West",
            "trigger": "CBlock::CardinalDirections::West"
        },
        {
            "contents": "BlockScriptId",
            "trigger": "Integer CBlock.BlockScriptId"
        },
        {
            "contents": "CanHaveAnchor",
            "trigger": "Boolean CBlock.CanHaveAnchor"
        },
        {
            "contents": "Coord",
            "trigger": "Int3 CBlock.Coord"
        },
        {
            "contents": "Direction",
            "trigger": "CardinalDirections CBlock.Direction"
        },
        {
            "contents": "BlockUnits",
            "trigger": "CBlockUnit[] CBlock.BlockUnits"
        },
        {
            "contents": "BlockModel",
            "trigger": "CBlockModel CBlock.BlockModel"
        },
        {
            "contents": "UseDefaultAnchor()",
            "trigger": "Void UseDefaultAnchor()"
        },
        {
            "contents": "UseCustomAnchor()",
            "trigger": "Void UseCustomAnchor()"
        },
        {
            "contents": "CModuleMenuModel",
            "trigger": "CModuleMenuModel"
        },
        {
            "contents": "Pages",
            "trigger": "CModuleMenuPageModel[] CModuleMenuModel.Pages"
        },
        {
            "contents": "MenuScript",
            "trigger": "Text CModuleMenuModel.MenuScript"
        },
        {
            "contents": "AddPage(${0:Text PageUrl})",
            "trigger": "CModuleMenuPageModel AddPage(Text PageUrl)"
        },
        {
            "contents": "AddLink(${0:CModuleMenuPageModel ParentPage}, ${1:CModuleMenuPageModel ChildPage})",
            "trigger": "Void AddLink(CModuleMenuPageModel ParentPage, CModuleMenuPageModel ChildPage)"
        },
        {
            "contents": "CEditorAsset",
            "trigger": "CEditorAsset"
        },
        {
            "contents": "CVideoManager",
            "trigger": "CVideoManager"
        },
        {
            "contents": "Videos",
            "trigger": "CVideo[] CVideoManager.Videos"
        },
        {
            "contents": "CreateVideo(${0:Text Url}, ${1:Boolean IsLooping}, ${2:Boolean AutoProcessing})",
            "trigger": "CVideo CreateVideo(Text Url, Boolean IsLooping, Boolean AutoProcessing)"
        },
        {
            "contents": "DestroyVideo(${0:CVideo Video})",
            "trigger": "Void DestroyVideo(CVideo Video)"
        },
        {
            "contents": "CCampaign",
            "trigger": "CCampaign"
        },
        {
            "contents": "CCampaign::EType::None",
            "trigger": "CCampaign::EType::None"
        },
        {
            "contents": "CCampaign::EType::Race",
            "trigger": "CCampaign::EType::Race"
        },
        {
            "contents": "CCampaign::EType::Puzzle",
            "trigger": "CCampaign::EType::Puzzle"
        },
        {
            "contents": "CCampaign::EType::Survival",
            "trigger": "CCampaign::EType::Survival"
        },
        {
            "contents": "CCampaign::EType::Platform",
            "trigger": "CCampaign::EType::Platform"
        },
        {
            "contents": "CCampaign::EType::Stunts",
            "trigger": "CCampaign::EType::Stunts"
        },
        {
            "contents": "CCampaign::EType::Training",
            "trigger": "CCampaign::EType::Training"
        },
        {
            "contents": "CCampaign::ERequiredPlayersCount::Only",
            "trigger": "CCampaign::ERequiredPlayersCount::Only"
        },
        {
            "contents": "CCampaign::ERequiredPlayersCount::Only",
            "trigger": "CCampaign::ERequiredPlayersCount::Only"
        },
        {
            "contents": "CCampaign::ERequiredPlayersCount::Only",
            "trigger": "CCampaign::ERequiredPlayersCount::Only"
        },
        {
            "contents": "CCampaign::ERequiredPlayersCount::Only",
            "trigger": "CCampaign::ERequiredPlayersCount::Only"
        },
        {
            "contents": "CCampaign::ERequiredPlayersCount::Only",
            "trigger": "CCampaign::ERequiredPlayersCount::Only"
        },
        {
            "contents": "CCampaign::ERequiredPlayersCount::All",
            "trigger": "CCampaign::ERequiredPlayersCount::All"
        },
        {
            "contents": "CCampaign::EUnlockType::Row",
            "trigger": "CCampaign::EUnlockType::Row"
        },
        {
            "contents": "CCampaign::EUnlockType::Column",
            "trigger": "CCampaign::EUnlockType::Column"
        },
        {
            "contents": "CCampaign::EUnlockType::Custom",
            "trigger": "CCampaign::EUnlockType::Custom"
        },
        {
            "contents": "CCampaign::EMedal::None",
            "trigger": "CCampaign::EMedal::None"
        },
        {
            "contents": "CCampaign::EMedal::Finished",
            "trigger": "CCampaign::EMedal::Finished"
        },
        {
            "contents": "CCampaign::EMedal::Bronze",
            "trigger": "CCampaign::EMedal::Bronze"
        },
        {
            "contents": "CCampaign::EMedal::Silver",
            "trigger": "CCampaign::EMedal::Silver"
        },
        {
            "contents": "CCampaign::EMedal::Gold",
            "trigger": "CCampaign::EMedal::Gold"
        },
        {
            "contents": "CCampaign::EMedal::Author",
            "trigger": "CCampaign::EMedal::Author"
        },
        {
            "contents": "CampaignId",
            "trigger": "Text CCampaign.CampaignId"
        },
        {
            "contents": "MapGroups",
            "trigger": "CMapGroup[] CCampaign.MapGroups"
        },
        {
            "contents": "ScoreContext",
            "trigger": "Text CCampaign.ScoreContext"
        },
        {
            "contents": "OfficialRecordEnabled",
            "trigger": "Boolean CCampaign.OfficialRecordEnabled"
        },
        {
            "contents": "GetMapGroupCount()",
            "trigger": "Integer GetMapGroupCount()"
        },
        {
            "contents": "GetMapGroup(${0:Integer Index})",
            "trigger": "CMapGroup GetMapGroup(Integer Index)"
        },
        {
            "contents": "GetNextMap(${0:CMapInfo CurrentMapInfo})",
            "trigger": "CMapInfo GetNextMap(CMapInfo CurrentMapInfo)"
        },
        {
            "contents": "CSmMode",
            "trigger": "CSmMode"
        },
        {
            "contents": "CSmMode::EWeapon::Laser",
            "trigger": "CSmMode::EWeapon::Laser"
        },
        {
            "contents": "CSmMode::EWeapon::Rocket",
            "trigger": "CSmMode::EWeapon::Rocket"
        },
        {
            "contents": "CSmMode::EWeapon::Nucleus",
            "trigger": "CSmMode::EWeapon::Nucleus"
        },
        {
            "contents": "CSmMode::EWeapon::Arrow",
            "trigger": "CSmMode::EWeapon::Arrow"
        },
        {
            "contents": "CSmMode::EWeapon::Missile",
            "trigger": "CSmMode::EWeapon::Missile"
        },
        {
            "contents": "CSmMode::EActionSlot::Slot_A",
            "trigger": "CSmMode::EActionSlot::Slot_A"
        },
        {
            "contents": "CSmMode::EActionSlot::Slot_B",
            "trigger": "CSmMode::EActionSlot::Slot_B"
        },
        {
            "contents": "CSmMode::EActionSlot::Slot_C",
            "trigger": "CSmMode::EActionSlot::Slot_C"
        },
        {
            "contents": "CSmMode::EActionSlot::Slot_D",
            "trigger": "CSmMode::EActionSlot::Slot_D"
        },
        {
            "contents": "CSmMode::EActionSlot::Slot_E",
            "trigger": "CSmMode::EActionSlot::Slot_E"
        },
        {
            "contents": "CSmMode::EActionSlot::Slot_F",
            "trigger": "CSmMode::EActionSlot::Slot_F"
        },
        {
            "contents": "CSmMode::EActionSlot::Slot_G",
            "trigger": "CSmMode::EActionSlot::Slot_G"
        },
        {
            "contents": "CSmMode::EActionSlot::Slot_H",
            "trigger": "CSmMode::EActionSlot::Slot_H"
        },
        {
            "contents": "CSmMode::EActionInput::Weapon",
            "trigger": "CSmMode::EActionInput::Weapon"
        },
        {
            "contents": "CSmMode::EActionInput::Movement",
            "trigger": "CSmMode::EActionInput::Movement"
        },
        {
            "contents": "CSmMode::EActionInput::Activable1",
            "trigger": "CSmMode::EActionInput::Activable1"
        },
        {
            "contents": "CSmMode::EActionInput::Activable2",
            "trigger": "CSmMode::EActionInput::Activable2"
        },
        {
            "contents": "CSmMode::EActionInput::Activable3",
            "trigger": "CSmMode::EActionInput::Activable3"
        },
        {
            "contents": "CSmMode::EActionInput::Activable4",
            "trigger": "CSmMode::EActionInput::Activable4"
        },
        {
            "contents": "CSmMode::EActionInput::Consumable1",
            "trigger": "CSmMode::EActionInput::Consumable1"
        },
        {
            "contents": "CSmMode::EActionInput::Consumable2",
            "trigger": "CSmMode::EActionInput::Consumable2"
        },
        {
            "contents": "CSmMode::EActionInput::None",
            "trigger": "CSmMode::EActionInput::None"
        },
        {
            "contents": "CSmMode::EGameplay::Default",
            "trigger": "CSmMode::EGameplay::Default"
        },
        {
            "contents": "CSmMode::EGameplay::Mp3Beta0",
            "trigger": "CSmMode::EGameplay::Mp3Beta0"
        },
        {
            "contents": "StartTime",
            "trigger": "Integer CSmMode.StartTime"
        },
        {
            "contents": "EndTime",
            "trigger": "Integer CSmMode.EndTime"
        },
        {
            "contents": "SpawnInvulnerabilityDuration",
            "trigger": "Integer CSmMode.SpawnInvulnerabilityDuration"
        },
        {
            "contents": "UseClans",
            "trigger": "Boolean CSmMode.UseClans"
        },
        {
            "contents": "UseForcedClans",
            "trigger": "Boolean CSmMode.UseForcedClans"
        },
        {
            "contents": "UsePvPCollisions",
            "trigger": "Boolean CSmMode.UsePvPCollisions"
        },
        {
            "contents": "UsePvPWeapons",
            "trigger": "Boolean CSmMode.UsePvPWeapons"
        },
        {
            "contents": "UseInterractiveScreensIn3d",
            "trigger": "Boolean CSmMode.UseInterractiveScreensIn3d"
        },
        {
            "contents": "UseLaserVsBullets",
            "trigger": "Boolean CSmMode.UseLaserVsBullets"
        },
        {
            "contents": "UseLaserSkewering",
            "trigger": "Boolean CSmMode.UseLaserSkewering"
        },
        {
            "contents": "UsePlayerTagging",
            "trigger": "Boolean CSmMode.UsePlayerTagging"
        },
        {
            "contents": "UseBeaconsWithRecipients",
            "trigger": "Boolean CSmMode.UseBeaconsWithRecipients"
        },
        {
            "contents": "UseAmmoBonusOnHit",
            "trigger": "Boolean CSmMode.UseAmmoBonusOnHit"
        },
        {
            "contents": "UseSameWallJump",
            "trigger": "Boolean CSmMode.UseSameWallJump"
        },
        {
            "contents": "UseDefaultActionEvents",
            "trigger": "Boolean CSmMode.UseDefaultActionEvents"
        },
        {
            "contents": "UseAllies",
            "trigger": "Boolean CSmMode.UseAllies"
        },
        {
            "contents": "UseAutoSpawnBots",
            "trigger": "Boolean CSmMode.UseAutoSpawnBots"
        },
        {
            "contents": "UseAutoRespawnBots",
            "trigger": "Boolean CSmMode.UseAutoRespawnBots"
        },
        {
            "contents": "WalkOnWall",
            "trigger": "Boolean CSmMode.WalkOnWall"
        },
        {
            "contents": "UseAutoDiscardBotEvents",
            "trigger": "Boolean CSmMode.UseAutoDiscardBotEvents"
        },
        {
            "contents": "ForceNavMapsComputation",
            "trigger": "Boolean CSmMode.ForceNavMapsComputation"
        },
        {
            "contents": "GameplayVersion",
            "trigger": "Integer CSmMode.GameplayVersion"
        },
        {
            "contents": "Gameplay",
            "trigger": "EGameplay CSmMode.Gameplay"
        },
        {
            "contents": "UseProtectClanmates",
            "trigger": "Boolean CSmMode.UseProtectClanmates"
        },
        {
            "contents": "OffZoneRadius",
            "trigger": "Real CSmMode.OffZoneRadius"
        },
        {
            "contents": "OffZoneRadiusSpeed",
            "trigger": "Real CSmMode.OffZoneRadiusSpeed"
        },
        {
            "contents": "OffZoneCenterLandmarkId",
            "trigger": "Ident CSmMode.OffZoneCenterLandmarkId"
        },
        {
            "contents": "PlayersNbTotal",
            "trigger": "Integer CSmMode.PlayersNbTotal"
        },
        {
            "contents": "PlayersNbAlive",
            "trigger": "Integer CSmMode.PlayersNbAlive"
        },
        {
            "contents": "PlayersNbDead",
            "trigger": "Integer CSmMode.PlayersNbDead"
        },
        {
            "contents": "ClansNbTotal",
            "trigger": "Integer CSmMode.ClansNbTotal"
        },
        {
            "contents": "ClansNbAlive",
            "trigger": "Integer CSmMode.ClansNbAlive"
        },
        {
            "contents": "ClansNbDead",
            "trigger": "Integer CSmMode.ClansNbDead"
        },
        {
            "contents": "ClansNbPlayers",
            "trigger": "Integer[] CSmMode.ClansNbPlayers"
        },
        {
            "contents": "ClansNbPlayersAlive",
            "trigger": "Integer[] CSmMode.ClansNbPlayersAlive"
        },
        {
            "contents": "Players",
            "trigger": "CSmPlayer[] CSmMode.Players"
        },
        {
            "contents": "BotPlayers",
            "trigger": "CSmPlayer[] CSmMode.BotPlayers"
        },
        {
            "contents": "Spectators",
            "trigger": "CSmPlayer[] CSmMode.Spectators"
        },
        {
            "contents": "AllPlayers",
            "trigger": "CSmPlayer[] CSmMode.AllPlayers"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CSmModeEvent[] CSmMode.PendingEvents"
        },
        {
            "contents": "MapBases",
            "trigger": "CSmMapBase[] CSmMode.MapBases"
        },
        {
            "contents": "MapLandmarks",
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks"
        },
        {
            "contents": "MapLandmarks_PlayerSpawn",
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks_PlayerSpawn"
        },
        {
            "contents": "MapLandmarks_Gauge",
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks_Gauge"
        },
        {
            "contents": "MapLandmarks_Sector",
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks_Sector"
        },
        {
            "contents": "MapLandmarks_BotPath",
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks_BotPath"
        },
        {
            "contents": "MapLandmarks_BotSpawn",
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks_BotSpawn"
        },
        {
            "contents": "MapLandmarks_ObjectAnchor",
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks_ObjectAnchor"
        },
        {
            "contents": "MapLandmarks_Gate",
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks_Gate"
        },
        {
            "contents": "Scores",
            "trigger": "CSmScore[] CSmMode.Scores"
        },
        {
            "contents": "ClanScores",
            "trigger": "Integer[] CSmMode.ClanScores"
        },
        {
            "contents": "Objects",
            "trigger": "CSmObject[] CSmMode.Objects"
        },
        {
            "contents": "PassOn(${0:CSmModeEvent Event})",
            "trigger": "Void PassOn(CSmModeEvent Event)"
        },
        {
            "contents": "Discard(${0:CSmModeEvent Event})",
            "trigger": "Void Discard(CSmModeEvent Event)"
        },
        {
            "contents": "SpawnPlayer(${0:CSmPlayer Player}, ${1:Integer ClanNum}, ${2:Integer Armor}, ${3:CSmMapPlayerSpawn PlayerSpawn}, ${4:Integer ActivationDate})",
            "trigger": "Void SpawnPlayer(CSmPlayer Player, Integer ClanNum, Integer Armor, CSmMapPlayerSpawn PlayerSpawn, Integer ActivationDate)"
        },
        {
            "contents": "SpawnBotPlayer(${0:CSmPlayer Player}, ${1:Integer ClanNum}, ${2:Integer Armor}, ${3:CSmMapPlayerSpawn PlayerSpawn}, ${4:Integer ActivationDate})",
            "trigger": "Void SpawnBotPlayer(CSmPlayer Player, Integer ClanNum, Integer Armor, CSmMapPlayerSpawn PlayerSpawn, Integer ActivationDate)"
        },
        {
            "contents": "SpawnBotPlayer(${0:CSmPlayer Player}, ${1:Integer ClanNum}, ${2:Integer Armor}, ${3:CSmMapBotPath BotPath}, ${4:Integer ActivationDate})",
            "trigger": "Void SpawnBotPlayer(CSmPlayer Player, Integer ClanNum, Integer Armor, CSmMapBotPath BotPath, Integer ActivationDate)"
        },
        {
            "contents": "SpawnBotPlayer(${0:CSmPlayer Player}, ${1:Integer ClanNum}, ${2:Integer Armor}, ${3:CSmMapBotSpawn BotSpawn}, ${4:Integer ActivationDate})",
            "trigger": "Void SpawnBotPlayer(CSmPlayer Player, Integer ClanNum, Integer Armor, CSmMapBotSpawn BotSpawn, Integer ActivationDate)"
        },
        {
            "contents": "SpawnBotPlayer(${0:CSmPlayer Player}, ${1:CSmPlayer Owner}, ${2:Integer Armor}, ${3:Vec3 Offset}, ${4:Integer ActivationDate})",
            "trigger": "Void SpawnBotPlayer(CSmPlayer Player, CSmPlayer Owner, Integer Armor, Vec3 Offset, Integer ActivationDate)"
        },
        {
            "contents": "UnspawnPlayer(${0:CSmPlayer Player})",
            "trigger": "Void UnspawnPlayer(CSmPlayer Player)"
        },
        {
            "contents": "ClearScores()",
            "trigger": "Void ClearScores()"
        },
        {
            "contents": "SetPlayerClan(${0:CSmPlayer Player}, ${1:Integer ClanNum})",
            "trigger": "Void SetPlayerClan(CSmPlayer Player, Integer ClanNum)"
        },
        {
            "contents": "SetPlayerWeapon(${0:CSmPlayer Player}, ${1:EWeapon DefaultWeapon}, ${2:Boolean AutoSwitchWeapon})",
            "trigger": "Void SetPlayerWeapon(CSmPlayer Player, EWeapon DefaultWeapon, Boolean AutoSwitchWeapon)"
        },
        {
            "contents": "SetPlayerReloadAllWeapons(${0:CSmPlayer Player}, ${1:Boolean ReloadAllWeapons})",
            "trigger": "Void SetPlayerReloadAllWeapons(CSmPlayer Player, Boolean ReloadAllWeapons)"
        },
        {
            "contents": "SetPlayerAmmo(${0:CSmPlayer Player}, ${1:EWeapon Weapon}, ${2:Integer Count})",
            "trigger": "Void SetPlayerAmmo(CSmPlayer Player, EWeapon Weapon, Integer Count)"
        },
        {
            "contents": "GetPlayerAmmo(${0:CSmPlayer Player}, ${1:EWeapon Weapon})",
            "trigger": "Integer GetPlayerAmmo(CSmPlayer Player, EWeapon Weapon)"
        },
        {
            "contents": "AddPlayerAmmo(${0:CSmPlayer Player}, ${1:EWeapon Weapon}, ${2:Real DeltaCount})",
            "trigger": "Void AddPlayerAmmo(CSmPlayer Player, EWeapon Weapon, Real DeltaCount)"
        },
        {
            "contents": "SetPlayerAmmoMax(${0:CSmPlayer Player}, ${1:EWeapon Weapon}, ${2:Integer Count})",
            "trigger": "Void SetPlayerAmmoMax(CSmPlayer Player, EWeapon Weapon, Integer Count)"
        },
        {
            "contents": "GetPlayerAmmoMax(${0:CSmPlayer Player}, ${1:EWeapon Weapon})",
            "trigger": "Integer GetPlayerAmmoMax(CSmPlayer Player, EWeapon Weapon)"
        },
        {
            "contents": "AddPlayerArmor(${0:CSmPlayer Victim}, ${1:Integer DeltaArmor}, ${2:CSmPlayer Shooter}, ${3:Integer ShooterPoints})",
            "trigger": "Void AddPlayerArmor(CSmPlayer Victim, Integer DeltaArmor, CSmPlayer Shooter, Integer ShooterPoints)"
        },
        {
            "contents": "RemovePlayerArmor(${0:CSmPlayer Victim}, ${1:Integer DeltaArmor}, ${2:CSmPlayer Shooter}, ${3:Integer ShooterPoints})",
            "trigger": "Void RemovePlayerArmor(CSmPlayer Victim, Integer DeltaArmor, CSmPlayer Shooter, Integer ShooterPoints)"
        },
        {
            "contents": "GetWeaponNum(${0:EWeapon Weapon})",
            "trigger": "Integer GetWeaponNum(EWeapon Weapon)"
        },
        {
            "contents": "CanRespawnPlayer(${0:CSmPlayer Player})",
            "trigger": "Boolean CanRespawnPlayer(CSmPlayer Player)"
        },
        {
            "contents": "RespawnPlayer(${0:CSmPlayer Player})",
            "trigger": "Void RespawnPlayer(CSmPlayer Player)"
        },
        {
            "contents": "RespawnPlayer(${0:CSmPlayer Player}, ${1:CSmMapLandmark CheckpointLandmark})",
            "trigger": "Void RespawnPlayer(CSmPlayer Player, CSmMapLandmark CheckpointLandmark)"
        },
        {
            "contents": "CreateBotPlayer(${0:Ident ModelId}, ${1:Integer TeamNum})",
            "trigger": "CSmPlayer CreateBotPlayer(Ident ModelId, Integer TeamNum)"
        },
        {
            "contents": "DestroyBotPlayer(${0:CSmPlayer BotPlayer})",
            "trigger": "Void DestroyBotPlayer(CSmPlayer BotPlayer)"
        },
        {
            "contents": "DestroyAllBotPlayers()",
            "trigger": "Void DestroyAllBotPlayers()"
        },
        {
            "contents": "ScriptedBot_Move(${0:CSmPlayer BotPlayer}, ${1:Vec3 Goal})",
            "trigger": "Void ScriptedBot_Move(CSmPlayer BotPlayer, Vec3 Goal)"
        },
        {
            "contents": "ScriptedBot_MoveDelta(${0:CSmPlayer BotPlayer}, ${1:Vec3 Delta})",
            "trigger": "Void ScriptedBot_MoveDelta(CSmPlayer BotPlayer, Vec3 Delta)"
        },
        {
            "contents": "ScriptedBot_MoveAndAim(${0:CSmPlayer BotPlayer}, ${1:Vec3 Goal})",
            "trigger": "Void ScriptedBot_MoveAndAim(CSmPlayer BotPlayer, Vec3 Goal)"
        },
        {
            "contents": "ScriptedBot_MoveDeltaAndAim(${0:CSmPlayer BotPlayer}, ${1:Vec3 Delta})",
            "trigger": "Void ScriptedBot_MoveDeltaAndAim(CSmPlayer BotPlayer, Vec3 Delta)"
        },
        {
            "contents": "ScriptedBot_Aim(${0:CSmPlayer BotPlayer}, ${1:Vec3 Goal})",
            "trigger": "Void ScriptedBot_Aim(CSmPlayer BotPlayer, Vec3 Goal)"
        },
        {
            "contents": "ScriptedBot_AimDelta(${0:CSmPlayer BotPlayer}, ${1:Real DeltaYaw}, ${2:Real DeltaPitch})",
            "trigger": "Void ScriptedBot_AimDelta(CSmPlayer BotPlayer, Real DeltaYaw, Real DeltaPitch)"
        },
        {
            "contents": "ScriptedBot_RequestAction(${0:CSmPlayer BotPlayer})",
            "trigger": "Void ScriptedBot_RequestAction(CSmPlayer BotPlayer)"
        },
        {
            "contents": "ScriptedBot_RequestGunTrigger(${0:CSmPlayer BotPlayer})",
            "trigger": "Void ScriptedBot_RequestGunTrigger(CSmPlayer BotPlayer)"
        },
        {
            "contents": "ActionLoad(${0:CSmPlayer Player}, ${1:EActionSlot ActionSlot}, ${2:Ident ModelId})",
            "trigger": "Void ActionLoad(CSmPlayer Player, EActionSlot ActionSlot, Ident ModelId)"
        },
        {
            "contents": "ActionBind(${0:CSmPlayer Player}, ${1:EActionSlot ActionSlot}, ${2:EActionInput ActionInput})",
            "trigger": "Void ActionBind(CSmPlayer Player, EActionSlot ActionSlot, EActionInput ActionInput)"
        },
        {
            "contents": "ActionSetVariant(${0:CSmPlayer Player}, ${1:EActionSlot ActionSlot}, ${2:Integer ActionVariant})",
            "trigger": "Void ActionSetVariant(CSmPlayer Player, EActionSlot ActionSlot, Integer ActionVariant)"
        },
        {
            "contents": "SetNbFakePlayers(${0:Integer NbClan1}, ${1:Integer NbClan2})",
            "trigger": "Void SetNbFakePlayers(Integer NbClan1, Integer NbClan2)"
        },
        {
            "contents": "ObjectCreate(${0:Ident ModelId})",
            "trigger": "CSmObject ObjectCreate(Ident ModelId)"
        },
        {
            "contents": "ObjectDestroy(${0:CSmObject Object})",
            "trigger": "Void ObjectDestroy(CSmObject Object)"
        },
        {
            "contents": "ObjectDestroyAll()",
            "trigger": "Void ObjectDestroyAll()"
        },
        {
            "contents": "RemoveShieldArmor(${0:Integer VictimShieldId}, ${1:Integer Damage})",
            "trigger": "Void RemoveShieldArmor(Integer VictimShieldId, Integer Damage)"
        },
        {
            "contents": "Replay_SaveAttackScore(${0:CSmPlayer Player}, ${1:Integer Score})",
            "trigger": "Void Replay_SaveAttackScore(CSmPlayer Player, Integer Score)"
        },
        {
            "contents": "Replay_SaveDefenseScore(${0:CSmPlayer Player}, ${1:Integer Score})",
            "trigger": "Void Replay_SaveDefenseScore(CSmPlayer Player, Integer Score)"
        },
        {
            "contents": "Replay_SaveTeamScore(${0:Integer Team}, ${1:Integer Score})",
            "trigger": "Void Replay_SaveTeamScore(Integer Team, Integer Score)"
        },
        {
            "contents": "Replay_SavePlayerOfInterest(${0:CSmPlayer Player})",
            "trigger": "Void Replay_SavePlayerOfInterest(CSmPlayer Player)"
        },
        {
            "contents": "Replay_SaveWinner(${0:CSmPlayer Player})",
            "trigger": "Void Replay_SaveWinner(CSmPlayer Player)"
        },
        {
            "contents": "Replay_SaveInterface()",
            "trigger": "Void Replay_SaveInterface()"
        },
        {
            "contents": "CAnchorData",
            "trigger": "CAnchorData"
        },
        {
            "contents": "DefaultTag",
            "trigger": "Text CAnchorData.DefaultTag"
        },
        {
            "contents": "DefaultOrder",
            "trigger": "Integer CAnchorData.DefaultOrder"
        },
        {
            "contents": "Tag",
            "trigger": "Text CAnchorData.Tag"
        },
        {
            "contents": "Order",
            "trigger": "Integer CAnchorData.Order"
        },
        {
            "contents": "Block",
            "trigger": "CBlock CAnchorData.Block"
        },
        {
            "contents": "Item",
            "trigger": "CItemAnchor CAnchorData.Item"
        },
        {
            "contents": "CMlLabel",
            "trigger": "CMlLabel"
        },
        {
            "contents": "CMlLabel::EBlendMode::Default",
            "trigger": "CMlLabel::EBlendMode::Default"
        },
        {
            "contents": "CMlLabel::EBlendMode::Add",
            "trigger": "CMlLabel::EBlendMode::Add"
        },
        {
            "contents": "Style",
            "trigger": "Text CMlLabel.Style"
        },
        {
            "contents": "Substyle",
            "trigger": "Text CMlLabel.Substyle"
        },
        {
            "contents": "TextFont",
            "trigger": "Text CMlLabel.TextFont"
        },
        {
            "contents": "Value",
            "trigger": "Text CMlLabel.Value"
        },
        {
            "contents": "ValueLineCount",
            "trigger": "Integer CMlLabel.ValueLineCount"
        },
        {
            "contents": "MaxLine",
            "trigger": "Integer CMlLabel.MaxLine"
        },
        {
            "contents": "LineSpacing",
            "trigger": "Real CMlLabel.LineSpacing"
        },
        {
            "contents": "AppendEllipsis",
            "trigger": "Boolean CMlLabel.AppendEllipsis"
        },
        {
            "contents": "AutoNewLine",
            "trigger": "Boolean CMlLabel.AutoNewLine"
        },
        {
            "contents": "Opacity",
            "trigger": "Real CMlLabel.Opacity"
        },
        {
            "contents": "TextColor",
            "trigger": "Vec3 CMlLabel.TextColor"
        },
        {
            "contents": "TextSizeReal",
            "trigger": "Real CMlLabel.TextSizeReal"
        },
        {
            "contents": "Blend",
            "trigger": "EBlendMode CMlLabel.Blend"
        },
        {
            "contents": "SetText(${0:Text NewText})",
            "trigger": "Void SetText(Text NewText)"
        },
        {
            "contents": "ComputeWidth(${0:Text Text})",
            "trigger": "Real ComputeWidth(Text Text)"
        },
        {
            "contents": "ComputeWidth(${0:Text Text}, ${1:Boolean Translated})",
            "trigger": "Real ComputeWidth(Text Text, Boolean Translated)"
        },
        {
            "contents": "ComputeHeight(${0:Text Text})",
            "trigger": "Real ComputeHeight(Text Text)"
        },
        {
            "contents": "CAchievementsEvent",
            "trigger": "CAchievementsEvent"
        },
        {
            "contents": "CAchievementsEvent::EType::NewAchievement",
            "trigger": "CAchievementsEvent::EType::NewAchievement"
        },
        {
            "contents": "Type",
            "trigger": "EType CAchievementsEvent.Type"
        },
        {
            "contents": "Achievement",
            "trigger": "CAchievementsAchievement CAchievementsEvent.Achievement"
        },
        {
            "contents": "CSmActionEvent",
            "trigger": "CSmActionEvent"
        },
        {
            "contents": "CSmActionEvent::EType::OnHitPlayer",
            "trigger": "CSmActionEvent::EType::OnHitPlayer"
        },
        {
            "contents": "CSmActionEvent::EType::OnProjectileEnd",
            "trigger": "CSmActionEvent::EType::OnProjectileEnd"
        },
        {
            "contents": "CSmActionEvent::EType::OnActiveChange",
            "trigger": "CSmActionEvent::EType::OnActiveChange"
        },
        {
            "contents": "CSmActionEvent::EType::OnHitObject",
            "trigger": "CSmActionEvent::EType::OnHitObject"
        },
        {
            "contents": "CSmActionEvent::EType::OnHitShield",
            "trigger": "CSmActionEvent::EType::OnHitShield"
        },
        {
            "contents": "CSmActionEvent::EType::OnShieldEnd",
            "trigger": "CSmActionEvent::EType::OnShieldEnd"
        },
        {
            "contents": "Type",
            "trigger": "EType CSmActionEvent.Type"
        },
        {
            "contents": "Player",
            "trigger": "CSmPlayer CSmActionEvent.Player"
        },
        {
            "contents": "Object",
            "trigger": "CSmObject CSmActionEvent.Object"
        },
        {
            "contents": "Damage",
            "trigger": "Integer CSmActionEvent.Damage"
        },
        {
            "contents": "ProjectileModelId",
            "trigger": "Ident CSmActionEvent.ProjectileModelId"
        },
        {
            "contents": "ContextId",
            "trigger": "Integer CSmActionEvent.ContextId"
        },
        {
            "contents": "Position",
            "trigger": "Vec3 CSmActionEvent.Position"
        },
        {
            "contents": "Direction",
            "trigger": "Vec3 CSmActionEvent.Direction"
        },
        {
            "contents": "Normal",
            "trigger": "Vec3 CSmActionEvent.Normal"
        },
        {
            "contents": "Shield",
            "trigger": "Integer CSmActionEvent.Shield"
        },
        {
            "contents": "CBadgeEditor",
            "trigger": "CBadgeEditor"
        },
        {
            "contents": "DisplayCurrentBadge",
            "trigger": "CBadge CBadgeEditor.DisplayCurrentBadge"
        },
        {
            "contents": "DisplayPosN",
            "trigger": "Vec2 CBadgeEditor.DisplayPosN"
        },
        {
            "contents": "DisplaySize",
            "trigger": "Vec2 CBadgeEditor.DisplaySize"
        },
        {
            "contents": "DisplayFoV",
            "trigger": "Real CBadgeEditor.DisplayFoV"
        },
        {
            "contents": "CameraTransitionDuration",
            "trigger": "Real CBadgeEditor.CameraTransitionDuration"
        },
        {
            "contents": "MeshRotation_MaxSpeed",
            "trigger": "Real CBadgeEditor.MeshRotation_MaxSpeed"
        },
        {
            "contents": "MeshRotation_Acceleration",
            "trigger": "Real CBadgeEditor.MeshRotation_Acceleration"
        },
        {
            "contents": "DisplayCurrentMeshId",
            "trigger": "Ident CBadgeEditor.DisplayCurrentMeshId"
        },
        {
            "contents": "MeshIds",
            "trigger": "Ident[] CBadgeEditor.MeshIds"
        },
        {
            "contents": "Badges",
            "trigger": "CBadge[] CBadgeEditor.Badges"
        },
        {
            "contents": "Leave()",
            "trigger": "Void Leave()"
        },
        {
            "contents": "MeshId_Next()",
            "trigger": "Void MeshId_Next()"
        },
        {
            "contents": "MeshId_Previous()",
            "trigger": "Void MeshId_Previous()"
        },
        {
            "contents": "BadgeCreate()",
            "trigger": "CBadge BadgeCreate()"
        },
        {
            "contents": "BadgeDestroy(${0:CBadge Badge})",
            "trigger": "Void BadgeDestroy(CBadge Badge)"
        },
        {
            "contents": "BadgeCopy(${0:CBadge Source}, ${1:CBadge Destination})",
            "trigger": "Void BadgeCopy(CBadge Source, CBadge Destination)"
        },
        {
            "contents": "BadgeReadFromProfile(${0:CBadge Badge}, ${1:Ident UserId})",
            "trigger": "Void BadgeReadFromProfile(CBadge Badge, Ident UserId)"
        },
        {
            "contents": "BadgeWriteToProfile(${0:CBadge Badge}, ${1:Ident UserId})",
            "trigger": "Void BadgeWriteToProfile(CBadge Badge, Ident UserId)"
        },
        {
            "contents": "CManiaApp",
            "trigger": "CManiaApp"
        },
        {
            "contents": "CManiaApp::ELinkType::ExternalBrowser",
            "trigger": "CManiaApp::ELinkType::ExternalBrowser"
        },
        {
            "contents": "CManiaApp::ELinkType::ManialinkBrowser",
            "trigger": "CManiaApp::ELinkType::ManialinkBrowser"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::Linear",
            "trigger": "CManiaApp::EAnimManagerEasing::Linear"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::QuadIn",
            "trigger": "CManiaApp::EAnimManagerEasing::QuadIn"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::QuadOut",
            "trigger": "CManiaApp::EAnimManagerEasing::QuadOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::QuadInOut",
            "trigger": "CManiaApp::EAnimManagerEasing::QuadInOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::CubicIn",
            "trigger": "CManiaApp::EAnimManagerEasing::CubicIn"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::CubicOut",
            "trigger": "CManiaApp::EAnimManagerEasing::CubicOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::CubicInOut",
            "trigger": "CManiaApp::EAnimManagerEasing::CubicInOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::QuartIn",
            "trigger": "CManiaApp::EAnimManagerEasing::QuartIn"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::QuartOut",
            "trigger": "CManiaApp::EAnimManagerEasing::QuartOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::QuartInOut",
            "trigger": "CManiaApp::EAnimManagerEasing::QuartInOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::QuintIn",
            "trigger": "CManiaApp::EAnimManagerEasing::QuintIn"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::QuintOut",
            "trigger": "CManiaApp::EAnimManagerEasing::QuintOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::QuintInOut",
            "trigger": "CManiaApp::EAnimManagerEasing::QuintInOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::SineIn",
            "trigger": "CManiaApp::EAnimManagerEasing::SineIn"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::SineOut",
            "trigger": "CManiaApp::EAnimManagerEasing::SineOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::SineInOut",
            "trigger": "CManiaApp::EAnimManagerEasing::SineInOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::ExpIn",
            "trigger": "CManiaApp::EAnimManagerEasing::ExpIn"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::ExpOut",
            "trigger": "CManiaApp::EAnimManagerEasing::ExpOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::ExpInOut",
            "trigger": "CManiaApp::EAnimManagerEasing::ExpInOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::CircIn",
            "trigger": "CManiaApp::EAnimManagerEasing::CircIn"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::CircOut",
            "trigger": "CManiaApp::EAnimManagerEasing::CircOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::CircInOut",
            "trigger": "CManiaApp::EAnimManagerEasing::CircInOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::BackIn",
            "trigger": "CManiaApp::EAnimManagerEasing::BackIn"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::BackOut",
            "trigger": "CManiaApp::EAnimManagerEasing::BackOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::BackInOut",
            "trigger": "CManiaApp::EAnimManagerEasing::BackInOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::ElasticIn",
            "trigger": "CManiaApp::EAnimManagerEasing::ElasticIn"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::ElasticOut",
            "trigger": "CManiaApp::EAnimManagerEasing::ElasticOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::ElasticInOut",
            "trigger": "CManiaApp::EAnimManagerEasing::ElasticInOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::ElasticIn2",
            "trigger": "CManiaApp::EAnimManagerEasing::ElasticIn2"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::ElasticOut2",
            "trigger": "CManiaApp::EAnimManagerEasing::ElasticOut2"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::ElasticInOut2",
            "trigger": "CManiaApp::EAnimManagerEasing::ElasticInOut2"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::BounceIn",
            "trigger": "CManiaApp::EAnimManagerEasing::BounceIn"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::BounceOut",
            "trigger": "CManiaApp::EAnimManagerEasing::BounceOut"
        },
        {
            "contents": "CManiaApp::EAnimManagerEasing::BounceInOut",
            "trigger": "CManiaApp::EAnimManagerEasing::BounceInOut"
        },
        {
            "contents": "CManiaApp::ESystemPlatform::None",
            "trigger": "CManiaApp::ESystemPlatform::None"
        },
        {
            "contents": "CManiaApp::ESystemPlatform::Steam",
            "trigger": "CManiaApp::ESystemPlatform::Steam"
        },
        {
            "contents": "CManiaApp::ESystemPlatform::UPlay",
            "trigger": "CManiaApp::ESystemPlatform::UPlay"
        },
        {
            "contents": "CManiaApp::ESystemPlatform::PS4",
            "trigger": "CManiaApp::ESystemPlatform::PS4"
        },
        {
            "contents": "CManiaApp::ESystemPlatform::XBoxOne",
            "trigger": "CManiaApp::ESystemPlatform::XBoxOne"
        },
        {
            "contents": "CManiaApp::ESystemSkuIdentifier::Unknown",
            "trigger": "CManiaApp::ESystemSkuIdentifier::Unknown"
        },
        {
            "contents": "CManiaApp::ESystemSkuIdentifier::EU",
            "trigger": "CManiaApp::ESystemSkuIdentifier::EU"
        },
        {
            "contents": "CManiaApp::ESystemSkuIdentifier::US",
            "trigger": "CManiaApp::ESystemSkuIdentifier::US"
        },
        {
            "contents": "CManiaApp::ESystemSkuIdentifier::JP",
            "trigger": "CManiaApp::ESystemSkuIdentifier::JP"
        },
        {
            "contents": "ManiaAppUrl",
            "trigger": "Text CManiaApp.ManiaAppUrl"
        },
        {
            "contents": "ManiaAppBaseUrl",
            "trigger": "Text CManiaApp.ManiaAppBaseUrl"
        },
        {
            "contents": "Now",
            "trigger": "Integer CManiaApp.Now"
        },
        {
            "contents": "IsVisible",
            "trigger": "Boolean CManiaApp.IsVisible"
        },
        {
            "contents": "CurrentDate",
            "trigger": "Integer CManiaApp.CurrentDate"
        },
        {
            "contents": "CurrentLocalDateText",
            "trigger": "Text CManiaApp.CurrentLocalDateText"
        },
        {
            "contents": "CurrentTimezone",
            "trigger": "Text CManiaApp.CurrentTimezone"
        },
        {
            "contents": "LayersDefaultManialinkVersion",
            "trigger": "Integer CManiaApp.LayersDefaultManialinkVersion"
        },
        {
            "contents": "LocalUser",
            "trigger": "CUser CManiaApp.LocalUser"
        },
        {
            "contents": "LoadedTitle",
            "trigger": "CTitle CManiaApp.LoadedTitle"
        },
        {
            "contents": "SystemPlatform",
            "trigger": "ESystemPlatform CManiaApp.SystemPlatform"
        },
        {
            "contents": "SystemSkuIdentifier",
            "trigger": "ESystemSkuIdentifier CManiaApp.SystemSkuIdentifier"
        },
        {
            "contents": "EnableMenuNavigationInputs",
            "trigger": "Boolean CManiaApp.EnableMenuNavigationInputs"
        },
        {
            "contents": "UILayers",
            "trigger": "CUILayer[] CManiaApp.UILayers"
        },
        {
            "contents": "Xml",
            "trigger": "CXmlManager CManiaApp.Xml"
        },
        {
            "contents": "Http",
            "trigger": "CHttpManager CManiaApp.Http"
        },
        {
            "contents": "Video",
            "trigger": "CVideoManager CManiaApp.Video"
        },
        {
            "contents": "Audio",
            "trigger": "CAudioManager CManiaApp.Audio"
        },
        {
            "contents": "Input",
            "trigger": "CInputManager CManiaApp.Input"
        },
        {
            "contents": "DataFileMgr",
            "trigger": "CDataFileMgr CManiaApp.DataFileMgr"
        },
        {
            "contents": "ScoreMgr",
            "trigger": "CScoreMgr CManiaApp.ScoreMgr"
        },
        {
            "contents": "PrivilegeMgr",
            "trigger": "CPrivilegeMgr CManiaApp.PrivilegeMgr"
        },
        {
            "contents": "PresenceMgr",
            "trigger": "CPresenceMgr CManiaApp.PresenceMgr"
        },
        {
            "contents": "UserMgr",
            "trigger": "CUserV2Manager CManiaApp.UserMgr"
        },
        {
            "contents": "UILayerCreate()",
            "trigger": "CUILayer UILayerCreate()"
        },
        {
            "contents": "UILayerDestroy(${0:CUILayer Layer})",
            "trigger": "Void UILayerDestroy(CUILayer Layer)"
        },
        {
            "contents": "UILayerDestroyAll()",
            "trigger": "Void UILayerDestroyAll()"
        },
        {
            "contents": "LayerCustomEvent(${0:CUILayer Layer}, ${1:Text Type}, ${2:Text[] Data})",
            "trigger": "Void LayerCustomEvent(CUILayer Layer, Text Type, Text[] Data)"
        },
        {
            "contents": "OpenLink(${0:Text Url}, ${1:ELinkType LinkType})",
            "trigger": "Void OpenLink(Text Url, ELinkType LinkType)"
        },
        {
            "contents": "OpenFileInExplorer(${0:Text FileName})",
            "trigger": "Void OpenFileInExplorer(Text FileName)"
        },
        {
            "contents": "Dialog_Message(${0:Text Message})",
            "trigger": "Void Dialog_Message(Text Message)"
        },
        {
            "contents": "Dbg_DumpDeclareForVariables(${0:CNod Nod}, ${1:Boolean StatsOnly})",
            "trigger": "Text Dbg_DumpDeclareForVariables(CNod Nod, Boolean StatsOnly)"
        },
        {
            "contents": "CMlQuad",
            "trigger": "CMlQuad"
        },
        {
            "contents": "CMlQuad::EKeepRatioMode::Inactive",
            "trigger": "CMlQuad::EKeepRatioMode::Inactive"
        },
        {
            "contents": "CMlQuad::EKeepRatioMode::Clip",
            "trigger": "CMlQuad::EKeepRatioMode::Clip"
        },
        {
            "contents": "CMlQuad::EKeepRatioMode::Fit",
            "trigger": "CMlQuad::EKeepRatioMode::Fit"
        },
        {
            "contents": "CMlQuad::EBlendMode::Default",
            "trigger": "CMlQuad::EBlendMode::Default"
        },
        {
            "contents": "CMlQuad::EBlendMode::Add",
            "trigger": "CMlQuad::EBlendMode::Add"
        },
        {
            "contents": "Image",
            "trigger": "CImage CMlQuad.Image"
        },
        {
            "contents": "ImageUrl",
            "trigger": "Text CMlQuad.ImageUrl"
        },
        {
            "contents": "ImageUrlFocus",
            "trigger": "Text CMlQuad.ImageUrlFocus"
        },
        {
            "contents": "Style",
            "trigger": "Text CMlQuad.Style"
        },
        {
            "contents": "Substyle",
            "trigger": "Text CMlQuad.Substyle"
        },
        {
            "contents": "StyleSelected",
            "trigger": "Boolean CMlQuad.StyleSelected"
        },
        {
            "contents": "DownloadInProgress",
            "trigger": "Boolean CMlQuad.DownloadInProgress"
        },
        {
            "contents": "Colorize",
            "trigger": "Vec3 CMlQuad.Colorize"
        },
        {
            "contents": "ModulateColor",
            "trigger": "Vec3 CMlQuad.ModulateColor"
        },
        {
            "contents": "BgColor",
            "trigger": "Vec3 CMlQuad.BgColor"
        },
        {
            "contents": "BgColorFocus",
            "trigger": "Vec3 CMlQuad.BgColorFocus"
        },
        {
            "contents": "Opacity",
            "trigger": "Real CMlQuad.Opacity"
        },
        {
            "contents": "KeepRatio",
            "trigger": "EKeepRatioMode CMlQuad.KeepRatio"
        },
        {
            "contents": "Blend",
            "trigger": "EBlendMode CMlQuad.Blend"
        },
        {
            "contents": "ChangeImageUrl(${0:Text fieldName})",
            "trigger": "Void ChangeImageUrl(Text fieldName)"
        },
        {
            "contents": "CXmlNode",
            "trigger": "CXmlNode"
        },
        {
            "contents": "Name",
            "trigger": "Text CXmlNode.Name"
        },
        {
            "contents": "TextContents",
            "trigger": "Text CXmlNode.TextContents"
        },
        {
            "contents": "TextRawContents",
            "trigger": "Text CXmlNode.TextRawContents"
        },
        {
            "contents": "TextRecursiveContents",
            "trigger": "Text CXmlNode.TextRecursiveContents"
        },
        {
            "contents": "Children",
            "trigger": "CXmlNode[] CXmlNode.Children"
        },
        {
            "contents": "GetAttributeText(${0:Text Name}, ${1:Text DefaultValue})",
            "trigger": "Text GetAttributeText(Text Name, Text DefaultValue)"
        },
        {
            "contents": "GetAttributeInteger(${0:Text Name}, ${1:Integer DefaultValue})",
            "trigger": "Integer GetAttributeInteger(Text Name, Integer DefaultValue)"
        },
        {
            "contents": "GetAttributeReal(${0:Text Name}, ${1:Real DefaultValue})",
            "trigger": "Real GetAttributeReal(Text Name, Real DefaultValue)"
        },
        {
            "contents": "GetAttributeBoolean(${0:Text Name}, ${1:Boolean DefaultValue})",
            "trigger": "Boolean GetAttributeBoolean(Text Name, Boolean DefaultValue)"
        },
        {
            "contents": "GetFirstChild(${0:Text Name})",
            "trigger": "CXmlNode GetFirstChild(Text Name)"
        },
        {
            "contents": "CManiaAppTitleLayer",
            "trigger": "CManiaAppTitleLayer"
        },
        {
            "contents": "ParentApp",
            "trigger": "CManiaAppTitle CManiaAppTitleLayer.ParentApp"
        },
        {
            "contents": "TitleControl",
            "trigger": "CTitleFlow CManiaAppTitleLayer.TitleControl"
        },
        {
            "contents": "TitleFlow",
            "trigger": "CTitleFlow CManiaAppTitleLayer.TitleFlow"
        },
        {
            "contents": "CSmMapType",
            "trigger": "CSmMapType"
        },
        {
            "contents": "Mode",
            "trigger": "CSmMode CSmMapType.Mode"
        },
        {
            "contents": "AllPlayers",
            "trigger": "CSmPlayer[] CSmMapType.AllPlayers"
        },
        {
            "contents": "Players",
            "trigger": "CSmPlayer[] CSmMapType.Players"
        },
        {
            "contents": "CMlTextEdit",
            "trigger": "CMlTextEdit"
        },
        {
            "contents": "CMlTextEdit::EControlScriptEditorTextFormat::Basic",
            "trigger": "CMlTextEdit::EControlScriptEditorTextFormat::Basic"
        },
        {
            "contents": "CMlTextEdit::EControlScriptEditorTextFormat::Script",
            "trigger": "CMlTextEdit::EControlScriptEditorTextFormat::Script"
        },
        {
            "contents": "CMlTextEdit::EControlScriptEditorTextFormat::Password",
            "trigger": "CMlTextEdit::EControlScriptEditorTextFormat::Password"
        },
        {
            "contents": "CMlTextEdit::EControlScriptEditorTextFormat::Newpassword",
            "trigger": "CMlTextEdit::EControlScriptEditorTextFormat::Newpassword"
        },
        {
            "contents": "Value",
            "trigger": "Text CMlTextEdit.Value"
        },
        {
            "contents": "MaxLine",
            "trigger": "Integer CMlTextEdit.MaxLine"
        },
        {
            "contents": "AutoNewLine",
            "trigger": "Boolean CMlTextEdit.AutoNewLine"
        },
        {
            "contents": "ShowLineNumbers",
            "trigger": "Boolean CMlTextEdit.ShowLineNumbers"
        },
        {
            "contents": "LineSpacing",
            "trigger": "Real CMlTextEdit.LineSpacing"
        },
        {
            "contents": "ValueLineCount",
            "trigger": "Integer CMlTextEdit.ValueLineCount"
        },
        {
            "contents": "Opacity",
            "trigger": "Real CMlTextEdit.Opacity"
        },
        {
            "contents": "TextColor",
            "trigger": "Vec3 CMlTextEdit.TextColor"
        },
        {
            "contents": "TextSizeReal",
            "trigger": "Real CMlTextEdit.TextSizeReal"
        },
        {
            "contents": "TextFormat",
            "trigger": "EControlScriptEditorTextFormat CMlTextEdit.TextFormat"
        },
        {
            "contents": "StartEdition()",
            "trigger": "Void StartEdition()"
        },
        {
            "contents": "CHighScoreComparison",
            "trigger": "CHighScoreComparison"
        },
        {
            "contents": "MapInfo",
            "trigger": "CMapInfo CHighScoreComparison.MapInfo"
        },
        {
            "contents": "Login",
            "trigger": "Text CHighScoreComparison.Login"
        },
        {
            "contents": "RecordScore",
            "trigger": "Integer CHighScoreComparison.RecordScore"
        },
        {
            "contents": "RecordTime",
            "trigger": "Integer CHighScoreComparison.RecordTime"
        },
        {
            "contents": "RecordRespawnCount",
            "trigger": "Integer CHighScoreComparison.RecordRespawnCount"
        },
        {
            "contents": "RecordDate",
            "trigger": "Integer CHighScoreComparison.RecordDate"
        },
        {
            "contents": "RecordDateString",
            "trigger": "Text CHighScoreComparison.RecordDateString"
        },
        {
            "contents": "RecordElapsedTime",
            "trigger": "Integer CHighScoreComparison.RecordElapsedTime"
        },
        {
            "contents": "RecordCount",
            "trigger": "Integer CHighScoreComparison.RecordCount"
        },
        {
            "contents": "OpponentLogin",
            "trigger": "Text CHighScoreComparison.OpponentLogin"
        },
        {
            "contents": "OpponentDisplayName",
            "trigger": "Text CHighScoreComparison.OpponentDisplayName"
        },
        {
            "contents": "OpponentRecordUrl",
            "trigger": "Text CHighScoreComparison.OpponentRecordUrl"
        },
        {
            "contents": "OpponentRecordScore",
            "trigger": "Integer CHighScoreComparison.OpponentRecordScore"
        },
        {
            "contents": "OpponentRecordTime",
            "trigger": "Integer CHighScoreComparison.OpponentRecordTime"
        },
        {
            "contents": "OpponentRecordRespawnCount",
            "trigger": "Integer CHighScoreComparison.OpponentRecordRespawnCount"
        },
        {
            "contents": "OpponentRecordDate",
            "trigger": "Integer CHighScoreComparison.OpponentRecordDate"
        },
        {
            "contents": "OpponentRecordDateString",
            "trigger": "Text CHighScoreComparison.OpponentRecordDateString"
        },
        {
            "contents": "OpponentRecordElapsedTime",
            "trigger": "Integer CHighScoreComparison.OpponentRecordElapsedTime"
        },
        {
            "contents": "OpponentRecordCount",
            "trigger": "Integer CHighScoreComparison.OpponentRecordCount"
        },
        {
            "contents": "CAudioSourceMusic",
            "trigger": "CAudioSourceMusic"
        },
        {
            "contents": "CAudioSourceMusic::EUpdateMode::Cut",
            "trigger": "CAudioSourceMusic::EUpdateMode::Cut"
        },
        {
            "contents": "CAudioSourceMusic::EUpdateMode::OnNextBar",
            "trigger": "CAudioSourceMusic::EUpdateMode::OnNextBar"
        },
        {
            "contents": "CAudioSourceMusic::EUpdateMode::OnNextHalfBar",
            "trigger": "CAudioSourceMusic::EUpdateMode::OnNextHalfBar"
        },
        {
            "contents": "CAudioSourceMusic::EUpdateMode::OnNextBeat",
            "trigger": "CAudioSourceMusic::EUpdateMode::OnNextBeat"
        },
        {
            "contents": "Tracks_Volume",
            "trigger": "Real[] CAudioSourceMusic.Tracks_Volume"
        },
        {
            "contents": "Tracks_VolumedB",
            "trigger": "Real[] CAudioSourceMusic.Tracks_VolumedB"
        },
        {
            "contents": "Tracks_Name",
            "trigger": "Text[] CAudioSourceMusic.Tracks_Name"
        },
        {
            "contents": "Tracks_Length",
            "trigger": "Real[] CAudioSourceMusic.Tracks_Length"
        },
        {
            "contents": "Tracks_Count",
            "trigger": "Integer CAudioSourceMusic.Tracks_Count"
        },
        {
            "contents": "BeatsPerMinute",
            "trigger": "Real CAudioSourceMusic.BeatsPerMinute"
        },
        {
            "contents": "BeatDuration",
            "trigger": "Real CAudioSourceMusic.BeatDuration"
        },
        {
            "contents": "BeatsPerBar",
            "trigger": "Integer CAudioSourceMusic.BeatsPerBar"
        },
        {
            "contents": "UpdateMode",
            "trigger": "EUpdateMode CAudioSourceMusic.UpdateMode"
        },
        {
            "contents": "Dbg_ForceIntensity",
            "trigger": "Boolean CAudioSourceMusic.Dbg_ForceIntensity"
        },
        {
            "contents": "Dbg_ForceSequential",
            "trigger": "Boolean CAudioSourceMusic.Dbg_ForceSequential"
        },
        {
            "contents": "Dbg_ForceRandom",
            "trigger": "Boolean CAudioSourceMusic.Dbg_ForceRandom"
        },
        {
            "contents": "LPF_CutoffRatio",
            "trigger": "Real CAudioSourceMusic.LPF_CutoffRatio"
        },
        {
            "contents": "LPF_Q",
            "trigger": "Real CAudioSourceMusic.LPF_Q"
        },
        {
            "contents": "HPF_CutoffRatio",
            "trigger": "Real CAudioSourceMusic.HPF_CutoffRatio"
        },
        {
            "contents": "HPF_Q",
            "trigger": "Real CAudioSourceMusic.HPF_Q"
        },
        {
            "contents": "FadeTracksDuration",
            "trigger": "Real CAudioSourceMusic.FadeTracksDuration"
        },
        {
            "contents": "FadeFiltersDuration",
            "trigger": "Real CAudioSourceMusic.FadeFiltersDuration"
        },
        {
            "contents": "UseNewImplem",
            "trigger": "Boolean CAudioSourceMusic.UseNewImplem"
        },
        {
            "contents": "MuteAllTracks()",
            "trigger": "Void MuteAllTracks()"
        },
        {
            "contents": "UnmuteAllTracks()",
            "trigger": "Void UnmuteAllTracks()"
        },
        {
            "contents": "NextVariant()",
            "trigger": "Void NextVariant()"
        },
        {
            "contents": "NextVariant(${0:Boolean IsIntensityDecreasing})",
            "trigger": "Void NextVariant(Boolean IsIntensityDecreasing)"
        },
        {
            "contents": "EnableSegment(${0:Text SegmentName})",
            "trigger": "Void EnableSegment(Text SegmentName)"
        },
        {
            "contents": "CTeam",
            "trigger": "CTeam"
        },
        {
            "contents": "Name",
            "trigger": "Text CTeam.Name"
        },
        {
            "contents": "ZonePath",
            "trigger": "Text CTeam.ZonePath"
        },
        {
            "contents": "City",
            "trigger": "Text CTeam.City"
        },
        {
            "contents": "EmblemUrl",
            "trigger": "Text CTeam.EmblemUrl"
        },
        {
            "contents": "PresentationManialinkUrl",
            "trigger": "Text CTeam.PresentationManialinkUrl"
        },
        {
            "contents": "ClubLinkUrl",
            "trigger": "Text CTeam.ClubLinkUrl"
        },
        {
            "contents": "ColorPrimary",
            "trigger": "Vec3 CTeam.ColorPrimary"
        },
        {
            "contents": "ColorSecondary",
            "trigger": "Vec3 CTeam.ColorSecondary"
        },
        {
            "contents": "ColorText",
            "trigger": "Text CTeam.ColorText"
        },
        {
            "contents": "ColorizedName",
            "trigger": "Text CTeam.ColorizedName"
        },
        {
            "contents": "CUIConfig",
            "trigger": "CUIConfig"
        },
        {
            "contents": "CUIConfig::EUISequence::None",
            "trigger": "CUIConfig::EUISequence::None"
        },
        {
            "contents": "CUIConfig::EUISequence::Playing",
            "trigger": "CUIConfig::EUISequence::Playing"
        },
        {
            "contents": "CUIConfig::EUISequence::Intro",
            "trigger": "CUIConfig::EUISequence::Intro"
        },
        {
            "contents": "CUIConfig::EUISequence::Outro",
            "trigger": "CUIConfig::EUISequence::Outro"
        },
        {
            "contents": "CUIConfig::EUISequence::Podium",
            "trigger": "CUIConfig::EUISequence::Podium"
        },
        {
            "contents": "CUIConfig::EUISequence::CustomMTClip",
            "trigger": "CUIConfig::EUISequence::CustomMTClip"
        },
        {
            "contents": "CUIConfig::EUISequence::EndRound",
            "trigger": "CUIConfig::EUISequence::EndRound"
        },
        {
            "contents": "CUIConfig::EUISequence::PlayersPresentation",
            "trigger": "CUIConfig::EUISequence::PlayersPresentation"
        },
        {
            "contents": "CUIConfig::EUISequence::UIInteraction",
            "trigger": "CUIConfig::EUISequence::UIInteraction"
        },
        {
            "contents": "CUIConfig::EUISequence::RollingBackgroundIntro",
            "trigger": "CUIConfig::EUISequence::RollingBackgroundIntro"
        },
        {
            "contents": "CUIConfig::EUISequence::CustomMTClip_WithUIInteraction",
            "trigger": "CUIConfig::EUISequence::CustomMTClip_WithUIInteraction"
        },
        {
            "contents": "CUIConfig::EUIStatus::None",
            "trigger": "CUIConfig::EUIStatus::None"
        },
        {
            "contents": "CUIConfig::EUIStatus::Normal",
            "trigger": "CUIConfig::EUIStatus::Normal"
        },
        {
            "contents": "CUIConfig::EUIStatus::Warning",
            "trigger": "CUIConfig::EUIStatus::Warning"
        },
        {
            "contents": "CUIConfig::EUIStatus::Error",
            "trigger": "CUIConfig::EUIStatus::Error"
        },
        {
            "contents": "CUIConfig::EUIStatus::Official",
            "trigger": "CUIConfig::EUIStatus::Official"
        },
        {
            "contents": "CUIConfig::EVisibility::None",
            "trigger": "CUIConfig::EVisibility::None"
        },
        {
            "contents": "CUIConfig::EVisibility::Normal",
            "trigger": "CUIConfig::EVisibility::Normal"
        },
        {
            "contents": "CUIConfig::EVisibility::Manual",
            "trigger": "CUIConfig::EVisibility::Manual"
        },
        {
            "contents": "CUIConfig::EVisibility::ForcedHidden",
            "trigger": "CUIConfig::EVisibility::ForcedHidden"
        },
        {
            "contents": "CUIConfig::EVisibility::ForcedVisible",
            "trigger": "CUIConfig::EVisibility::ForcedVisible"
        },
        {
            "contents": "CUIConfig::ELabelsVisibility::None",
            "trigger": "CUIConfig::ELabelsVisibility::None"
        },
        {
            "contents": "CUIConfig::ELabelsVisibility::Never",
            "trigger": "CUIConfig::ELabelsVisibility::Never"
        },
        {
            "contents": "CUIConfig::ELabelsVisibility::Always",
            "trigger": "CUIConfig::ELabelsVisibility::Always"
        },
        {
            "contents": "CUIConfig::ELabelsVisibility::WhenInFrustum",
            "trigger": "CUIConfig::ELabelsVisibility::WhenInFrustum"
        },
        {
            "contents": "CUIConfig::ELabelsVisibility::WhenVisible",
            "trigger": "CUIConfig::ELabelsVisibility::WhenVisible"
        },
        {
            "contents": "CUIConfig::ELabelsVisibility::WhenInMiddleOfScreen",
            "trigger": "CUIConfig::ELabelsVisibility::WhenInMiddleOfScreen"
        },
        {
            "contents": "CUIConfig::EAvatarVariant::Default",
            "trigger": "CUIConfig::EAvatarVariant::Default"
        },
        {
            "contents": "CUIConfig::EAvatarVariant::Sad",
            "trigger": "CUIConfig::EAvatarVariant::Sad"
        },
        {
            "contents": "CUIConfig::EAvatarVariant::Happy",
            "trigger": "CUIConfig::EAvatarVariant::Happy"
        },
        {
            "contents": "CUIConfig::EUISound::Default",
            "trigger": "CUIConfig::EUISound::Default"
        },
        {
            "contents": "CUIConfig::EUISound::Silence",
            "trigger": "CUIConfig::EUISound::Silence"
        },
        {
            "contents": "CUIConfig::EUISound::StartMatch",
            "trigger": "CUIConfig::EUISound::StartMatch"
        },
        {
            "contents": "CUIConfig::EUISound::EndMatch",
            "trigger": "CUIConfig::EUISound::EndMatch"
        },
        {
            "contents": "CUIConfig::EUISound::StartRound",
            "trigger": "CUIConfig::EUISound::StartRound"
        },
        {
            "contents": "CUIConfig::EUISound::EndRound",
            "trigger": "CUIConfig::EUISound::EndRound"
        },
        {
            "contents": "CUIConfig::EUISound::PhaseChange",
            "trigger": "CUIConfig::EUISound::PhaseChange"
        },
        {
            "contents": "CUIConfig::EUISound::TieBreakPoint",
            "trigger": "CUIConfig::EUISound::TieBreakPoint"
        },
        {
            "contents": "CUIConfig::EUISound::TiePoint",
            "trigger": "CUIConfig::EUISound::TiePoint"
        },
        {
            "contents": "CUIConfig::EUISound::VictoryPoint",
            "trigger": "CUIConfig::EUISound::VictoryPoint"
        },
        {
            "contents": "CUIConfig::EUISound::Capture",
            "trigger": "CUIConfig::EUISound::Capture"
        },
        {
            "contents": "CUIConfig::EUISound::TimeOut",
            "trigger": "CUIConfig::EUISound::TimeOut"
        },
        {
            "contents": "CUIConfig::EUISound::Notice",
            "trigger": "CUIConfig::EUISound::Notice"
        },
        {
            "contents": "CUIConfig::EUISound::Warning",
            "trigger": "CUIConfig::EUISound::Warning"
        },
        {
            "contents": "CUIConfig::EUISound::PlayerEliminated",
            "trigger": "CUIConfig::EUISound::PlayerEliminated"
        },
        {
            "contents": "CUIConfig::EUISound::PlayerHit",
            "trigger": "CUIConfig::EUISound::PlayerHit"
        },
        {
            "contents": "CUIConfig::EUISound::Checkpoint",
            "trigger": "CUIConfig::EUISound::Checkpoint"
        },
        {
            "contents": "CUIConfig::EUISound::Finish",
            "trigger": "CUIConfig::EUISound::Finish"
        },
        {
            "contents": "CUIConfig::EUISound::Record",
            "trigger": "CUIConfig::EUISound::Record"
        },
        {
            "contents": "CUIConfig::EUISound::ScoreProgress",
            "trigger": "CUIConfig::EUISound::ScoreProgress"
        },
        {
            "contents": "CUIConfig::EUISound::RankChange",
            "trigger": "CUIConfig::EUISound::RankChange"
        },
        {
            "contents": "CUIConfig::EUISound::Bonus",
            "trigger": "CUIConfig::EUISound::Bonus"
        },
        {
            "contents": "CUIConfig::EUISound::FirstHit",
            "trigger": "CUIConfig::EUISound::FirstHit"
        },
        {
            "contents": "CUIConfig::EUISound::Combo",
            "trigger": "CUIConfig::EUISound::Combo"
        },
        {
            "contents": "CUIConfig::EUISound::PlayersRemaining",
            "trigger": "CUIConfig::EUISound::PlayersRemaining"
        },
        {
            "contents": "CUIConfig::EUISound::Custom1",
            "trigger": "CUIConfig::EUISound::Custom1"
        },
        {
            "contents": "CUIConfig::EUISound::Custom2",
            "trigger": "CUIConfig::EUISound::Custom2"
        },
        {
            "contents": "CUIConfig::EUISound::Custom3",
            "trigger": "CUIConfig::EUISound::Custom3"
        },
        {
            "contents": "CUIConfig::EUISound::Custom4",
            "trigger": "CUIConfig::EUISound::Custom4"
        },
        {
            "contents": "CUIConfig::ENoticeLevel::Default",
            "trigger": "CUIConfig::ENoticeLevel::Default"
        },
        {
            "contents": "CUIConfig::ENoticeLevel::PlayerInfo",
            "trigger": "CUIConfig::ENoticeLevel::PlayerInfo"
        },
        {
            "contents": "CUIConfig::ENoticeLevel::PlayerWarning",
            "trigger": "CUIConfig::ENoticeLevel::PlayerWarning"
        },
        {
            "contents": "CUIConfig::ENoticeLevel::MapInfo",
            "trigger": "CUIConfig::ENoticeLevel::MapInfo"
        },
        {
            "contents": "CUIConfig::ENoticeLevel::MapWarning",
            "trigger": "CUIConfig::ENoticeLevel::MapWarning"
        },
        {
            "contents": "CUIConfig::ENoticeLevel::MatchInfo",
            "trigger": "CUIConfig::ENoticeLevel::MatchInfo"
        },
        {
            "contents": "CUIConfig::ENoticeLevel::MatchWarning",
            "trigger": "CUIConfig::ENoticeLevel::MatchWarning"
        },
        {
            "contents": "CUIConfig::EObserverMode::Default",
            "trigger": "CUIConfig::EObserverMode::Default"
        },
        {
            "contents": "CUIConfig::EObserverMode::Forced",
            "trigger": "CUIConfig::EObserverMode::Forced"
        },
        {
            "contents": "CUIConfig::EObserverMode::Forbidden",
            "trigger": "CUIConfig::EObserverMode::Forbidden"
        },
        {
            "contents": "CUIConfig::EObserverMode::Manual",
            "trigger": "CUIConfig::EObserverMode::Manual"
        },
        {
            "contents": "UISequence",
            "trigger": "EUISequence CUIConfig.UISequence"
        },
        {
            "contents": "UISequenceIsCompleted",
            "trigger": "Boolean CUIConfig.UISequenceIsCompleted"
        },
        {
            "contents": "UISequence_CustomMTClip",
            "trigger": "Text CUIConfig.UISequence_CustomMTClip"
        },
        {
            "contents": "UISequence_CustomMTRefTime",
            "trigger": "Integer CUIConfig.UISequence_CustomMTRefTime"
        },
        {
            "contents": "UISequence_CanSkipIntroMT",
            "trigger": "Boolean CUIConfig.UISequence_CanSkipIntroMT"
        },
        {
            "contents": "UISequence_PodiumPlayersWin",
            "trigger": "Text CUIConfig.UISequence_PodiumPlayersWin"
        },
        {
            "contents": "UISequence_PodiumPlayersLose",
            "trigger": "Text CUIConfig.UISequence_PodiumPlayersLose"
        },
        {
            "contents": "ManialinkPage",
            "trigger": "Text CUIConfig.ManialinkPage"
        },
        {
            "contents": "BigMessage",
            "trigger": "Text CUIConfig.BigMessage"
        },
        {
            "contents": "BigMessageAvatarLogin",
            "trigger": "Text CUIConfig.BigMessageAvatarLogin"
        },
        {
            "contents": "BigMessageAvatarVariant",
            "trigger": "EAvatarVariant CUIConfig.BigMessageAvatarVariant"
        },
        {
            "contents": "BigMessageSound",
            "trigger": "EUISound CUIConfig.BigMessageSound"
        },
        {
            "contents": "BigMessageSoundVariant",
            "trigger": "Integer CUIConfig.BigMessageSoundVariant"
        },
        {
            "contents": "StatusMessage",
            "trigger": "Text CUIConfig.StatusMessage"
        },
        {
            "contents": "GaugeMessage",
            "trigger": "Text CUIConfig.GaugeMessage"
        },
        {
            "contents": "GaugeRatio",
            "trigger": "Real CUIConfig.GaugeRatio"
        },
        {
            "contents": "GaugeClan",
            "trigger": "Integer CUIConfig.GaugeClan"
        },
        {
            "contents": "MarkersXML",
            "trigger": "Text CUIConfig.MarkersXML"
        },
        {
            "contents": "UILayers",
            "trigger": "CUILayer[] CUIConfig.UILayers"
        },
        {
            "contents": "OverlayHideNotices",
            "trigger": "Boolean CUIConfig.OverlayHideNotices"
        },
        {
            "contents": "OverlayHideMapInfo",
            "trigger": "Boolean CUIConfig.OverlayHideMapInfo"
        },
        {
            "contents": "OverlayHideOpponentsInfo",
            "trigger": "Boolean CUIConfig.OverlayHideOpponentsInfo"
        },
        {
            "contents": "OverlayHideChat",
            "trigger": "Boolean CUIConfig.OverlayHideChat"
        },
        {
            "contents": "OverlayHideCheckPointList",
            "trigger": "Boolean CUIConfig.OverlayHideCheckPointList"
        },
        {
            "contents": "OverlayHideRoundScores",
            "trigger": "Boolean CUIConfig.OverlayHideRoundScores"
        },
        {
            "contents": "OverlayHideCountdown",
            "trigger": "Boolean CUIConfig.OverlayHideCountdown"
        },
        {
            "contents": "OverlayHideCrosshair",
            "trigger": "Boolean CUIConfig.OverlayHideCrosshair"
        },
        {
            "contents": "OverlayHideGauges",
            "trigger": "Boolean CUIConfig.OverlayHideGauges"
        },
        {
            "contents": "OverlayHideConsumables",
            "trigger": "Boolean CUIConfig.OverlayHideConsumables"
        },
        {
            "contents": "OverlayHide321Go",
            "trigger": "Boolean CUIConfig.OverlayHide321Go"
        },
        {
            "contents": "OverlayHideBackground",
            "trigger": "Boolean CUIConfig.OverlayHideBackground"
        },
        {
            "contents": "OverlayHideChrono",
            "trigger": "Boolean CUIConfig.OverlayHideChrono"
        },
        {
            "contents": "OverlayHideSpeedAndDist",
            "trigger": "Boolean CUIConfig.OverlayHideSpeedAndDist"
        },
        {
            "contents": "OverlayHidePersonnalBestAndRank",
            "trigger": "Boolean CUIConfig.OverlayHidePersonnalBestAndRank"
        },
        {
            "contents": "OverlayHidePosition",
            "trigger": "Boolean CUIConfig.OverlayHidePosition"
        },
        {
            "contents": "OverlayHideCheckPointTime",
            "trigger": "Boolean CUIConfig.OverlayHideCheckPointTime"
        },
        {
            "contents": "OverlayHideEndMapLadderRecap",
            "trigger": "Boolean CUIConfig.OverlayHideEndMapLadderRecap"
        },
        {
            "contents": "OverlayHideMultilapInfos",
            "trigger": "Boolean CUIConfig.OverlayHideMultilapInfos"
        },
        {
            "contents": "OverlayHideSpectatorControllers",
            "trigger": "Boolean CUIConfig.OverlayHideSpectatorControllers"
        },
        {
            "contents": "OverlayHideSpectatorInfos",
            "trigger": "Boolean CUIConfig.OverlayHideSpectatorInfos"
        },
        {
            "contents": "OverlayChatHideAvatar",
            "trigger": "Boolean CUIConfig.OverlayChatHideAvatar"
        },
        {
            "contents": "OverlayChatLineCount",
            "trigger": "Integer CUIConfig.OverlayChatLineCount"
        },
        {
            "contents": "OverlayChatOffset",
            "trigger": "Vec2 CUIConfig.OverlayChatOffset"
        },
        {
            "contents": "CountdownCoord",
            "trigger": "Vec2 CUIConfig.CountdownCoord"
        },
        {
            "contents": "NoticesFilter_HidePlayerInfo",
            "trigger": "Boolean CUIConfig.NoticesFilter_HidePlayerInfo"
        },
        {
            "contents": "NoticesFilter_HidePlayerWarning",
            "trigger": "Boolean CUIConfig.NoticesFilter_HidePlayerWarning"
        },
        {
            "contents": "NoticesFilter_HidePlayerInfoIfNotMe",
            "trigger": "Boolean CUIConfig.NoticesFilter_HidePlayerInfoIfNotMe"
        },
        {
            "contents": "NoticesFilter_HidePlayerWarningIfNotMe",
            "trigger": "Boolean CUIConfig.NoticesFilter_HidePlayerWarningIfNotMe"
        },
        {
            "contents": "NoticesFilter_HideMapInfo",
            "trigger": "Boolean CUIConfig.NoticesFilter_HideMapInfo"
        },
        {
            "contents": "NoticesFilter_HideMapWarning",
            "trigger": "Boolean CUIConfig.NoticesFilter_HideMapWarning"
        },
        {
            "contents": "NoticesFilter_HideMatchInfo",
            "trigger": "Boolean CUIConfig.NoticesFilter_HideMatchInfo"
        },
        {
            "contents": "NoticesFilter_HideMatchWarning",
            "trigger": "Boolean CUIConfig.NoticesFilter_HideMatchWarning"
        },
        {
            "contents": "NoticesFilter_LevelToShowAsBigMessage",
            "trigger": "ENoticeLevel CUIConfig.NoticesFilter_LevelToShowAsBigMessage"
        },
        {
            "contents": "ScoreTable",
            "trigger": "Text CUIConfig.ScoreTable"
        },
        {
            "contents": "ScoreTableVisibility",
            "trigger": "EVisibility CUIConfig.ScoreTableVisibility"
        },
        {
            "contents": "SmallScoreTable",
            "trigger": "Text CUIConfig.SmallScoreTable"
        },
        {
            "contents": "SmallScoreTableVisibility",
            "trigger": "EVisibility CUIConfig.SmallScoreTableVisibility"
        },
        {
            "contents": "ScoreTableOnlyManialink",
            "trigger": "Boolean CUIConfig.ScoreTableOnlyManialink"
        },
        {
            "contents": "AltMenuNoDefaultScores",
            "trigger": "Boolean CUIConfig.AltMenuNoDefaultScores"
        },
        {
            "contents": "AltMenuNoCustomScores",
            "trigger": "Boolean CUIConfig.AltMenuNoCustomScores"
        },
        {
            "contents": "OverlayScoreSummary",
            "trigger": "Boolean CUIConfig.OverlayScoreSummary"
        },
        {
            "contents": "ScoreSummary_Player1",
            "trigger": "Ident CUIConfig.ScoreSummary_Player1"
        },
        {
            "contents": "ScoreSummary_Points1",
            "trigger": "Integer CUIConfig.ScoreSummary_Points1"
        },
        {
            "contents": "ScoreSummary_RoundPoints1",
            "trigger": "Integer CUIConfig.ScoreSummary_RoundPoints1"
        },
        {
            "contents": "ScoreSummary_MatchPoints1",
            "trigger": "Integer CUIConfig.ScoreSummary_MatchPoints1"
        },
        {
            "contents": "ScoreSummary_Gauge1",
            "trigger": "Real CUIConfig.ScoreSummary_Gauge1"
        },
        {
            "contents": "ScoreSummary_Player2",
            "trigger": "Ident CUIConfig.ScoreSummary_Player2"
        },
        {
            "contents": "ScoreSummary_Points2",
            "trigger": "Integer CUIConfig.ScoreSummary_Points2"
        },
        {
            "contents": "ScoreSummary_RoundPoints2",
            "trigger": "Integer CUIConfig.ScoreSummary_RoundPoints2"
        },
        {
            "contents": "ScoreSummary_MatchPoints2",
            "trigger": "Integer CUIConfig.ScoreSummary_MatchPoints2"
        },
        {
            "contents": "ScoreSummary_Gauge2",
            "trigger": "Real CUIConfig.ScoreSummary_Gauge2"
        },
        {
            "contents": "ScreenIn3dHideScoreSummary",
            "trigger": "Boolean CUIConfig.ScreenIn3dHideScoreSummary"
        },
        {
            "contents": "ScreenIn3dHideVersus",
            "trigger": "Boolean CUIConfig.ScreenIn3dHideVersus"
        },
        {
            "contents": "CountdownEndTime",
            "trigger": "Integer CUIConfig.CountdownEndTime"
        },
        {
            "contents": "UIStatus",
            "trigger": "EUIStatus CUIConfig.UIStatus"
        },
        {
            "contents": "AlliesLabelsVisibility",
            "trigger": "ELabelsVisibility CUIConfig.AlliesLabelsVisibility"
        },
        {
            "contents": "AlliesLabelsShowGauges",
            "trigger": "EVisibility CUIConfig.AlliesLabelsShowGauges"
        },
        {
            "contents": "AlliesLabelsShowNames",
            "trigger": "EVisibility CUIConfig.AlliesLabelsShowNames"
        },
        {
            "contents": "AlliesLabelsMaxCount",
            "trigger": "Integer CUIConfig.AlliesLabelsMaxCount"
        },
        {
            "contents": "TeamLabelsVisibility",
            "trigger": "ELabelsVisibility CUIConfig.TeamLabelsVisibility"
        },
        {
            "contents": "TeamLabelsShowGauges",
            "trigger": "EVisibility CUIConfig.TeamLabelsShowGauges"
        },
        {
            "contents": "TeamLabelsShowNames",
            "trigger": "EVisibility CUIConfig.TeamLabelsShowNames"
        },
        {
            "contents": "OpposingTeamLabelsVisibility",
            "trigger": "ELabelsVisibility CUIConfig.OpposingTeamLabelsVisibility"
        },
        {
            "contents": "OpposingTeamLabelsShowGauges",
            "trigger": "EVisibility CUIConfig.OpposingTeamLabelsShowGauges"
        },
        {
            "contents": "OpposingTeamLabelsShowNames",
            "trigger": "EVisibility CUIConfig.OpposingTeamLabelsShowNames"
        },
        {
            "contents": "ForceSpectator",
            "trigger": "Boolean CUIConfig.ForceSpectator"
        },
        {
            "contents": "SpectatorForceCameraType",
            "trigger": "Integer CUIConfig.SpectatorForceCameraType"
        },
        {
            "contents": "SpectatorAutoTarget",
            "trigger": "Ident CUIConfig.SpectatorAutoTarget"
        },
        {
            "contents": "SpectatorForcedTarget",
            "trigger": "Ident CUIConfig.SpectatorForcedTarget"
        },
        {
            "contents": "SpectatorForcedClan",
            "trigger": "Integer CUIConfig.SpectatorForcedClan"
        },
        {
            "contents": "SpectatorCamAutoLatitude",
            "trigger": "Real CUIConfig.SpectatorCamAutoLatitude"
        },
        {
            "contents": "SpectatorCamAutoLongitude",
            "trigger": "Real CUIConfig.SpectatorCamAutoLongitude"
        },
        {
            "contents": "SpectatorCamAutoRadius",
            "trigger": "Real CUIConfig.SpectatorCamAutoRadius"
        },
        {
            "contents": "SpectatorObserverMode",
            "trigger": "EObserverMode CUIConfig.SpectatorObserverMode"
        },
        {
            "contents": "SendChat(${0:Text Text})",
            "trigger": "Void SendChat(Text Text)"
        },
        {
            "contents": "SendNotice(${0:Text Text}, ${1:ENoticeLevel Level}, ${2:CUser Avatar}, ${3:EAvatarVariant AvatarVariant}, ${4:EUISound Sound}, ${5:Integer SoundVariant})",
            "trigger": "Void SendNotice(Text Text, ENoticeLevel Level, CUser Avatar, EAvatarVariant AvatarVariant, EUISound Sound, Integer SoundVariant)"
        },
        {
            "contents": "GetLayerManialinkAction(${0:CUILayer Layer})",
            "trigger": "Text GetLayerManialinkAction(CUILayer Layer)"
        },
        {
            "contents": "ClearLayerManialinkAction(${0:CUILayer Layer})",
            "trigger": "Void ClearLayerManialinkAction(CUILayer Layer)"
        },
        {
            "contents": "CUIConfigEvent",
            "trigger": "CUIConfigEvent"
        },
        {
            "contents": "CUIConfigEvent::EType::Unknown",
            "trigger": "CUIConfigEvent::EType::Unknown"
        },
        {
            "contents": "CUIConfigEvent::EType::OnModuleCustomEvent",
            "trigger": "CUIConfigEvent::EType::OnModuleCustomEvent"
        },
        {
            "contents": "CUIConfigEvent::EType::OnModuleShowRequest",
            "trigger": "CUIConfigEvent::EType::OnModuleShowRequest"
        },
        {
            "contents": "CUIConfigEvent::EType::OnModuleHideRequest",
            "trigger": "CUIConfigEvent::EType::OnModuleHideRequest"
        },
        {
            "contents": "CUIConfigEvent::EType::OnModuleStorePurchase",
            "trigger": "CUIConfigEvent::EType::OnModuleStorePurchase"
        },
        {
            "contents": "CUIConfigEvent::EType::OnModuleInventoryDrop",
            "trigger": "CUIConfigEvent::EType::OnModuleInventoryDrop"
        },
        {
            "contents": "CUIConfigEvent::EType::OnModuleInventoryEquip",
            "trigger": "CUIConfigEvent::EType::OnModuleInventoryEquip"
        },
        {
            "contents": "CUIConfigEvent::EModuleType::Undefined",
            "trigger": "CUIConfigEvent::EModuleType::Undefined"
        },
        {
            "contents": "CUIConfigEvent::EModuleType::Hud",
            "trigger": "CUIConfigEvent::EModuleType::Hud"
        },
        {
            "contents": "CUIConfigEvent::EModuleType::Inventory",
            "trigger": "CUIConfigEvent::EModuleType::Inventory"
        },
        {
            "contents": "CUIConfigEvent::EModuleType::Store",
            "trigger": "CUIConfigEvent::EModuleType::Store"
        },
        {
            "contents": "CUIConfigEvent::EModuleType::ScoresTable",
            "trigger": "CUIConfigEvent::EModuleType::ScoresTable"
        },
        {
            "contents": "CUIConfigEvent::EModuleType::Equipment",
            "trigger": "CUIConfigEvent::EModuleType::Equipment"
        },
        {
            "contents": "CUIConfigEvent::EModuleType::MenuBase",
            "trigger": "CUIConfigEvent::EModuleType::MenuBase"
        },
        {
            "contents": "CUIConfigEvent::EModuleType::MenuPage",
            "trigger": "CUIConfigEvent::EModuleType::MenuPage"
        },
        {
            "contents": "Type",
            "trigger": "EType CUIConfigEvent.Type"
        },
        {
            "contents": "UIConfig",
            "trigger": "CUIConfig CUIConfigEvent.UIConfig"
        },
        {
            "contents": "Param1",
            "trigger": "Text CUIConfigEvent.Param1"
        },
        {
            "contents": "Param2",
            "trigger": "Text[] CUIConfigEvent.Param2"
        },
        {
            "contents": "ItemUrl",
            "trigger": "Text CUIConfigEvent.ItemUrl"
        },
        {
            "contents": "Quantity",
            "trigger": "Integer CUIConfigEvent.Quantity"
        },
        {
            "contents": "ModuleType",
            "trigger": "EModuleType CUIConfigEvent.ModuleType"
        },
        {
            "contents": "CSmBase",
            "trigger": "CSmBase"
        },
        {
            "contents": "Clan",
            "trigger": "Integer CSmBase.Clan"
        },
        {
            "contents": "IsActive",
            "trigger": "Boolean CSmBase.IsActive"
        },
        {
            "contents": "NumberOfCollectors",
            "trigger": "Integer CSmBase.NumberOfCollectors"
        },
        {
            "contents": "CModulePlaygroundHud",
            "trigger": "CModulePlaygroundHud"
        },
        {
            "contents": "Inventory",
            "trigger": "CModulePlaygroundInventory CModulePlaygroundHud.Inventory"
        },
        {
            "contents": "Store",
            "trigger": "CModulePlaygroundStore CModulePlaygroundHud.Store"
        },
        {
            "contents": "ScoresTable",
            "trigger": "CModulePlaygroundScoresTable CModulePlaygroundHud.ScoresTable"
        },
        {
            "contents": "CModuleMenuLayer",
            "trigger": "CModuleMenuLayer"
        },
        {
            "contents": "Components",
            "trigger": "CModuleMenuComponent[] CModuleMenuLayer.Components"
        },
        {
            "contents": "GetFirstComponent(${0:Text Name})",
            "trigger": "CModuleMenuComponent GetFirstComponent(Text Name)"
        },
        {
            "contents": "CScore",
            "trigger": "CScore"
        },
        {
            "contents": "User",
            "trigger": "CUser CScore.User"
        },
        {
            "contents": "IsRegisteredForLadderMatch",
            "trigger": "Boolean CScore.IsRegisteredForLadderMatch"
        },
        {
            "contents": "LadderScore",
            "trigger": "Real CScore.LadderScore"
        },
        {
            "contents": "LadderRankSortValue",
            "trigger": "Integer CScore.LadderRankSortValue"
        },
        {
            "contents": "LadderMatchScoreValue",
            "trigger": "Real CScore.LadderMatchScoreValue"
        },
        {
            "contents": "LadderClan",
            "trigger": "Integer CScore.LadderClan"
        },
        {
            "contents": "CSmMapSector",
            "trigger": "CSmMapSector"
        },
        {
            "contents": "PlayersIds",
            "trigger": "Ident[] CSmMapSector.PlayersIds"
        },
        {
            "contents": "Tag",
            "trigger": "Text CSmMapSector.Tag"
        },
        {
            "contents": "CTrackManiaScore",
            "trigger": "CTrackManiaScore"
        },
        {
            "contents": "CMlGauge",
            "trigger": "CMlGauge"
        },
        {
            "contents": "Style",
            "trigger": "Text CMlGauge.Style"
        },
        {
            "contents": "Ratio",
            "trigger": "Real CMlGauge.Ratio"
        },
        {
            "contents": "GradingRatio",
            "trigger": "Real CMlGauge.GradingRatio"
        },
        {
            "contents": "Clan",
            "trigger": "Integer CMlGauge.Clan"
        },
        {
            "contents": "Color",
            "trigger": "Vec3 CMlGauge.Color"
        },
        {
            "contents": "DrawBackground",
            "trigger": "Boolean CMlGauge.DrawBackground"
        },
        {
            "contents": "DrawBlockBackground",
            "trigger": "Boolean CMlGauge.DrawBlockBackground"
        },
        {
            "contents": "CenteredBar",
            "trigger": "Boolean CMlGauge.CenteredBar"
        },
        {
            "contents": "SetRatio(${0:Real NewRatio})",
            "trigger": "Void SetRatio(Real NewRatio)"
        },
        {
            "contents": "SetClan(${0:Integer NewClan})",
            "trigger": "Void SetClan(Integer NewClan)"
        },
        {
            "contents": "CSmBlockPole",
            "trigger": "CSmBlockPole"
        },
        {
            "contents": "Captured",
            "trigger": "Boolean CSmBlockPole.Captured"
        },
        {
            "contents": "Sector",
            "trigger": "CSmSector CSmBlockPole.Sector"
        },
        {
            "contents": "Gauge",
            "trigger": "CSmGauge CSmBlockPole.Gauge"
        },
        {
            "contents": "CTaskResult_CheckTargetedPrivilege",
            "trigger": "CTaskResult_CheckTargetedPrivilege"
        },
        {
            "contents": "AddLogin(${0:Text Login})",
            "trigger": "Void AddLogin(Text Login)"
        },
        {
            "contents": "StartTask()",
            "trigger": "Void StartTask()"
        },
        {
            "contents": "HasPrivilege(${0:Text Login})",
            "trigger": "Boolean HasPrivilege(Text Login)"
        },
        {
            "contents": "GetDenyReason(${0:Text Login})",
            "trigger": "Text GetDenyReason(Text Login)"
        },
        {
            "contents": "CUserV2",
            "trigger": "CUserV2"
        },
        {
            "contents": "SystemName",
            "trigger": "Text CUserV2.SystemName"
        },
        {
            "contents": "DisplayName",
            "trigger": "Text CUserV2.DisplayName"
        },
        {
            "contents": "Color",
            "trigger": "Vec3 CUserV2.Color"
        },
        {
            "contents": "PersistentIsReady",
            "trigger": "Boolean CUserV2.PersistentIsReady"
        },
        {
            "contents": "Config",
            "trigger": "CUserV2Profile CUserV2.Config"
        },
        {
            "contents": "PersistentSave()",
            "trigger": "Void PersistentSave()"
        },
        {
            "contents": "CXmlRpcEvent",
            "trigger": "CXmlRpcEvent"
        },
        {
            "contents": "CXmlRpcEvent::EType::Unknown",
            "trigger": "CXmlRpcEvent::EType::Unknown"
        },
        {
            "contents": "CXmlRpcEvent::EType::Callback",
            "trigger": "CXmlRpcEvent::EType::Callback"
        },
        {
            "contents": "CXmlRpcEvent::EType::CallbackArray",
            "trigger": "CXmlRpcEvent::EType::CallbackArray"
        },
        {
            "contents": "Type",
            "trigger": "EType CXmlRpcEvent.Type"
        },
        {
            "contents": "Param1",
            "trigger": "Text CXmlRpcEvent.Param1"
        },
        {
            "contents": "Param2",
            "trigger": "Text CXmlRpcEvent.Param2"
        },
        {
            "contents": "ParamArray1",
            "trigger": "Text CXmlRpcEvent.ParamArray1"
        },
        {
            "contents": "ParamArray2",
            "trigger": "Text[] CXmlRpcEvent.ParamArray2"
        },
        {
            "contents": "CScoreMgr",
            "trigger": "CScoreMgr"
        },
        {
            "contents": "CScoreMgr::ELocalScoreStatus::None",
            "trigger": "CScoreMgr::ELocalScoreStatus::None"
        },
        {
            "contents": "CScoreMgr::ELocalScoreStatus::Loading",
            "trigger": "CScoreMgr::ELocalScoreStatus::Loading"
        },
        {
            "contents": "CScoreMgr::ELocalScoreStatus::NotLoaded",
            "trigger": "CScoreMgr::ELocalScoreStatus::NotLoaded"
        },
        {
            "contents": "CScoreMgr::ELocalScoreStatus::Loaded",
            "trigger": "CScoreMgr::ELocalScoreStatus::Loaded"
        },
        {
            "contents": "CScoreMgr::EMasterServerScoreStatus::None",
            "trigger": "CScoreMgr::EMasterServerScoreStatus::None"
        },
        {
            "contents": "CScoreMgr::EMasterServerScoreStatus::Synchronizing",
            "trigger": "CScoreMgr::EMasterServerScoreStatus::Synchronizing"
        },
        {
            "contents": "CScoreMgr::EMasterServerScoreStatus::NotSynchronized",
            "trigger": "CScoreMgr::EMasterServerScoreStatus::NotSynchronized"
        },
        {
            "contents": "CScoreMgr::EMasterServerScoreStatus::Synchronized",
            "trigger": "CScoreMgr::EMasterServerScoreStatus::Synchronized"
        },
        {
            "contents": "TaskResults",
            "trigger": "CTaskResult[] CScoreMgr.TaskResults"
        },
        {
            "contents": "TaskResult_Release(${0:Ident TaskId})",
            "trigger": "Void TaskResult_Release(Ident TaskId)"
        },
        {
            "contents": "ScoreStatus_GetLocalStatus(${0:Ident UserId})",
            "trigger": "ELocalScoreStatus ScoreStatus_GetLocalStatus(Ident UserId)"
        },
        {
            "contents": "ScoreStatus_GetMasterServerStatus(${0:Ident UserId})",
            "trigger": "EMasterServerScoreStatus ScoreStatus_GetMasterServerStatus(Ident UserId)"
        },
        {
            "contents": "Playground_GetPlayerGhost(${0:CPlayer GamePlayer})",
            "trigger": "CGhost Playground_GetPlayerGhost(CPlayer GamePlayer)"
        },
        {
            "contents": "Map_SetNewRecord(${0:Ident UserId}, ${1:Text MapUid}, ${2:Text Context}, ${3:CGhost Ghost})",
            "trigger": "CTaskResult Map_SetNewRecord(Ident UserId, Text MapUid, Text Context, CGhost Ghost)"
        },
        {
            "contents": "Map_GetRecord(${0:Ident UserId}, ${1:Text MapUid}, ${2:Text Context})",
            "trigger": "Integer Map_GetRecord(Ident UserId, Text MapUid, Text Context)"
        },
        {
            "contents": "Map_GetRecordGhost(${0:Ident UserId}, ${1:Text MapUid}, ${2:Text Context})",
            "trigger": "CTaskResult_Ghost Map_GetRecordGhost(Ident UserId, Text MapUid, Text Context)"
        },
        {
            "contents": "Map_GetMultiAsyncLevel(${0:Ident UserId}, ${1:Text MapUid}, ${2:Text Context})",
            "trigger": "Integer Map_GetMultiAsyncLevel(Ident UserId, Text MapUid, Text Context)"
        },
        {
            "contents": "Map_GetMultiAsyncLevelRecord(${0:Text MapUid}, ${1:Text Context}, ${2:Integer MultiAsyncLevel})",
            "trigger": "Integer Map_GetMultiAsyncLevelRecord(Text MapUid, Text Context, Integer MultiAsyncLevel)"
        },
        {
            "contents": "Map_GetMultiAsyncLevelRecordGhost(${0:Text MapUid}, ${1:Text Context}, ${2:Integer MultiAsyncLevel})",
            "trigger": "CTaskResult_Ghost Map_GetMultiAsyncLevelRecordGhost(Text MapUid, Text Context, Integer MultiAsyncLevel)"
        },
        {
            "contents": "Map_GetSkillPoints(${0:Ident UserId}, ${1:Text MapUid}, ${2:Text Context})",
            "trigger": "Integer Map_GetSkillPoints(Ident UserId, Text MapUid, Text Context)"
        },
        {
            "contents": "MapLeaderBoard_GetPlayerRanking(${0:Ident UserId}, ${1:Text MapUid}, ${2:Text Context}, ${3:Text Zone})",
            "trigger": "Integer MapLeaderBoard_GetPlayerRanking(Ident UserId, Text MapUid, Text Context, Text Zone)"
        },
        {
            "contents": "MapLeaderBoard_GetPlayerCount(${0:Text MapUid}, ${1:Text Context}, ${2:Text Zone})",
            "trigger": "Integer MapLeaderBoard_GetPlayerCount(Text MapUid, Text Context, Text Zone)"
        },
        {
            "contents": "Campaign_GetMultiAsyncLevel(${0:Ident UserId}, ${1:Text CampaignId})",
            "trigger": "Integer Campaign_GetMultiAsyncLevel(Ident UserId, Text CampaignId)"
        },
        {
            "contents": "Campaign_GetMultiAsyncLevelCount(${0:Ident UserId}, ${1:Text CampaignId}, ${2:Integer MultiAsyncLevel})",
            "trigger": "Integer Campaign_GetMultiAsyncLevelCount(Ident UserId, Text CampaignId, Integer MultiAsyncLevel)"
        },
        {
            "contents": "Campaign_GetSkillPoints(${0:Ident UserId}, ${1:Text CampaignId})",
            "trigger": "Integer Campaign_GetSkillPoints(Ident UserId, Text CampaignId)"
        },
        {
            "contents": "Campaign_GetBuddiesMapRecord(${0:Ident UserId}, ${1:Text CampaignId}, ${2:Text MapUid})",
            "trigger": "CTaskResult_BuddiesChallengeRecord Campaign_GetBuddiesMapRecord(Ident UserId, Text CampaignId, Text MapUid)"
        },
        {
            "contents": "Campaign_IsBuddiesMapRecordDirty(${0:Ident UserId}, ${1:Text CampaignId}, ${2:Text MapUid})",
            "trigger": "Boolean Campaign_IsBuddiesMapRecordDirty(Ident UserId, Text CampaignId, Text MapUid)"
        },
        {
            "contents": "Campaign_GetBuddiesMapRecordsComparison(${0:Ident UserId}, ${1:Text CampaignId})",
            "trigger": "CTaskResult_BuddiesChallengeRecordsComparison Campaign_GetBuddiesMapRecordsComparison(Ident UserId, Text CampaignId)"
        },
        {
            "contents": "Campaign_GetBuddyMapRecordsComparison(${0:Ident UserId}, ${1:Text OpponentLogin}, ${2:Text CampaignId})",
            "trigger": "CTaskResult_BuddyChallengeRecordsComparison Campaign_GetBuddyMapRecordsComparison(Ident UserId, Text OpponentLogin, Text CampaignId)"
        },
        {
            "contents": "CampaignLeaderBoard_GetPlayerRanking(${0:Ident UserId}, ${1:Text CampaignId}, ${2:Text Zone}, ${3:Boolean UseSkillPoints})",
            "trigger": "Integer CampaignLeaderBoard_GetPlayerRanking(Ident UserId, Text CampaignId, Text Zone, Boolean UseSkillPoints)"
        },
        {
            "contents": "CampaignLeaderBoard_GetPlayerCount(${0:Text CampaignId}, ${1:Text Zone}, ${2:Boolean UseSkillPoints})",
            "trigger": "Integer CampaignLeaderBoard_GetPlayerCount(Text CampaignId, Text Zone, Boolean UseSkillPoints)"
        },
        {
            "contents": "Multiplayer_AddToScore(${0:Ident UserId}, ${1:Real ScoreDiff}, ${2:Integer Timestamp})",
            "trigger": "Void Multiplayer_AddToScore(Ident UserId, Real ScoreDiff, Integer Timestamp)"
        },
        {
            "contents": "MultiplayerLeaderBoard_GetPlayerRanking(${0:Ident UserId}, ${1:Text Zone})",
            "trigger": "Integer MultiplayerLeaderBoard_GetPlayerRanking(Ident UserId, Text Zone)"
        },
        {
            "contents": "MultiplayerLeaderBoard_GetPlayerCount(${0:Text Zone})",
            "trigger": "Integer MultiplayerLeaderBoard_GetPlayerCount(Text Zone)"
        },
        {
            "contents": "GlobalLeaderBoard_GetPlayerRanking(${0:Ident UserId}, ${1:Text Zone})",
            "trigger": "Integer GlobalLeaderBoard_GetPlayerRanking(Ident UserId, Text Zone)"
        },
        {
            "contents": "GlobalLeaderBoard_GetPlayerCount(${0:Text Zone})",
            "trigger": "Integer GlobalLeaderBoard_GetPlayerCount(Text Zone)"
        },
        {
            "contents": "GlobalLeaderBoard_GetPlayerList(${0:Ident UserId}, ${1:Text Zone}, ${2:Integer FromIndex}, ${3:Integer Count})",
            "trigger": "CTaskResult_RealLeaderBoard GlobalLeaderBoard_GetPlayerList(Ident UserId, Text Zone, Integer FromIndex, Integer Count)"
        },
        {
            "contents": "CBadge",
            "trigger": "CBadge"
        },
        {
            "contents": "PrimaryColor",
            "trigger": "Vec3 CBadge.PrimaryColor"
        },
        {
            "contents": "SkinName",
            "trigger": "Text CBadge.SkinName"
        },
        {
            "contents": "Layers",
            "trigger": "Text[] CBadge.Layers"
        },
        {
            "contents": "StickerSlot_Get(${0:Text Slot})",
            "trigger": "Text StickerSlot_Get(Text Slot)"
        },
        {
            "contents": "StickerSlot_Set(${0:Text Slot}, ${1:Text Sticker})",
            "trigger": "Void StickerSlot_Set(Text Slot, Text Sticker)"
        },
        {
            "contents": "StickerSlot_Clear()",
            "trigger": "Void StickerSlot_Clear()"
        },
        {
            "contents": "CXmlManager",
            "trigger": "CXmlManager"
        },
        {
            "contents": "Documents",
            "trigger": "CXmlDocument[] CXmlManager.Documents"
        },
        {
            "contents": "DocumentsSlotsLimit",
            "trigger": "Integer CXmlManager.DocumentsSlotsLimit"
        },
        {
            "contents": "Create(${0:Text Contents})",
            "trigger": "CXmlDocument Create(Text Contents)"
        },
        {
            "contents": "Create(${0:Text Contents}, ${1:Boolean GenerateText}, ${2:Boolean GenerateTextRaw}, ${3:Boolean GenerateTextResursive})",
            "trigger": "CXmlDocument Create(Text Contents, Boolean GenerateText, Boolean GenerateTextRaw, Boolean GenerateTextResursive)"
        },
        {
            "contents": "Destroy(${0:CXmlDocument Document})",
            "trigger": "Void Destroy(CXmlDocument Document)"
        },
        {
            "contents": "CUser",
            "trigger": "CUser"
        },
        {
            "contents": "CUser::EEchelon::None",
            "trigger": "CUser::EEchelon::None"
        },
        {
            "contents": "CUser::EEchelon::Bronze1",
            "trigger": "CUser::EEchelon::Bronze1"
        },
        {
            "contents": "CUser::EEchelon::Bronze2",
            "trigger": "CUser::EEchelon::Bronze2"
        },
        {
            "contents": "CUser::EEchelon::Bronze3",
            "trigger": "CUser::EEchelon::Bronze3"
        },
        {
            "contents": "CUser::EEchelon::Silver1",
            "trigger": "CUser::EEchelon::Silver1"
        },
        {
            "contents": "CUser::EEchelon::Silver2",
            "trigger": "CUser::EEchelon::Silver2"
        },
        {
            "contents": "CUser::EEchelon::Silver3",
            "trigger": "CUser::EEchelon::Silver3"
        },
        {
            "contents": "CUser::EEchelon::Gold1",
            "trigger": "CUser::EEchelon::Gold1"
        },
        {
            "contents": "CUser::EEchelon::Gold2",
            "trigger": "CUser::EEchelon::Gold2"
        },
        {
            "contents": "CUser::EEchelon::Gold3",
            "trigger": "CUser::EEchelon::Gold3"
        },
        {
            "contents": "CUser::ETagType::Bronze",
            "trigger": "CUser::ETagType::Bronze"
        },
        {
            "contents": "CUser::ETagType::Silver",
            "trigger": "CUser::ETagType::Silver"
        },
        {
            "contents": "CUser::ETagType::Gold",
            "trigger": "CUser::ETagType::Gold"
        },
        {
            "contents": "CUser::ETagType::Nadeo",
            "trigger": "CUser::ETagType::Nadeo"
        },
        {
            "contents": "CUser::EStereoDisplayMode::None",
            "trigger": "CUser::EStereoDisplayMode::None"
        },
        {
            "contents": "CUser::EStereoDisplayMode::Stereo",
            "trigger": "CUser::EStereoDisplayMode::Stereo"
        },
        {
            "contents": "CUser::EStereoDisplayMode::HMD",
            "trigger": "CUser::EStereoDisplayMode::HMD"
        },
        {
            "contents": "CUser::EMuteSetting::Auto",
            "trigger": "CUser::EMuteSetting::Auto"
        },
        {
            "contents": "CUser::EMuteSetting::Muted",
            "trigger": "CUser::EMuteSetting::Muted"
        },
        {
            "contents": "CUser::EMuteSetting::NotMuted",
            "trigger": "CUser::EMuteSetting::NotMuted"
        },
        {
            "contents": "CUser::PlayerType::Human",
            "trigger": "CUser::PlayerType::Human"
        },
        {
            "contents": "CUser::PlayerType::Fake",
            "trigger": "CUser::PlayerType::Fake"
        },
        {
            "contents": "CUser::PlayerType::Net",
            "trigger": "CUser::PlayerType::Net"
        },
        {
            "contents": "CUser::PlayerType::Replay",
            "trigger": "CUser::PlayerType::Replay"
        },
        {
            "contents": "CUser::SpectatorMode::Void",
            "trigger": "CUser::SpectatorMode::Void"
        },
        {
            "contents": "CUser::SpectatorMode::Watcher",
            "trigger": "CUser::SpectatorMode::Watcher"
        },
        {
            "contents": "CUser::SpectatorMode::LocalWatcher",
            "trigger": "CUser::SpectatorMode::LocalWatcher"
        },
        {
            "contents": "CUser::SpectatorMode::Target",
            "trigger": "CUser::SpectatorMode::Target"
        },
        {
            "contents": "Login",
            "trigger": "Text CUser.Login"
        },
        {
            "contents": "Name",
            "trigger": "Text CUser.Name"
        },
        {
            "contents": "AvatarUrl",
            "trigger": "Text CUser.AvatarUrl"
        },
        {
            "contents": "ZonePath",
            "trigger": "Text CUser.ZonePath"
        },
        {
            "contents": "ZoneFlagUrl",
            "trigger": "Text CUser.ZoneFlagUrl"
        },
        {
            "contents": "CountryFlagUrl",
            "trigger": "Text CUser.CountryFlagUrl"
        },
        {
            "contents": "Language",
            "trigger": "Text CUser.Language"
        },
        {
            "contents": "Description",
            "trigger": "Text CUser.Description"
        },
        {
            "contents": "Color",
            "trigger": "Vec3 CUser.Color"
        },
        {
            "contents": "ClubLink",
            "trigger": "Text CUser.ClubLink"
        },
        {
            "contents": "BroadcastTVLogin",
            "trigger": "Text CUser.BroadcastTVLogin"
        },
        {
            "contents": "SteamUserId",
            "trigger": "Text CUser.SteamUserId"
        },
        {
            "contents": "FameStars",
            "trigger": "Integer CUser.FameStars"
        },
        {
            "contents": "Echelon",
            "trigger": "EEchelon CUser.Echelon"
        },
        {
            "contents": "NextEchelonPercent",
            "trigger": "Integer CUser.NextEchelonPercent"
        },
        {
            "contents": "IsBeginner",
            "trigger": "Boolean CUser.IsBeginner"
        },
        {
            "contents": "LadderRank",
            "trigger": "Integer CUser.LadderRank"
        },
        {
            "contents": "LadderTotal",
            "trigger": "Integer CUser.LadderTotal"
        },
        {
            "contents": "LadderPoints",
            "trigger": "Real CUser.LadderPoints"
        },
        {
            "contents": "LadderZoneName",
            "trigger": "Text CUser.LadderZoneName"
        },
        {
            "contents": "LadderZoneFlagUrl",
            "trigger": "Text CUser.LadderZoneFlagUrl"
        },
        {
            "contents": "IsFakeUser",
            "trigger": "Boolean CUser.IsFakeUser"
        },
        {
            "contents": "Tags_Favored_Indices",
            "trigger": "Integer[] CUser.Tags_Favored_Indices"
        },
        {
            "contents": "Tags_Id",
            "trigger": "Text[] CUser.Tags_Id"
        },
        {
            "contents": "Tags_Type",
            "trigger": "ETagType[] CUser.Tags_Type"
        },
        {
            "contents": "Tags_Comments",
            "trigger": "Text[] CUser.Tags_Comments"
        },
        {
            "contents": "Tags_Deliverer",
            "trigger": "Text[] CUser.Tags_Deliverer"
        },
        {
            "contents": "VoiceChat_Supported",
            "trigger": "Boolean CUser.VoiceChat_Supported"
        },
        {
            "contents": "VoiceChat_MuteSetting",
            "trigger": "EMuteSetting CUser.VoiceChat_MuteSetting"
        },
        {
            "contents": "VoiceChat_IsSpeaking",
            "trigger": "Boolean CUser.VoiceChat_IsSpeaking"
        },
        {
            "contents": "VoiceChat_IsMuted",
            "trigger": "Boolean CUser.VoiceChat_IsMuted"
        },
        {
            "contents": "IsConnectedToMasterServer",
            "trigger": "Boolean CUser.IsConnectedToMasterServer"
        },
        {
            "contents": "AlliesConnected",
            "trigger": "Text[] CUser.AlliesConnected"
        },
        {
            "contents": "StereoDisplayMode",
            "trigger": "EStereoDisplayMode CUser.StereoDisplayMode"
        },
        {
            "contents": "HackCamHmdDisabled",
            "trigger": "Boolean CUser.HackCamHmdDisabled"
        },
        {
            "contents": "CSmPlayerDriver",
            "trigger": "CSmPlayerDriver"
        },
        {
            "contents": "CSmPlayerDriver::ESmDriverBehaviour::Static",
            "trigger": "CSmPlayerDriver::ESmDriverBehaviour::Static"
        },
        {
            "contents": "CSmPlayerDriver::ESmDriverBehaviour::Turret",
            "trigger": "CSmPlayerDriver::ESmDriverBehaviour::Turret"
        },
        {
            "contents": "CSmPlayerDriver::ESmDriverBehaviour::Scripted",
            "trigger": "CSmPlayerDriver::ESmDriverBehaviour::Scripted"
        },
        {
            "contents": "CSmPlayerDriver::ESmDriverBehaviour::IA",
            "trigger": "CSmPlayerDriver::ESmDriverBehaviour::IA"
        },
        {
            "contents": "CSmPlayerDriver::ESmDriverBehaviour::Patrol",
            "trigger": "CSmPlayerDriver::ESmDriverBehaviour::Patrol"
        },
        {
            "contents": "CSmPlayerDriver::ESmDriverBehaviour::Escape",
            "trigger": "CSmPlayerDriver::ESmDriverBehaviour::Escape"
        },
        {
            "contents": "CSmPlayerDriver::ESmDriverBehaviour::Saunter",
            "trigger": "CSmPlayerDriver::ESmDriverBehaviour::Saunter"
        },
        {
            "contents": "CSmPlayerDriver::ESmDriverPatrolMode::OneTrip",
            "trigger": "CSmPlayerDriver::ESmDriverPatrolMode::OneTrip"
        },
        {
            "contents": "CSmPlayerDriver::ESmDriverPatrolMode::BackAndForth",
            "trigger": "CSmPlayerDriver::ESmDriverPatrolMode::BackAndForth"
        },
        {
            "contents": "CSmPlayerDriver::ESmDriverPatrolMode::Loop",
            "trigger": "CSmPlayerDriver::ESmDriverPatrolMode::Loop"
        },
        {
            "contents": "CSmPlayerDriver::ESmAttackFilter::All",
            "trigger": "CSmPlayerDriver::ESmAttackFilter::All"
        },
        {
            "contents": "CSmPlayerDriver::ESmAttackFilter::AllPlayers",
            "trigger": "CSmPlayerDriver::ESmAttackFilter::AllPlayers"
        },
        {
            "contents": "CSmPlayerDriver::ESmAttackFilter::AllBots",
            "trigger": "CSmPlayerDriver::ESmAttackFilter::AllBots"
        },
        {
            "contents": "CSmPlayerDriver::ESmAttackFilter::AllOpposite",
            "trigger": "CSmPlayerDriver::ESmAttackFilter::AllOpposite"
        },
        {
            "contents": "CSmPlayerDriver::ESmAttackFilter::OppositePlayers",
            "trigger": "CSmPlayerDriver::ESmAttackFilter::OppositePlayers"
        },
        {
            "contents": "CSmPlayerDriver::ESmAttackFilter::OppositeBots",
            "trigger": "CSmPlayerDriver::ESmAttackFilter::OppositeBots"
        },
        {
            "contents": "CSmPlayerDriver::ESmAttackFilter::Nobody",
            "trigger": "CSmPlayerDriver::ESmAttackFilter::Nobody"
        },
        {
            "contents": "Behaviour",
            "trigger": "ESmDriverBehaviour CSmPlayerDriver.Behaviour"
        },
        {
            "contents": "AggroRadius",
            "trigger": "Real CSmPlayerDriver.AggroRadius"
        },
        {
            "contents": "ShootRadius",
            "trigger": "Real CSmPlayerDriver.ShootRadius"
        },
        {
            "contents": "TargetMinDistance",
            "trigger": "Real CSmPlayerDriver.TargetMinDistance"
        },
        {
            "contents": "DisengageDistance",
            "trigger": "Real CSmPlayerDriver.DisengageDistance"
        },
        {
            "contents": "PathSpeedCoef",
            "trigger": "Real CSmPlayerDriver.PathSpeedCoef"
        },
        {
            "contents": "Accuracy",
            "trigger": "Real CSmPlayerDriver.Accuracy"
        },
        {
            "contents": "ReactionTime",
            "trigger": "Integer CSmPlayerDriver.ReactionTime"
        },
        {
            "contents": "ShootPeriodMin",
            "trigger": "Integer CSmPlayerDriver.ShootPeriodMin"
        },
        {
            "contents": "ShootPeriodMax",
            "trigger": "Integer CSmPlayerDriver.ShootPeriodMax"
        },
        {
            "contents": "RocketAnticipation",
            "trigger": "Boolean CSmPlayerDriver.RocketAnticipation"
        },
        {
            "contents": "Fov",
            "trigger": "Real CSmPlayerDriver.Fov"
        },
        {
            "contents": "AttackFilter",
            "trigger": "ESmAttackFilter CSmPlayerDriver.AttackFilter"
        },
        {
            "contents": "Target",
            "trigger": "CSmPlayer CSmPlayerDriver.Target"
        },
        {
            "contents": "IsStuck",
            "trigger": "Boolean CSmPlayerDriver.IsStuck"
        },
        {
            "contents": "IsFlying",
            "trigger": "Boolean CSmPlayerDriver.IsFlying"
        },
        {
            "contents": "Owner",
            "trigger": "CSmPlayer CSmPlayerDriver.Owner"
        },
        {
            "contents": "PathOffset",
            "trigger": "Integer CSmPlayerDriver.PathOffset"
        },
        {
            "contents": "Agressivity",
            "trigger": "Real CSmPlayerDriver.Agressivity"
        },
        {
            "contents": "UseOldShootingSystem",
            "trigger": "Boolean CSmPlayerDriver.UseOldShootingSystem"
        },
        {
            "contents": "Patrol_Mode",
            "trigger": "ESmDriverPatrolMode CSmPlayerDriver.Patrol_Mode"
        },
        {
            "contents": "Escape_AnchorPoint",
            "trigger": "Vec3 CSmPlayerDriver.Escape_AnchorPoint"
        },
        {
            "contents": "Escape_DistanceSafe",
            "trigger": "Real CSmPlayerDriver.Escape_DistanceSafe"
        },
        {
            "contents": "Escape_DistanceMinEscape",
            "trigger": "Real CSmPlayerDriver.Escape_DistanceMinEscape"
        },
        {
            "contents": "Escape_DistanceMaxEscape",
            "trigger": "Real CSmPlayerDriver.Escape_DistanceMaxEscape"
        },
        {
            "contents": "Saunter_AnchorPoint",
            "trigger": "Vec3 CSmPlayerDriver.Saunter_AnchorPoint"
        },
        {
            "contents": "Saunter_BaseChillingTime",
            "trigger": "Integer CSmPlayerDriver.Saunter_BaseChillingTime"
        },
        {
            "contents": "Saunter_ChillingTimeDelta",
            "trigger": "Integer CSmPlayerDriver.Saunter_ChillingTimeDelta"
        },
        {
            "contents": "Saunter_Radius",
            "trigger": "Real CSmPlayerDriver.Saunter_Radius"
        },
        {
            "contents": "Scripted_ForceAimInMoveDir",
            "trigger": "Boolean CSmPlayerDriver.Scripted_ForceAimInMoveDir"
        },
        {
            "contents": "ForcedTarget",
            "trigger": "CSmPlayer CSmPlayerDriver.ForcedTarget"
        },
        {
            "contents": "TargetsToAvoid",
            "trigger": "CSmPlayer[] CSmPlayerDriver.TargetsToAvoid"
        },
        {
            "contents": "CSmMapBotPath",
            "trigger": "CSmMapBotPath"
        },
        {
            "contents": "Clan",
            "trigger": "Integer CSmMapBotPath.Clan"
        },
        {
            "contents": "Path",
            "trigger": "Vec3[] CSmMapBotPath.Path"
        },
        {
            "contents": "IsFlying",
            "trigger": "Boolean CSmMapBotPath.IsFlying"
        },
        {
            "contents": "CMapType",
            "trigger": "CMapType"
        },
        {
            "contents": "CMapType::ValidationStatus::NotValidable",
            "trigger": "CMapType::ValidationStatus::NotValidable"
        },
        {
            "contents": "CMapType::ValidationStatus::Validable",
            "trigger": "CMapType::ValidationStatus::Validable"
        },
        {
            "contents": "CMapType::ValidationStatus::Validated",
            "trigger": "CMapType::ValidationStatus::Validated"
        },
        {
            "contents": "CustomEditAnchorData",
            "trigger": "Boolean CMapType.CustomEditAnchorData"
        },
        {
            "contents": "ValidationStatus",
            "trigger": "ValidationStatus CMapType.ValidationStatus"
        },
        {
            "contents": "ValidabilityRequirementsMessage",
            "trigger": "Text CMapType.ValidabilityRequirementsMessage"
        },
        {
            "contents": "ValidationEndRequested",
            "trigger": "Boolean CMapType.ValidationEndRequested"
        },
        {
            "contents": "ValidationEndNoConfirm",
            "trigger": "Boolean CMapType.ValidationEndNoConfirm"
        },
        {
            "contents": "IsSwitchedToPlayground",
            "trigger": "Boolean CMapType.IsSwitchedToPlayground"
        },
        {
            "contents": "UIManager",
            "trigger": "CUIConfigMgr CMapType.UIManager"
        },
        {
            "contents": "Users",
            "trigger": "CUser[] CMapType.Users"
        },
        {
            "contents": "ClearMapMetadata()",
            "trigger": "Void ClearMapMetadata()"
        },
        {
            "contents": "RequestEnterPlayground()",
            "trigger": "Void RequestEnterPlayground()"
        },
        {
            "contents": "RequestLeavePlayground()",
            "trigger": "Void RequestLeavePlayground()"
        },
        {
            "contents": "CMlCamera",
            "trigger": "CMlCamera"
        },
        {
            "contents": "CSmGauge",
            "trigger": "CSmGauge"
        },
        {
            "contents": "Clan",
            "trigger": "Integer CSmGauge.Clan"
        },
        {
            "contents": "ValueReal",
            "trigger": "Real CSmGauge.ValueReal"
        },
        {
            "contents": "Value",
            "trigger": "Integer CSmGauge.Value"
        },
        {
            "contents": "Max",
            "trigger": "Integer CSmGauge.Max"
        },
        {
            "contents": "Speed",
            "trigger": "Integer CSmGauge.Speed"
        },
        {
            "contents": "CAchievementsManager",
            "trigger": "CAchievementsManager"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CAchievementsEvent[] CAchievementsManager.PendingEvents"
        },
        {
            "contents": "Achievements",
            "trigger": "CAchievementsAchievement[] CAchievementsManager.Achievements"
        },
        {
            "contents": "Stats",
            "trigger": "CAchievementsStat[] CAchievementsManager.Stats"
        },
        {
            "contents": "AchievementDescriptions",
            "trigger": "CAchievementsAchievementDesc[] CAchievementsManager.AchievementDescriptions"
        },
        {
            "contents": "StatDescriptions",
            "trigger": "CAchievementsStatDesc[] CAchievementsManager.StatDescriptions"
        },
        {
            "contents": "SendEvent(${0:Ident UserId}, ${1:Text Mnemo}, ${2:Integer[] Params})",
            "trigger": "Void SendEvent(Ident UserId, Text Mnemo, Integer[] Params)"
        },
        {
            "contents": "CTmMapType",
            "trigger": "CTmMapType"
        },
        {
            "contents": "Mode",
            "trigger": "CTmMode CTmMapType.Mode"
        },
        {
            "contents": "AllPlayers",
            "trigger": "CTmPlayer[] CTmMapType.AllPlayers"
        },
        {
            "contents": "Players",
            "trigger": "CTmPlayer[] CTmMapType.Players"
        },
        {
            "contents": "TMObjective_SetFromBestRace(${0:CTmScore Score})",
            "trigger": "Void TMObjective_SetFromBestRace(CTmScore Score)"
        },
        {
            "contents": "CSmMapBase",
            "trigger": "CSmMapBase"
        },
        {
            "contents": "Clan",
            "trigger": "Integer CSmMapBase.Clan"
        },
        {
            "contents": "IsActive",
            "trigger": "Boolean CSmMapBase.IsActive"
        },
        {
            "contents": "NumberOfCollectors",
            "trigger": "Integer CSmMapBase.NumberOfCollectors"
        },
        {
            "contents": "CTaskResult_BuddyChallengeRecordsComparison",
            "trigger": "CTaskResult_BuddyChallengeRecordsComparison"
        },
        {
            "contents": "Login",
            "trigger": "Text CTaskResult_BuddyChallengeRecordsComparison.Login"
        },
        {
            "contents": "BuddyLogin",
            "trigger": "Text CTaskResult_BuddyChallengeRecordsComparison.BuddyLogin"
        },
        {
            "contents": "PlayerBestRecordsComparison",
            "trigger": "CHighScoreComparison[] CTaskResult_BuddyChallengeRecordsComparison.PlayerBestRecordsComparison"
        },
        {
            "contents": "BuddyBestRecordsComparison",
            "trigger": "CHighScoreComparison[] CTaskResult_BuddyChallengeRecordsComparison.BuddyBestRecordsComparison"
        },
        {
            "contents": "SortByMapName()",
            "trigger": "Void SortByMapName()"
        },
        {
            "contents": "SortByRecordTime()",
            "trigger": "Void SortByRecordTime()"
        },
        {
            "contents": "SortByRecordTimeDiff()",
            "trigger": "Void SortByRecordTimeDiff()"
        },
        {
            "contents": "SortByRecordDate()",
            "trigger": "Void SortByRecordDate()"
        },
        {
            "contents": "CVideo",
            "trigger": "CVideo"
        },
        {
            "contents": "CVideo::ETextureFilter::Default",
            "trigger": "CVideo::ETextureFilter::Default"
        },
        {
            "contents": "CVideo::ETextureFilter::Point",
            "trigger": "CVideo::ETextureFilter::Point"
        },
        {
            "contents": "Image",
            "trigger": "CImage CVideo.Image"
        },
        {
            "contents": "IsLooping",
            "trigger": "Boolean CVideo.IsLooping"
        },
        {
            "contents": "DownloadInProgress",
            "trigger": "Boolean CVideo.DownloadInProgress"
        },
        {
            "contents": "PlayLength",
            "trigger": "Real CVideo.PlayLength"
        },
        {
            "contents": "IsProcessing",
            "trigger": "Boolean CVideo.IsProcessing"
        },
        {
            "contents": "AutoProcessing",
            "trigger": "Boolean CVideo.AutoProcessing"
        },
        {
            "contents": "IsPlaying",
            "trigger": "Boolean CVideo.IsPlaying"
        },
        {
            "contents": "PlayCursor",
            "trigger": "Real CVideo.PlayCursor"
        },
        {
            "contents": "TextureFilter",
            "trigger": "ETextureFilter CVideo.TextureFilter"
        },
        {
            "contents": "BeginProcessing()",
            "trigger": "Void BeginProcessing()"
        },
        {
            "contents": "EndProcessing()",
            "trigger": "Void EndProcessing()"
        },
        {
            "contents": "Play()",
            "trigger": "Void Play()"
        },
        {
            "contents": "Pause()",
            "trigger": "Void Pause()"
        },
        {
            "contents": "Stop()",
            "trigger": "Void Stop()"
        },
        {
            "contents": "CModulePlaygroundInventory",
            "trigger": "CModulePlaygroundInventory"
        },
        {
            "contents": "AddItem(${0:CPlayer Player}, ${1:Text Url}, ${2:Integer Quantity})",
            "trigger": "Integer AddItem(CPlayer Player, Text Url, Integer Quantity)"
        },
        {
            "contents": "AddAction(${0:CPlayer Player}, ${1:Text Url})",
            "trigger": "Boolean AddAction(CPlayer Player, Text Url)"
        },
        {
            "contents": "RemoveInventoryItem(${0:CPlayer Player}, ${1:Text Url}, ${2:Integer Quantity})",
            "trigger": "Integer RemoveInventoryItem(CPlayer Player, Text Url, Integer Quantity)"
        },
        {
            "contents": "GetInventoryItemQuantity(${0:CPlayer Player}, ${1:Text Url})",
            "trigger": "Integer GetInventoryItemQuantity(CPlayer Player, Text Url)"
        },
        {
            "contents": "IsInventoryItemStored(${0:CPlayer Player}, ${1:Text Url})",
            "trigger": "Boolean IsInventoryItemStored(CPlayer Player, Text Url)"
        },
        {
            "contents": "GetStoredItemsList(${0:CPlayer Player})",
            "trigger": "Text[] GetStoredItemsList(CPlayer Player)"
        },
        {
            "contents": "GetStoredActionsList(${0:CPlayer Player})",
            "trigger": "Text[] GetStoredActionsList(CPlayer Player)"
        },
        {
            "contents": "CSmSector",
            "trigger": "CSmSector"
        },
        {
            "contents": "PlayersIds",
            "trigger": "Ident[] CSmSector.PlayersIds"
        },
        {
            "contents": "CMlGraphCurve",
            "trigger": "CMlGraphCurve"
        },
        {
            "contents": "Points",
            "trigger": "Vec2[] CMlGraphCurve.Points"
        },
        {
            "contents": "Color",
            "trigger": "Vec3 CMlGraphCurve.Color"
        },
        {
            "contents": "Style",
            "trigger": "Text CMlGraphCurve.Style"
        },
        {
            "contents": "Width",
            "trigger": "Real CMlGraphCurve.Width"
        },
        {
            "contents": "SortPoints()",
            "trigger": "Void SortPoints()"
        },
        {
            "contents": "CMlScript",
            "trigger": "CMlScript"
        },
        {
            "contents": "CMlScript::LinkType::ExternalBrowser",
            "trigger": "CMlScript::LinkType::ExternalBrowser"
        },
        {
            "contents": "CMlScript::LinkType::ManialinkBrowser",
            "trigger": "CMlScript::LinkType::ManialinkBrowser"
        },
        {
            "contents": "CMlScript::LinkType::Goto",
            "trigger": "CMlScript::LinkType::Goto"
        },
        {
            "contents": "CMlScript::LinkType::ExternalFromId",
            "trigger": "CMlScript::LinkType::ExternalFromId"
        },
        {
            "contents": "CMlScript::LinkType::ManialinkFromId",
            "trigger": "CMlScript::LinkType::ManialinkFromId"
        },
        {
            "contents": "CMlScript::LinkType::GotoFromId",
            "trigger": "CMlScript::LinkType::GotoFromId"
        },
        {
            "contents": "CMlScript::ESystemPlatform::None",
            "trigger": "CMlScript::ESystemPlatform::None"
        },
        {
            "contents": "CMlScript::ESystemPlatform::Steam",
            "trigger": "CMlScript::ESystemPlatform::Steam"
        },
        {
            "contents": "CMlScript::ESystemPlatform::UPlay",
            "trigger": "CMlScript::ESystemPlatform::UPlay"
        },
        {
            "contents": "CMlScript::ESystemPlatform::PS4",
            "trigger": "CMlScript::ESystemPlatform::PS4"
        },
        {
            "contents": "CMlScript::ESystemPlatform::XBoxOne",
            "trigger": "CMlScript::ESystemPlatform::XBoxOne"
        },
        {
            "contents": "CMlScript::ESystemSkuIdentifier::Unknown",
            "trigger": "CMlScript::ESystemSkuIdentifier::Unknown"
        },
        {
            "contents": "CMlScript::ESystemSkuIdentifier::EU",
            "trigger": "CMlScript::ESystemSkuIdentifier::EU"
        },
        {
            "contents": "CMlScript::ESystemSkuIdentifier::US",
            "trigger": "CMlScript::ESystemSkuIdentifier::US"
        },
        {
            "contents": "CMlScript::ESystemSkuIdentifier::JP",
            "trigger": "CMlScript::ESystemSkuIdentifier::JP"
        },
        {
            "contents": "Page",
            "trigger": "CMlPage CMlScript.Page"
        },
        {
            "contents": "PageIsVisible",
            "trigger": "Boolean CMlScript.PageIsVisible"
        },
        {
            "contents": "Now",
            "trigger": "Integer CMlScript.Now"
        },
        {
            "contents": "Period",
            "trigger": "Integer CMlScript.Period"
        },
        {
            "contents": "CurrentTime",
            "trigger": "Integer CMlScript.CurrentTime"
        },
        {
            "contents": "CurrentTimeText",
            "trigger": "Text CMlScript.CurrentTimeText"
        },
        {
            "contents": "CurrentLocalDateText",
            "trigger": "Text CMlScript.CurrentLocalDateText"
        },
        {
            "contents": "CurrentTimezone",
            "trigger": "Text CMlScript.CurrentTimezone"
        },
        {
            "contents": "LocalUser",
            "trigger": "CUser CMlScript.LocalUser"
        },
        {
            "contents": "LoadedTitle",
            "trigger": "CTitle CMlScript.LoadedTitle"
        },
        {
            "contents": "SystemPlatform",
            "trigger": "ESystemPlatform CMlScript.SystemPlatform"
        },
        {
            "contents": "SystemSkuIdentifier",
            "trigger": "ESystemSkuIdentifier CMlScript.SystemSkuIdentifier"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CMlScriptEvent[] CMlScript.PendingEvents"
        },
        {
            "contents": "Dbg_WarnOnDroppedEvents",
            "trigger": "Boolean CMlScript.Dbg_WarnOnDroppedEvents"
        },
        {
            "contents": "MouseX",
            "trigger": "Real CMlScript.MouseX"
        },
        {
            "contents": "MouseY",
            "trigger": "Real CMlScript.MouseY"
        },
        {
            "contents": "MouseLeftButton",
            "trigger": "Boolean CMlScript.MouseLeftButton"
        },
        {
            "contents": "MouseRightButton",
            "trigger": "Boolean CMlScript.MouseRightButton"
        },
        {
            "contents": "MouseMiddleButton",
            "trigger": "Boolean CMlScript.MouseMiddleButton"
        },
        {
            "contents": "KeyUp",
            "trigger": "Boolean CMlScript.KeyUp"
        },
        {
            "contents": "KeyDown",
            "trigger": "Boolean CMlScript.KeyDown"
        },
        {
            "contents": "KeyLeft",
            "trigger": "Boolean CMlScript.KeyLeft"
        },
        {
            "contents": "KeyRight",
            "trigger": "Boolean CMlScript.KeyRight"
        },
        {
            "contents": "KeyReturn",
            "trigger": "Boolean CMlScript.KeyReturn"
        },
        {
            "contents": "KeySpace",
            "trigger": "Boolean CMlScript.KeySpace"
        },
        {
            "contents": "KeyDelete",
            "trigger": "Boolean CMlScript.KeyDelete"
        },
        {
            "contents": "EnableMenuNavigationInputs",
            "trigger": "Boolean CMlScript.EnableMenuNavigationInputs"
        },
        {
            "contents": "IsMenuNavigationForeground",
            "trigger": "Boolean CMlScript.IsMenuNavigationForeground"
        },
        {
            "contents": "Xml",
            "trigger": "CXmlManager CMlScript.Xml"
        },
        {
            "contents": "Http",
            "trigger": "CHttpManager CMlScript.Http"
        },
        {
            "contents": "Video",
            "trigger": "CVideoManager CMlScript.Video"
        },
        {
            "contents": "Audio",
            "trigger": "CAudioManager CMlScript.Audio"
        },
        {
            "contents": "Input",
            "trigger": "CInputManager CMlScript.Input"
        },
        {
            "contents": "DataFileMgr",
            "trigger": "CDataFileMgr CMlScript.DataFileMgr"
        },
        {
            "contents": "ScoreMgr",
            "trigger": "CScoreMgr CMlScript.ScoreMgr"
        },
        {
            "contents": "PrivilegeMgr",
            "trigger": "CPrivilegeMgr CMlScript.PrivilegeMgr"
        },
        {
            "contents": "PresenceMgr",
            "trigger": "CPresenceMgr CMlScript.PresenceMgr"
        },
        {
            "contents": "AnimMgr",
            "trigger": "CAnimManager CMlScript.AnimMgr"
        },
        {
            "contents": "Dbg_SetProcessed(${0:CMlScriptEvent Event})",
            "trigger": "Void Dbg_SetProcessed(CMlScriptEvent Event)"
        },
        {
            "contents": "IsKeyPressed(${0:Integer KeyCode})",
            "trigger": "Boolean IsKeyPressed(Integer KeyCode)"
        },
        {
            "contents": "EnableMenuNavigation(${0:Boolean EnableInputs}, ${1:Boolean WithAutoFocus}, ${2:CMlControl AutoBackControl}, ${3:Integer InputPriority})",
            "trigger": "Void EnableMenuNavigation(Boolean EnableInputs, Boolean WithAutoFocus, CMlControl AutoBackControl, Integer InputPriority)"
        },
        {
            "contents": "OpenLink(${0:Text Url}, ${1:LinkType LinkType})",
            "trigger": "Void OpenLink(Text Url, LinkType LinkType)"
        },
        {
            "contents": "TriggerPageAction(${0:Text ActionString})",
            "trigger": "Void TriggerPageAction(Text ActionString)"
        },
        {
            "contents": "SendCustomEvent(${0:Text Type}, ${1:Text[] Data})",
            "trigger": "Void SendCustomEvent(Text Type, Text[] Data)"
        },
        {
            "contents": "PreloadImage(${0:Text ImageUrl})",
            "trigger": "Void PreloadImage(Text ImageUrl)"
        },
        {
            "contents": "PreloadAll()",
            "trigger": "Void PreloadAll()"
        },
        {
            "contents": "Dbg_DumpDeclareForVariables(${0:CNod Nod}, ${1:Boolean StatsOnly})",
            "trigger": "Text Dbg_DumpDeclareForVariables(CNod Nod, Boolean StatsOnly)"
        },
        {
            "contents": "CModeTurretManager",
            "trigger": "CModeTurretManager"
        },
        {
            "contents": "Turrets",
            "trigger": "CModeTurret[] CModeTurretManager.Turrets"
        },
        {
            "contents": "MapTurrets_Reset()",
            "trigger": "Void MapTurrets_Reset()"
        },
        {
            "contents": "Turret_Create(${0:Ident ModelId}, ${1:Vec3 Position}, ${2:Vec3 Direction}, ${3:Integer Clan}, ${4:CPlayer Owner})",
            "trigger": "CModeTurret Turret_Create(Ident ModelId, Vec3 Position, Vec3 Direction, Integer Clan, CPlayer Owner)"
        },
        {
            "contents": "Turret_Destroy(${0:CModeTurret Turret})",
            "trigger": "Void Turret_Destroy(CModeTurret Turret)"
        },
        {
            "contents": "CBadgeManager",
            "trigger": "CBadgeManager"
        },
        {
            "contents": "Badges",
            "trigger": "CBadge[] CBadgeManager.Badges"
        },
        {
            "contents": "BadgeCreate()",
            "trigger": "CBadge BadgeCreate()"
        },
        {
            "contents": "BadgeDestroy(${0:CBadge Badge})",
            "trigger": "Void BadgeDestroy(CBadge Badge)"
        },
        {
            "contents": "BadgeCopy(${0:CBadge Source}, ${1:CBadge Destination})",
            "trigger": "Void BadgeCopy(CBadge Source, CBadge Destination)"
        },
        {
            "contents": "BadgeReadFromProfile(${0:CBadge Badge}, ${1:Ident UserId})",
            "trigger": "Void BadgeReadFromProfile(CBadge Badge, Ident UserId)"
        },
        {
            "contents": "BadgeWriteToProfile(${0:CBadge Badge}, ${1:Ident UserId})",
            "trigger": "Void BadgeWriteToProfile(CBadge Badge, Ident UserId)"
        },
        {
            "contents": "ProfileIsReady(${0:Ident UserId})",
            "trigger": "Boolean ProfileIsReady(Ident UserId)"
        },
        {
            "contents": "CInputManager",
            "trigger": "CInputManager"
        },
        {
            "contents": "CInputManager::EButton::Left",
            "trigger": "CInputManager::EButton::Left"
        },
        {
            "contents": "CInputManager::EButton::Right",
            "trigger": "CInputManager::EButton::Right"
        },
        {
            "contents": "CInputManager::EButton::Up",
            "trigger": "CInputManager::EButton::Up"
        },
        {
            "contents": "CInputManager::EButton::Down",
            "trigger": "CInputManager::EButton::Down"
        },
        {
            "contents": "CInputManager::EButton::A",
            "trigger": "CInputManager::EButton::A"
        },
        {
            "contents": "CInputManager::EButton::B",
            "trigger": "CInputManager::EButton::B"
        },
        {
            "contents": "CInputManager::EButton::X",
            "trigger": "CInputManager::EButton::X"
        },
        {
            "contents": "CInputManager::EButton::Y",
            "trigger": "CInputManager::EButton::Y"
        },
        {
            "contents": "CInputManager::EButton::L1",
            "trigger": "CInputManager::EButton::L1"
        },
        {
            "contents": "CInputManager::EButton::R1",
            "trigger": "CInputManager::EButton::R1"
        },
        {
            "contents": "CInputManager::EButton::LeftStick",
            "trigger": "CInputManager::EButton::LeftStick"
        },
        {
            "contents": "CInputManager::EButton::RightStick",
            "trigger": "CInputManager::EButton::RightStick"
        },
        {
            "contents": "CInputManager::EButton::Menu",
            "trigger": "CInputManager::EButton::Menu"
        },
        {
            "contents": "CInputManager::EButton::View",
            "trigger": "CInputManager::EButton::View"
        },
        {
            "contents": "CInputManager::EButton::LeftStick_Left",
            "trigger": "CInputManager::EButton::LeftStick_Left"
        },
        {
            "contents": "CInputManager::EButton::LeftStick_Right",
            "trigger": "CInputManager::EButton::LeftStick_Right"
        },
        {
            "contents": "CInputManager::EButton::LeftStick_Up",
            "trigger": "CInputManager::EButton::LeftStick_Up"
        },
        {
            "contents": "CInputManager::EButton::LeftStick_Down",
            "trigger": "CInputManager::EButton::LeftStick_Down"
        },
        {
            "contents": "CInputManager::EButton::RightStick_Left",
            "trigger": "CInputManager::EButton::RightStick_Left"
        },
        {
            "contents": "CInputManager::EButton::RightStick_Right",
            "trigger": "CInputManager::EButton::RightStick_Right"
        },
        {
            "contents": "CInputManager::EButton::RightStick_Up",
            "trigger": "CInputManager::EButton::RightStick_Up"
        },
        {
            "contents": "CInputManager::EButton::RightStick_Down",
            "trigger": "CInputManager::EButton::RightStick_Down"
        },
        {
            "contents": "CInputManager::EButton::L2",
            "trigger": "CInputManager::EButton::L2"
        },
        {
            "contents": "CInputManager::EButton::R2",
            "trigger": "CInputManager::EButton::R2"
        },
        {
            "contents": "CInputManager::EButton::None",
            "trigger": "CInputManager::EButton::None"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CInputEvent[] CInputManager.PendingEvents"
        },
        {
            "contents": "Now",
            "trigger": "Integer CInputManager.Now"
        },
        {
            "contents": "Period",
            "trigger": "Integer CInputManager.Period"
        },
        {
            "contents": "Pads",
            "trigger": "CInputPad[] CInputManager.Pads"
        },
        {
            "contents": "MousePos",
            "trigger": "Vec2 CInputManager.MousePos"
        },
        {
            "contents": "MouseLeftButton",
            "trigger": "Boolean CInputManager.MouseLeftButton"
        },
        {
            "contents": "MouseRightButton",
            "trigger": "Boolean CInputManager.MouseRightButton"
        },
        {
            "contents": "MouseMiddleButton",
            "trigger": "Boolean CInputManager.MouseMiddleButton"
        },
        {
            "contents": "ExclusiveMode",
            "trigger": "Boolean CInputManager.ExclusiveMode"
        },
        {
            "contents": "Dbg_AutoRepeat_InitialDelay",
            "trigger": "Integer CInputManager.Dbg_AutoRepeat_InitialDelay"
        },
        {
            "contents": "Dbg_AutoRepeat_Period",
            "trigger": "Integer CInputManager.Dbg_AutoRepeat_Period"
        },
        {
            "contents": "GetPadButtonPlaygroundBinding(${0:CInputPad Pad}, ${1:EButton Button})",
            "trigger": "Text GetPadButtonPlaygroundBinding(CInputPad Pad, EButton Button)"
        },
        {
            "contents": "GetPadButtonCurrentBinding(${0:CInputPad Pad}, ${1:EButton Button})",
            "trigger": "Text GetPadButtonCurrentBinding(CInputPad Pad, EButton Button)"
        },
        {
            "contents": "GetPadButtonBinding(${0:CInputPad Pad}, ${1:EButton Button})",
            "trigger": "Text GetPadButtonBinding(CInputPad Pad, EButton Button)"
        },
        {
            "contents": "IsKeyPressed(${0:Integer KeyCode})",
            "trigger": "Boolean IsKeyPressed(Integer KeyCode)"
        },
        {
            "contents": "CPackCreator",
            "trigger": "CPackCreator"
        },
        {
            "contents": "RegisterPack_IsInProgess",
            "trigger": "Boolean CPackCreator.RegisterPack_IsInProgess"
        },
        {
            "contents": "CurrentPack",
            "trigger": "CPackCreatorPack CPackCreator.CurrentPack"
        },
        {
            "contents": "RegisterPackForEditedTitle()",
            "trigger": "Void RegisterPackForEditedTitle()"
        },
        {
            "contents": "Build_Begin(${0:CPackCreatorPack Pack}, ${1:CPackCreatorTitleInfo TitleInfo})",
            "trigger": "Ident Build_Begin(CPackCreatorPack Pack, CPackCreatorTitleInfo TitleInfo)"
        },
        {
            "contents": "Build_AddFile(${0:Ident BuildId}, ${1:Text FileName})",
            "trigger": "Void Build_AddFile(Ident BuildId, Text FileName)"
        },
        {
            "contents": "Build_AddFolder(${0:Ident BuildId}, ${1:Text FolderName})",
            "trigger": "Void Build_AddFolder(Ident BuildId, Text FolderName)"
        },
        {
            "contents": "Build_AddFile(${0:Ident BuildId}, ${1:Text FileName}, ${2:Boolean IsPublic}, ${3:Boolean IsInternal}, ${4:Boolean NoAutomaticDeps})",
            "trigger": "Void Build_AddFile(Ident BuildId, Text FileName, Boolean IsPublic, Boolean IsInternal, Boolean NoAutomaticDeps)"
        },
        {
            "contents": "Build_AddFolder(${0:Ident BuildId}, ${1:Text FolderName}, ${2:Boolean IsPublic}, ${3:Boolean IsInternal}, ${4:Boolean NoRecursion}, ${5:Boolean NoAutomaticDeps})",
            "trigger": "Void Build_AddFolder(Ident BuildId, Text FolderName, Boolean IsPublic, Boolean IsInternal, Boolean NoRecursion, Boolean NoAutomaticDeps)"
        },
        {
            "contents": "Build_Generate(${0:Ident BuildId}, ${1:Boolean Upload})",
            "trigger": "Void Build_Generate(Ident BuildId, Boolean Upload)"
        },
        {
            "contents": "Build_IsGenerated(${0:Ident BuildId})",
            "trigger": "Boolean Build_IsGenerated(Ident BuildId)"
        },
        {
            "contents": "Build_ErrorMessage(${0:Ident BuildId})",
            "trigger": "Text Build_ErrorMessage(Ident BuildId)"
        },
        {
            "contents": "Build_End(${0:Ident BuildId})",
            "trigger": "Void Build_End(Ident BuildId)"
        },
        {
            "contents": "CAudioManager",
            "trigger": "CAudioManager"
        },
        {
            "contents": "CAudioManager::ELibSound::Alert",
            "trigger": "CAudioManager::ELibSound::Alert"
        },
        {
            "contents": "CAudioManager::ELibSound::ShowDialog",
            "trigger": "CAudioManager::ELibSound::ShowDialog"
        },
        {
            "contents": "CAudioManager::ELibSound::HideDialog",
            "trigger": "CAudioManager::ELibSound::HideDialog"
        },
        {
            "contents": "CAudioManager::ELibSound::ShowMenu",
            "trigger": "CAudioManager::ELibSound::ShowMenu"
        },
        {
            "contents": "CAudioManager::ELibSound::HideMenu",
            "trigger": "CAudioManager::ELibSound::HideMenu"
        },
        {
            "contents": "CAudioManager::ELibSound::Focus",
            "trigger": "CAudioManager::ELibSound::Focus"
        },
        {
            "contents": "CAudioManager::ELibSound::Valid",
            "trigger": "CAudioManager::ELibSound::Valid"
        },
        {
            "contents": "CAudioManager::ELibSound::Start",
            "trigger": "CAudioManager::ELibSound::Start"
        },
        {
            "contents": "CAudioManager::ELibSound::Countdown",
            "trigger": "CAudioManager::ELibSound::Countdown"
        },
        {
            "contents": "CAudioManager::ELibSound::Victory",
            "trigger": "CAudioManager::ELibSound::Victory"
        },
        {
            "contents": "CAudioManager::ELibSound::ScoreIncrease",
            "trigger": "CAudioManager::ELibSound::ScoreIncrease"
        },
        {
            "contents": "CAudioManager::ELibSound::Checkpoint",
            "trigger": "CAudioManager::ELibSound::Checkpoint"
        },
        {
            "contents": "Sounds",
            "trigger": "CAudioSource[] CAudioManager.Sounds"
        },
        {
            "contents": "ForceEnableMusic",
            "trigger": "Boolean CAudioManager.ForceEnableMusic"
        },
        {
            "contents": "LimitMusicVolumedB",
            "trigger": "Real CAudioManager.LimitMusicVolumedB"
        },
        {
            "contents": "LimitSceneSoundVolumedB",
            "trigger": "Real CAudioManager.LimitSceneSoundVolumedB"
        },
        {
            "contents": "LimitUiSoundVolumedB",
            "trigger": "Real CAudioManager.LimitUiSoundVolumedB"
        },
        {
            "contents": "CreateSound(${0:Text Url})",
            "trigger": "CAudioSource CreateSound(Text Url)"
        },
        {
            "contents": "CreateSound(${0:Text Url}, ${1:Real VolumedB}, ${2:Boolean IsMusic}, ${3:Boolean IsLooping}, ${4:Boolean IsSpatialized})",
            "trigger": "CAudioSource CreateSound(Text Url, Real VolumedB, Boolean IsMusic, Boolean IsLooping, Boolean IsSpatialized)"
        },
        {
            "contents": "DestroySound(${0:CAudioSource Sound})",
            "trigger": "Void DestroySound(CAudioSource Sound)"
        },
        {
            "contents": "CreateMusic(${0:Text Url})",
            "trigger": "CAudioSourceMusic CreateMusic(Text Url)"
        },
        {
            "contents": "DestroyMusic(${0:CAudioSourceMusic Music})",
            "trigger": "Void DestroyMusic(CAudioSourceMusic Music)"
        },
        {
            "contents": "PlaySoundEvent(${0:CAudioSource Sound}, ${1:Real VolumedB})",
            "trigger": "Void PlaySoundEvent(CAudioSource Sound, Real VolumedB)"
        },
        {
            "contents": "PlaySoundEvent(${0:Text Url}, ${1:Real VolumedB})",
            "trigger": "Void PlaySoundEvent(Text Url, Real VolumedB)"
        },
        {
            "contents": "PlaySoundEvent(${0:ELibSound Sound}, ${1:Integer SoundVariant}, ${2:Real VolumedB})",
            "trigger": "Void PlaySoundEvent(ELibSound Sound, Integer SoundVariant, Real VolumedB)"
        },
        {
            "contents": "PlaySoundEvent(${0:CAudioSource Sound}, ${1:Real VolumedB}, ${2:Integer Delay})",
            "trigger": "Void PlaySoundEvent(CAudioSource Sound, Real VolumedB, Integer Delay)"
        },
        {
            "contents": "PlaySoundEvent(${0:Text Url}, ${1:Real VolumedB}, ${2:Integer Delay})",
            "trigger": "Void PlaySoundEvent(Text Url, Real VolumedB, Integer Delay)"
        },
        {
            "contents": "PlaySoundEvent(${0:ELibSound Sound}, ${1:Integer SoundVariant}, ${2:Real VolumedB}, ${3:Integer Delay})",
            "trigger": "Void PlaySoundEvent(ELibSound Sound, Integer SoundVariant, Real VolumedB, Integer Delay)"
        },
        {
            "contents": "PlaySoundEvent(${0:CAudioSource Sound}, ${1:Real VolumedB}, ${2:Vec3 PanRadiusLfe})",
            "trigger": "Void PlaySoundEvent(CAudioSource Sound, Real VolumedB, Vec3 PanRadiusLfe)"
        },
        {
            "contents": "PlaySoundEvent(${0:Text Url}, ${1:Real VolumedB}, ${2:Vec3 PanRadiusLfe})",
            "trigger": "Void PlaySoundEvent(Text Url, Real VolumedB, Vec3 PanRadiusLfe)"
        },
        {
            "contents": "PlaySoundEvent(${0:CAudioSource Sound}, ${1:Real VolumedB}, ${2:Vec3 PanRadiusLfe}, ${3:Integer Delay})",
            "trigger": "Void PlaySoundEvent(CAudioSource Sound, Real VolumedB, Vec3 PanRadiusLfe, Integer Delay)"
        },
        {
            "contents": "PlaySoundEvent(${0:Text Url}, ${1:Real VolumedB}, ${2:Vec3 PanRadiusLfe}, ${3:Integer Delay})",
            "trigger": "Void PlaySoundEvent(Text Url, Real VolumedB, Vec3 PanRadiusLfe, Integer Delay)"
        },
        {
            "contents": "ClearAllDelayedSoundsEvents()",
            "trigger": "Void ClearAllDelayedSoundsEvents()"
        },
        {
            "contents": "CBlockUnitModel",
            "trigger": "CBlockUnitModel"
        },
        {
            "contents": "CBlockUnitModel::CardinalDirEnum::North",
            "trigger": "CBlockUnitModel::CardinalDirEnum::North"
        },
        {
            "contents": "CBlockUnitModel::CardinalDirEnum::East",
            "trigger": "CBlockUnitModel::CardinalDirEnum::East"
        },
        {
            "contents": "CBlockUnitModel::CardinalDirEnum::South",
            "trigger": "CBlockUnitModel::CardinalDirEnum::South"
        },
        {
            "contents": "CBlockUnitModel::CardinalDirEnum::West",
            "trigger": "CBlockUnitModel::CardinalDirEnum::West"
        },
        {
            "contents": "RelativeOffset",
            "trigger": "Int3 CBlockUnitModel.RelativeOffset"
        },
        {
            "contents": "Clips",
            "trigger": "CBlockModelClip[] CBlockUnitModel.Clips"
        },
        {
            "contents": "CTmResult",
            "trigger": "CTmResult"
        },
        {
            "contents": "CTmResult::ETmRaceResultCriteria::Time",
            "trigger": "CTmResult::ETmRaceResultCriteria::Time"
        },
        {
            "contents": "CTmResult::ETmRaceResultCriteria::Stunts",
            "trigger": "CTmResult::ETmRaceResultCriteria::Stunts"
        },
        {
            "contents": "CTmResult::ETmRaceResultCriteria::NbRespawns",
            "trigger": "CTmResult::ETmRaceResultCriteria::NbRespawns"
        },
        {
            "contents": "CTmResult::ETmRaceResultCriteria::CheckpointsProgress",
            "trigger": "CTmResult::ETmRaceResultCriteria::CheckpointsProgress"
        },
        {
            "contents": "CTmResult::ETmRaceResultCriteria::None",
            "trigger": "CTmResult::ETmRaceResultCriteria::None"
        },
        {
            "contents": "Time",
            "trigger": "Integer CTmResult.Time"
        },
        {
            "contents": "Score",
            "trigger": "Integer CTmResult.Score"
        },
        {
            "contents": "NbRespawns",
            "trigger": "Integer CTmResult.NbRespawns"
        },
        {
            "contents": "Checkpoints",
            "trigger": "Integer[] CTmResult.Checkpoints"
        },
        {
            "contents": "Compare(${0:CTmResult Other}, ${1:ETmRaceResultCriteria Criteria})",
            "trigger": "Integer Compare(CTmResult Other, ETmRaceResultCriteria Criteria)"
        },
        {
            "contents": "CBlockModel",
            "trigger": "CBlockModel"
        },
        {
            "contents": "CBlockModel::EBaseType::None",
            "trigger": "CBlockModel::EBaseType::None"
        },
        {
            "contents": "CBlockModel::EBaseType::Conductor",
            "trigger": "CBlockModel::EBaseType::Conductor"
        },
        {
            "contents": "CBlockModel::EBaseType::Generator",
            "trigger": "CBlockModel::EBaseType::Generator"
        },
        {
            "contents": "CBlockModel::EBaseType::Collector",
            "trigger": "CBlockModel::EBaseType::Collector"
        },
        {
            "contents": "CBlockModel::EWayPointType::Start",
            "trigger": "CBlockModel::EWayPointType::Start"
        },
        {
            "contents": "CBlockModel::EWayPointType::Finish",
            "trigger": "CBlockModel::EWayPointType::Finish"
        },
        {
            "contents": "CBlockModel::EWayPointType::Checkpoint",
            "trigger": "CBlockModel::EWayPointType::Checkpoint"
        },
        {
            "contents": "CBlockModel::EWayPointType::None",
            "trigger": "CBlockModel::EWayPointType::None"
        },
        {
            "contents": "CBlockModel::EWayPointType::StartFinish",
            "trigger": "CBlockModel::EWayPointType::StartFinish"
        },
        {
            "contents": "CBlockModel::MultiDirEnum::SameDir",
            "trigger": "CBlockModel::MultiDirEnum::SameDir"
        },
        {
            "contents": "CBlockModel::MultiDirEnum::SymmetricalDirs",
            "trigger": "CBlockModel::MultiDirEnum::SymmetricalDirs"
        },
        {
            "contents": "CBlockModel::MultiDirEnum::AllDir",
            "trigger": "CBlockModel::MultiDirEnum::AllDir"
        },
        {
            "contents": "CBlockModel::MultiDirEnum::OpposedDirOnly",
            "trigger": "CBlockModel::MultiDirEnum::OpposedDirOnly"
        },
        {
            "contents": "CBlockModel::MultiDirEnum::PerpendicularDirsOnly",
            "trigger": "CBlockModel::MultiDirEnum::PerpendicularDirsOnly"
        },
        {
            "contents": "CBlockModel::MultiDirEnum::NextDirOnly",
            "trigger": "CBlockModel::MultiDirEnum::NextDirOnly"
        },
        {
            "contents": "CBlockModel::MultiDirEnum::PreviousDirOnly",
            "trigger": "CBlockModel::MultiDirEnum::PreviousDirOnly"
        },
        {
            "contents": "Name",
            "trigger": "Text CBlockModel.Name"
        },
        {
            "contents": "IsRoad",
            "trigger": "Boolean CBlockModel.IsRoad"
        },
        {
            "contents": "IsTerrain",
            "trigger": "Boolean CBlockModel.IsTerrain"
        },
        {
            "contents": "IsPodium",
            "trigger": "Boolean CBlockModel.IsPodium"
        },
        {
            "contents": "WaypointType",
            "trigger": "EWayPointType CBlockModel.WaypointType"
        },
        {
            "contents": "NoRespawn",
            "trigger": "Boolean CBlockModel.NoRespawn"
        },
        {
            "contents": "VariantGround",
            "trigger": "CBlockModelVariantGround CBlockModel.VariantGround"
        },
        {
            "contents": "VariantAir",
            "trigger": "CBlockModelVariantAir CBlockModel.VariantAir"
        },
        {
            "contents": "CHighScoreComparisonSummary",
            "trigger": "CHighScoreComparisonSummary"
        },
        {
            "contents": "Login",
            "trigger": "Text CHighScoreComparisonSummary.Login"
        },
        {
            "contents": "BestRecordCount",
            "trigger": "Integer CHighScoreComparisonSummary.BestRecordCount"
        },
        {
            "contents": "BestRecordLastDate",
            "trigger": "Integer CHighScoreComparisonSummary.BestRecordLastDate"
        },
        {
            "contents": "BestRecordLastDateString",
            "trigger": "Text CHighScoreComparisonSummary.BestRecordLastDateString"
        },
        {
            "contents": "BestRecordElapsedTime",
            "trigger": "Integer CHighScoreComparisonSummary.BestRecordElapsedTime"
        },
        {
            "contents": "OpponentLogin",
            "trigger": "Text CHighScoreComparisonSummary.OpponentLogin"
        },
        {
            "contents": "OpponentDisplayName",
            "trigger": "Text CHighScoreComparisonSummary.OpponentDisplayName"
        },
        {
            "contents": "OpponentBestRecordCount",
            "trigger": "Integer CHighScoreComparisonSummary.OpponentBestRecordCount"
        },
        {
            "contents": "OpponentBestRecordLastDate",
            "trigger": "Integer CHighScoreComparisonSummary.OpponentBestRecordLastDate"
        },
        {
            "contents": "OpponentBestRecordLastDateString",
            "trigger": "Text CHighScoreComparisonSummary.OpponentBestRecordLastDateString"
        },
        {
            "contents": "OpponentBestRecordElapsedTime",
            "trigger": "Integer CHighScoreComparisonSummary.OpponentBestRecordElapsedTime"
        },
        {
            "contents": "CEditorPluginModuleEvent",
            "trigger": "CEditorPluginModuleEvent"
        },
        {
            "contents": "CEditorPluginModuleEvent::Type::LayerCustomEvent",
            "trigger": "CEditorPluginModuleEvent::Type::LayerCustomEvent"
        },
        {
            "contents": "CEditorPluginModuleEvent::Type::KeyPress",
            "trigger": "CEditorPluginModuleEvent::Type::KeyPress"
        },
        {
            "contents": "CEditorPluginModuleEvent::Type::MenuNavigation",
            "trigger": "CEditorPluginModuleEvent::Type::MenuNavigation"
        },
        {
            "contents": "CEditorPluginModuleEvent::Type::Exit",
            "trigger": "CEditorPluginModuleEvent::Type::Exit"
        },
        {
            "contents": "CEditorPluginModuleEvent::Type::FileNew",
            "trigger": "CEditorPluginModuleEvent::Type::FileNew"
        },
        {
            "contents": "CEditorPluginModuleEvent::Type::FileOpen",
            "trigger": "CEditorPluginModuleEvent::Type::FileOpen"
        },
        {
            "contents": "CEditorPluginModuleEvent::Type::FileSave",
            "trigger": "CEditorPluginModuleEvent::Type::FileSave"
        },
        {
            "contents": "CEditorPluginModuleEvent::Type::FileSaveAs",
            "trigger": "CEditorPluginModuleEvent::Type::FileSaveAs"
        },
        {
            "contents": "Type",
            "trigger": "Type CEditorPluginModuleEvent.Type"
        },
        {
            "contents": "Eat()",
            "trigger": "Void Eat()"
        },
        {
            "contents": "CTmPlayer",
            "trigger": "CTmPlayer"
        },
        {
            "contents": "CTmPlayer::ETmRacePlayerCoopMode::None",
            "trigger": "CTmPlayer::ETmRacePlayerCoopMode::None"
        },
        {
            "contents": "CTmPlayer::ETmRacePlayerCoopMode::Symbiosys",
            "trigger": "CTmPlayer::ETmRacePlayerCoopMode::Symbiosys"
        },
        {
            "contents": "CTmPlayer::ETmRacePlayerCoopMode::Checkpoint",
            "trigger": "CTmPlayer::ETmRacePlayerCoopMode::Checkpoint"
        },
        {
            "contents": "CTmPlayer::ETmJumpMode::Disabled",
            "trigger": "CTmPlayer::ETmJumpMode::Disabled"
        },
        {
            "contents": "CTmPlayer::ETmJumpMode::Simple",
            "trigger": "CTmPlayer::ETmJumpMode::Simple"
        },
        {
            "contents": "CTmPlayer::ETmJumpMode::Double",
            "trigger": "CTmPlayer::ETmJumpMode::Double"
        },
        {
            "contents": "CTmPlayer::ETmJumpMode::Infinite",
            "trigger": "CTmPlayer::ETmJumpMode::Infinite"
        },
        {
            "contents": "CurrentClan",
            "trigger": "Integer CTmPlayer.CurrentClan"
        },
        {
            "contents": "Score",
            "trigger": "CTmScore CTmPlayer.Score"
        },
        {
            "contents": "RaceStartTime",
            "trigger": "Integer CTmPlayer.RaceStartTime"
        },
        {
            "contents": "IsSpawned",
            "trigger": "Boolean CTmPlayer.IsSpawned"
        },
        {
            "contents": "CurRace",
            "trigger": "CTmResult CTmPlayer.CurRace"
        },
        {
            "contents": "CurLap",
            "trigger": "CTmResult CTmPlayer.CurLap"
        },
        {
            "contents": "CurrentNbLaps",
            "trigger": "Integer CTmPlayer.CurrentNbLaps"
        },
        {
            "contents": "CurTriggerIndex",
            "trigger": "Integer CTmPlayer.CurTriggerIndex"
        },
        {
            "contents": "Position",
            "trigger": "Vec3 CTmPlayer.Position"
        },
        {
            "contents": "AimYaw",
            "trigger": "Real CTmPlayer.AimYaw"
        },
        {
            "contents": "AimPitch",
            "trigger": "Real CTmPlayer.AimPitch"
        },
        {
            "contents": "AimDirection",
            "trigger": "Vec3 CTmPlayer.AimDirection"
        },
        {
            "contents": "ForceModelId",
            "trigger": "Ident CTmPlayer.ForceModelId"
        },
        {
            "contents": "AccelCoef",
            "trigger": "Real CTmPlayer.AccelCoef"
        },
        {
            "contents": "ControlCoef",
            "trigger": "Real CTmPlayer.ControlCoef"
        },
        {
            "contents": "GravityCoef",
            "trigger": "Real CTmPlayer.GravityCoef"
        },
        {
            "contents": "CoopMode",
            "trigger": "ETmRacePlayerCoopMode CTmPlayer.CoopMode"
        },
        {
            "contents": "ControllerCount",
            "trigger": "Integer CTmPlayer.ControllerCount"
        },
        {
            "contents": "ControllerId0",
            "trigger": "Integer CTmPlayer.ControllerId0"
        },
        {
            "contents": "ControllerId1",
            "trigger": "Integer CTmPlayer.ControllerId1"
        },
        {
            "contents": "ControllerId2",
            "trigger": "Integer CTmPlayer.ControllerId2"
        },
        {
            "contents": "ControllerId3",
            "trigger": "Integer CTmPlayer.ControllerId3"
        },
        {
            "contents": "ForcedAerialCamera",
            "trigger": "Boolean CTmPlayer.ForcedAerialCamera"
        },
        {
            "contents": "ButtonSmashFrenzy",
            "trigger": "Boolean CTmPlayer.ButtonSmashFrenzy"
        },
        {
            "contents": "EnableTurboButton",
            "trigger": "Boolean CTmPlayer.EnableTurboButton"
        },
        {
            "contents": "MaxiAirControl",
            "trigger": "Boolean CTmPlayer.MaxiAirControl"
        },
        {
            "contents": "EnableEmptyCars",
            "trigger": "Boolean CTmPlayer.EnableEmptyCars"
        },
        {
            "contents": "JumpMode",
            "trigger": "ETmJumpMode CTmPlayer.JumpMode"
        },
        {
            "contents": "TinyCar",
            "trigger": "Boolean CTmPlayer.TinyCar"
        },
        {
            "contents": "EnableCatchUpSpeed",
            "trigger": "Boolean CTmPlayer.EnableCatchUpSpeed"
        },
        {
            "contents": "EnableStuntMode",
            "trigger": "Boolean CTmPlayer.EnableStuntMode"
        },
        {
            "contents": "EnableOnlineMode",
            "trigger": "Boolean CTmPlayer.EnableOnlineMode"
        },
        {
            "contents": "CEditorMesh",
            "trigger": "CEditorMesh"
        },
        {
            "contents": "CEditorMesh::EEdgesDisplay::Any",
            "trigger": "CEditorMesh::EEdgesDisplay::Any"
        },
        {
            "contents": "CEditorMesh::EEdgesDisplay::Borders",
            "trigger": "CEditorMesh::EEdgesDisplay::Borders"
        },
        {
            "contents": "CEditorMesh::EEdgesDisplay::None",
            "trigger": "CEditorMesh::EEdgesDisplay::None"
        },
        {
            "contents": "CEditorMesh::EEdgesConstraint::Any",
            "trigger": "CEditorMesh::EEdgesConstraint::Any"
        },
        {
            "contents": "CEditorMesh::EEdgesConstraint::Adjacent",
            "trigger": "CEditorMesh::EEdgesConstraint::Adjacent"
        },
        {
            "contents": "CEditorMesh::EEdgesConstraint::Closed",
            "trigger": "CEditorMesh::EEdgesConstraint::Closed"
        },
        {
            "contents": "CEditorMesh::EElemType::Vertex",
            "trigger": "CEditorMesh::EElemType::Vertex"
        },
        {
            "contents": "CEditorMesh::EElemType::Edge",
            "trigger": "CEditorMesh::EElemType::Edge"
        },
        {
            "contents": "CEditorMesh::EElemType::Face",
            "trigger": "CEditorMesh::EElemType::Face"
        },
        {
            "contents": "CEditorMesh::EElemType::Any",
            "trigger": "CEditorMesh::EElemType::Any"
        },
        {
            "contents": "CEditorMesh::EInteraction::Creation",
            "trigger": "CEditorMesh::EInteraction::Creation"
        },
        {
            "contents": "CEditorMesh::EInteraction::Pick",
            "trigger": "CEditorMesh::EInteraction::Pick"
        },
        {
            "contents": "CEditorMesh::EInteraction::Selection",
            "trigger": "CEditorMesh::EInteraction::Selection"
        },
        {
            "contents": "CEditorMesh::EInteraction::Translation",
            "trigger": "CEditorMesh::EInteraction::Translation"
        },
        {
            "contents": "CEditorMesh::EInteraction::PickTranslation",
            "trigger": "CEditorMesh::EInteraction::PickTranslation"
        },
        {
            "contents": "CEditorMesh::EInteraction::Rotation",
            "trigger": "CEditorMesh::EInteraction::Rotation"
        },
        {
            "contents": "CEditorMesh::EInteraction::PickRotation",
            "trigger": "CEditorMesh::EInteraction::PickRotation"
        },
        {
            "contents": "CEditorMesh::EInteraction::Scale",
            "trigger": "CEditorMesh::EInteraction::Scale"
        },
        {
            "contents": "CEditorMesh::EInteraction::Split",
            "trigger": "CEditorMesh::EInteraction::Split"
        },
        {
            "contents": "CEditorMesh::EInteraction::Paste",
            "trigger": "CEditorMesh::EInteraction::Paste"
        },
        {
            "contents": "CEditorMesh::EInteraction::None",
            "trigger": "CEditorMesh::EInteraction::None"
        },
        {
            "contents": "CEditorMesh::ESelectionDragMode::Rect",
            "trigger": "CEditorMesh::ESelectionDragMode::Rect"
        },
        {
            "contents": "CEditorMesh::ESelectionDragMode::Spray",
            "trigger": "CEditorMesh::ESelectionDragMode::Spray"
        },
        {
            "contents": "CEditorMesh::ESelectionDragMode::Smart",
            "trigger": "CEditorMesh::ESelectionDragMode::Smart"
        },
        {
            "contents": "CEditorMesh::ESelectionDragMode::None",
            "trigger": "CEditorMesh::ESelectionDragMode::None"
        },
        {
            "contents": "CEditorMesh::ETexCoordLayer::Lightmap",
            "trigger": "CEditorMesh::ETexCoordLayer::Lightmap"
        },
        {
            "contents": "CEditorMesh::EMaterialFilterCriterion::IsAutomatic",
            "trigger": "CEditorMesh::EMaterialFilterCriterion::IsAutomatic"
        },
        {
            "contents": "CEditorMesh::EMaterialFilterCriterion::IsBadForHorizontalFaces",
            "trigger": "CEditorMesh::EMaterialFilterCriterion::IsBadForHorizontalFaces"
        },
        {
            "contents": "CEditorMesh::EMaterialFilterCriterion::IsBadForVerticalFaces",
            "trigger": "CEditorMesh::EMaterialFilterCriterion::IsBadForVerticalFaces"
        },
        {
            "contents": "CEditorMesh::EFilterKind::NoFilter",
            "trigger": "CEditorMesh::EFilterKind::NoFilter"
        },
        {
            "contents": "CEditorMesh::EFilterKind::PassIfMatches",
            "trigger": "CEditorMesh::EFilterKind::PassIfMatches"
        },
        {
            "contents": "CEditorMesh::EFilterKind::CutIfMatches",
            "trigger": "CEditorMesh::EFilterKind::CutIfMatches"
        },
        {
            "contents": "CEditorMesh::EUVEditorMode::UV",
            "trigger": "CEditorMesh::EUVEditorMode::UV"
        },
        {
            "contents": "CEditorMesh::EUVEditorMode::Atlas_ApplyOnClic",
            "trigger": "CEditorMesh::EUVEditorMode::Atlas_ApplyOnClic"
        },
        {
            "contents": "CEditorMesh::EUVEditorMode::Atlas_SelectOnClic",
            "trigger": "CEditorMesh::EUVEditorMode::Atlas_SelectOnClic"
        },
        {
            "contents": "VertexCount",
            "trigger": "Integer CEditorMesh.VertexCount"
        },
        {
            "contents": "EdgeCount",
            "trigger": "Integer CEditorMesh.EdgeCount"
        },
        {
            "contents": "FaceCount",
            "trigger": "Integer CEditorMesh.FaceCount"
        },
        {
            "contents": "EditionBox_IsPlaneOriented",
            "trigger": "Boolean CEditorMesh.EditionBox_IsPlaneOriented"
        },
        {
            "contents": "Scale",
            "trigger": "Real CEditorMesh.Scale"
        },
        {
            "contents": "Step",
            "trigger": "Real CEditorMesh.Step"
        },
        {
            "contents": "Size",
            "trigger": "Real CEditorMesh.Size"
        },
        {
            "contents": "DisplayVertices",
            "trigger": "Boolean CEditorMesh.DisplayVertices"
        },
        {
            "contents": "DisplayFaces",
            "trigger": "Boolean CEditorMesh.DisplayFaces"
        },
        {
            "contents": "DisplayEdges",
            "trigger": "EEdgesDisplay CEditorMesh.DisplayEdges"
        },
        {
            "contents": "GridSnap_IsActive",
            "trigger": "Boolean CEditorMesh.GridSnap_IsActive"
        },
        {
            "contents": "MaterialIds",
            "trigger": "Ident[] CEditorMesh.MaterialIds"
        },
        {
            "contents": "Material_Atlas_SelectedSubTexIndex",
            "trigger": "Integer CEditorMesh.Material_Atlas_SelectedSubTexIndex"
        },
        {
            "contents": "CurrentInteraction",
            "trigger": "EInteraction CEditorMesh.CurrentInteraction"
        },
        {
            "contents": "CreationElemsCount",
            "trigger": "Integer CEditorMesh.CreationElemsCount"
        },
        {
            "contents": "Display_HideElemsByDistance_IsActive",
            "trigger": "Boolean CEditorMesh.Display_HideElemsByDistance_IsActive"
        },
        {
            "contents": "Display_HideElemsByDistance_Distance",
            "trigger": "Integer CEditorMesh.Display_HideElemsByDistance_Distance"
        },
        {
            "contents": "Display_HideElemsByDistance_Opacity",
            "trigger": "Real CEditorMesh.Display_HideElemsByDistance_Opacity"
        },
        {
            "contents": "SelectionSet",
            "trigger": "Ident CEditorMesh.SelectionSet"
        },
        {
            "contents": "PrefabNames",
            "trigger": "Text[] CEditorMesh.PrefabNames"
        },
        {
            "contents": "PrefabNamesUpdateId",
            "trigger": "Integer CEditorMesh.PrefabNamesUpdateId"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CEditorEvent[] CEditorMesh.PendingEvents"
        },
        {
            "contents": "EditionBox_SetScale(${0:Real Scale})",
            "trigger": "Void EditionBox_SetScale(Real Scale)"
        },
        {
            "contents": "EditionBox_OrientPlane(${0:Ident SetHandle})",
            "trigger": "Void EditionBox_OrientPlane(Ident SetHandle)"
        },
        {
            "contents": "EditedMesh_Clear()",
            "trigger": "Void EditedMesh_Clear()"
        },
        {
            "contents": "UVUnwrap(${0:Ident SetHandle}, ${1:ETexCoordLayer ETexCoordLayer})",
            "trigger": "Void UVUnwrap(Ident SetHandle, ETexCoordLayer ETexCoordLayer)"
        },
        {
            "contents": "Undo()",
            "trigger": "Void Undo()"
        },
        {
            "contents": "Redo()",
            "trigger": "Void Redo()"
        },
        {
            "contents": "SwitchPlane()",
            "trigger": "Void SwitchPlane()"
        },
        {
            "contents": "GridSnap_SetActive(${0:Boolean IsActive})",
            "trigger": "Void GridSnap_SetActive(Boolean IsActive)"
        },
        {
            "contents": "PickInfo_GetNormal()",
            "trigger": "Vec3 PickInfo_GetNormal()"
        },
        {
            "contents": "PickInfo_GetPosition()",
            "trigger": "Vec3 PickInfo_GetPosition()"
        },
        {
            "contents": "PickInfo_GetNextVertexPosition()",
            "trigger": "Vec3 PickInfo_GetNextVertexPosition()"
        },
        {
            "contents": "PickInfo_GetMaterial()",
            "trigger": "Ident PickInfo_GetMaterial()"
        },
        {
            "contents": "PickInfo_GetError()",
            "trigger": "Text PickInfo_GetError()"
        },
        {
            "contents": "Material_GetMaterialIdSelected()",
            "trigger": "Ident Material_GetMaterialIdSelected()"
        },
        {
            "contents": "Material_SetMaterialIdSelected(${0:Ident MaterialEditorId})",
            "trigger": "Void Material_SetMaterialIdSelected(Ident MaterialEditorId)"
        },
        {
            "contents": "Material_GetSubTexIndexSelected()",
            "trigger": "Integer Material_GetSubTexIndexSelected()"
        },
        {
            "contents": "Material_SetDefault(${0:Ident MaterialId})",
            "trigger": "Void Material_SetDefault(Ident MaterialId)"
        },
        {
            "contents": "Material_GetDefault()",
            "trigger": "Ident Material_GetDefault()"
        },
        {
            "contents": "Material_GetBitmapBase(${0:Ident MaterialId})",
            "trigger": "CImage Material_GetBitmapBase(Ident MaterialId)"
        },
        {
            "contents": "Material_GetBitmap(${0:Ident MaterialId})",
            "trigger": "CImage Material_GetBitmap(Ident MaterialId)"
        },
        {
            "contents": "Material_MatchesCriterion(${0:Ident MaterialId}, ${1:EMaterialFilterCriterion ResultSetHandle})",
            "trigger": "Boolean Material_MatchesCriterion(Ident MaterialId, EMaterialFilterCriterion ResultSetHandle)"
        },
        {
            "contents": "Material_SetFilter(${0:EMaterialFilterCriterion Criterion}, ${1:EFilterKind FilterKind})",
            "trigger": "Void Material_SetFilter(EMaterialFilterCriterion Criterion, EFilterKind FilterKind)"
        },
        {
            "contents": "Material_GetFilter(${0:EMaterialFilterCriterion Criterion})",
            "trigger": "EFilterKind Material_GetFilter(EMaterialFilterCriterion Criterion)"
        },
        {
            "contents": "Material_ClearFilters()",
            "trigger": "Void Material_ClearFilters()"
        },
        {
            "contents": "Material_UVEditor_SetIsRotation(${0:Boolean IsRotation})",
            "trigger": "Void Material_UVEditor_SetIsRotation(Boolean IsRotation)"
        },
        {
            "contents": "Material_UVEditor_SetIsScale(${0:Boolean IsScale})",
            "trigger": "Void Material_UVEditor_SetIsScale(Boolean IsScale)"
        },
        {
            "contents": "Material_UVEditor_Open(${0:Ident MaterialId}, ${1:CMlQuad LocationQuad})",
            "trigger": "Void Material_UVEditor_Open(Ident MaterialId, CMlQuad LocationQuad)"
        },
        {
            "contents": "Material_UVEditor_Close()",
            "trigger": "Void Material_UVEditor_Close()"
        },
        {
            "contents": "Material_UVEditor_SetMode(${0:EUVEditorMode Mode})",
            "trigger": "Void Material_UVEditor_SetMode(EUVEditorMode Mode)"
        },
        {
            "contents": "Material_UVEditor_GetMode()",
            "trigger": "EUVEditorMode Material_UVEditor_GetMode()"
        },
        {
            "contents": "Interaction_Abort()",
            "trigger": "Void Interaction_Abort()"
        },
        {
            "contents": "Interaction_SetPreview(${0:Ident SetToPreview})",
            "trigger": "Void Interaction_SetPreview(Ident SetToPreview)"
        },
        {
            "contents": "Interaction_StartCreation(${0:EEdgesConstraint EdgesConstraint}, ${1:Boolean UseGrid}, ${2:Ident CreationSetHandle}, ${3:EElemType ElemType}, ${4:Boolean RightClickClose}, ${5:Ident SetToPickFromHandle})",
            "trigger": "Void Interaction_StartCreation(EEdgesConstraint EdgesConstraint, Boolean UseGrid, Ident CreationSetHandle, EElemType ElemType, Boolean RightClickClose, Ident SetToPickFromHandle)"
        },
        {
            "contents": "Interaction_Creation_GetElems(${0:Ident ResultSetHandle})",
            "trigger": "Void Interaction_Creation_GetElems(Ident ResultSetHandle)"
        },
        {
            "contents": "Interaction_CloseCreation()",
            "trigger": "Void Interaction_CloseCreation()"
        },
        {
            "contents": "Interaction_StartPaste()",
            "trigger": "Void Interaction_StartPaste()"
        },
        {
            "contents": "Interaction_StartPick(${0:EElemType ElemType})",
            "trigger": "Void Interaction_StartPick(EElemType ElemType)"
        },
        {
            "contents": "Interaction_StartSelection(${0:Ident SelectionSetHandle}, ${1:EElemType ElemType}, ${2:Boolean UseDoubleClickToSelectConnected}, ${3:ESelectionDragMode DragMode}, ${4:Ident SelectionSetToPickFrom})",
            "trigger": "Void Interaction_StartSelection(Ident SelectionSetHandle, EElemType ElemType, Boolean UseDoubleClickToSelectConnected, ESelectionDragMode DragMode, Ident SelectionSetToPickFrom)"
        },
        {
            "contents": "Interaction_CloseSelection()",
            "trigger": "Void Interaction_CloseSelection()"
        },
        {
            "contents": "Display_HighlightSet(${0:Ident SetHandle})",
            "trigger": "Void Display_HighlightSet(Ident SetHandle)"
        },
        {
            "contents": "Display_ClearHighlighting()",
            "trigger": "Void Display_ClearHighlighting()"
        },
        {
            "contents": "Display_AtlasSelectionsSet(${0:Boolean DisplayAtlasSelection})",
            "trigger": "Void Display_AtlasSelectionsSet(Boolean DisplayAtlasSelection)"
        },
        {
            "contents": "Display_AtlasSelectionsGet()",
            "trigger": "Boolean Display_AtlasSelectionsGet()"
        },
        {
            "contents": "Display_HideElemsByDistance_Start(${0:Ident SetHandle})",
            "trigger": "Void Display_HideElemsByDistance_Start(Ident SetHandle)"
        },
        {
            "contents": "Display_HideElemsByDistance_Stop()",
            "trigger": "Void Display_HideElemsByDistance_Stop()"
        },
        {
            "contents": "MergeAllSuperposedElements(${0:Ident SetHandle})",
            "trigger": "Void MergeAllSuperposedElements(Ident SetHandle)"
        },
        {
            "contents": "Interaction_StartTranslation(${0:Ident TranslationSetHandle})",
            "trigger": "Void Interaction_StartTranslation(Ident TranslationSetHandle)"
        },
        {
            "contents": "Interaction_StartPickTranslation(${0:Ident TranslationSetHandle})",
            "trigger": "Void Interaction_StartPickTranslation(Ident TranslationSetHandle)"
        },
        {
            "contents": "Interaction_StartRotation(${0:Ident RotationSetHandle})",
            "trigger": "Void Interaction_StartRotation(Ident RotationSetHandle)"
        },
        {
            "contents": "Interaction_StartPickRotation(${0:Ident RotationSetHandle})",
            "trigger": "Void Interaction_StartPickRotation(Ident RotationSetHandle)"
        },
        {
            "contents": "Interaction_StartPickScale(${0:Ident ScalingSetHandle}, ${1:Boolean IsScaling1D})",
            "trigger": "Void Interaction_StartPickScale(Ident ScalingSetHandle, Boolean IsScaling1D)"
        },
        {
            "contents": "Interaction_StartSplit()",
            "trigger": "Void Interaction_StartSplit()"
        },
        {
            "contents": "Selection_Undo()",
            "trigger": "Void Selection_Undo()"
        },
        {
            "contents": "Selection_Redo()",
            "trigger": "Void Selection_Redo()"
        },
        {
            "contents": "SetOfElements_Create()",
            "trigger": "Ident SetOfElements_Create()"
        },
        {
            "contents": "SetOfElements_CopyFrom(${0:Ident DestinationSet}, ${1:Ident SourceSet})",
            "trigger": "Void SetOfElements_CopyFrom(Ident DestinationSet, Ident SourceSet)"
        },
        {
            "contents": "SetOfElements_Append(${0:Ident DestinationSet}, ${1:Ident SourceSet})",
            "trigger": "Void SetOfElements_Append(Ident DestinationSet, Ident SourceSet)"
        },
        {
            "contents": "SetOfElements_Destroy(${0:Ident SetHandle})",
            "trigger": "Void SetOfElements_Destroy(Ident SetHandle)"
        },
        {
            "contents": "SetOfElements_Empty(${0:Ident SetHandle})",
            "trigger": "Void SetOfElements_Empty(Ident SetHandle)"
        },
        {
            "contents": "SetOfElements_SetAllElements(${0:Ident SetHandle})",
            "trigger": "Void SetOfElements_SetAllElements(Ident SetHandle)"
        },
        {
            "contents": "SetOfElements_SetAllFaces(${0:Ident SetHandle})",
            "trigger": "Void SetOfElements_SetAllFaces(Ident SetHandle)"
        },
        {
            "contents": "SetOfElements_DeleteElements(${0:Ident SetHandle})",
            "trigger": "Void SetOfElements_DeleteElements(Ident SetHandle)"
        },
        {
            "contents": "SetOfElements_HasHorizontalFaces(${0:Ident SetHandle})",
            "trigger": "Boolean SetOfElements_HasHorizontalFaces(Ident SetHandle)"
        },
        {
            "contents": "SetOfElements_HasVerticalFaces(${0:Ident SetHandle})",
            "trigger": "Boolean SetOfElements_HasVerticalFaces(Ident SetHandle)"
        },
        {
            "contents": "SetOfElements_GetElemsCount(${0:Ident SetHandle})",
            "trigger": "Integer SetOfElements_GetElemsCount(Ident SetHandle)"
        },
        {
            "contents": "SetOfElements_GetVerticesCount(${0:Ident SetHandle})",
            "trigger": "Integer SetOfElements_GetVerticesCount(Ident SetHandle)"
        },
        {
            "contents": "SetOfElements_GetEdgesCount(${0:Ident SetHandle})",
            "trigger": "Integer SetOfElements_GetEdgesCount(Ident SetHandle)"
        },
        {
            "contents": "SetOfElements_GetFacesCount(${0:Ident SetHandle})",
            "trigger": "Integer SetOfElements_GetFacesCount(Ident SetHandle)"
        },
        {
            "contents": "ExtendSelectedSet(${0:Ident SetHandle})",
            "trigger": "Void ExtendSelectedSet(Ident SetHandle)"
        },
        {
            "contents": "GetBordersVertexs(${0:Ident SetHandle}, ${1:Ident SetVertexHandle})",
            "trigger": "Void GetBordersVertexs(Ident SetHandle, Ident SetVertexHandle)"
        },
        {
            "contents": "Curve2DPolygon(${0:Ident FourVertexSetHandle}, ${1:Ident Sethandle}, ${2:Integer SubTexIndex})",
            "trigger": "Void Curve2DPolygon(Ident FourVertexSetHandle, Ident Sethandle, Integer SubTexIndex)"
        },
        {
            "contents": "AtlasSelection_Create()",
            "trigger": "Ident AtlasSelection_Create()"
        },
        {
            "contents": "AtlasSelection_GetAtlasSelectionHandleFromSet(${0:Ident SetHandle})",
            "trigger": "Void AtlasSelection_GetAtlasSelectionHandleFromSet(Ident SetHandle)"
        },
        {
            "contents": "AtlasSelections_AddAtlasSelectionFromSet(${0:Ident SetHandle}, ${1:Ident FourPointsHandle})",
            "trigger": "Void AtlasSelections_AddAtlasSelectionFromSet(Ident SetHandle, Ident FourPointsHandle)"
        },
        {
            "contents": "AtlasSelections_SubAtlasSelection(${0:Ident SetHandle})",
            "trigger": "Void AtlasSelections_SubAtlasSelection(Ident SetHandle)"
        },
        {
            "contents": "AtlasSelections_TextureAtlasSelection(${0:Ident SetHandle}, ${1:Integer SubTexIndex})",
            "trigger": "Void AtlasSelections_TextureAtlasSelection(Ident SetHandle, Integer SubTexIndex)"
        },
        {
            "contents": "AtlasSelections_GetAtlasSelectionAfterSelection(${0:Ident Sethandle})",
            "trigger": "Void AtlasSelections_GetAtlasSelectionAfterSelection(Ident Sethandle)"
        },
        {
            "contents": "Preview_Clear()",
            "trigger": "Void Preview_Clear()"
        },
        {
            "contents": "BlocTransformation_Start(${0:Ident SetHandle})",
            "trigger": "Boolean BlocTransformation_Start(Ident SetHandle)"
        },
        {
            "contents": "BlocTransformation_Translate(${0:Vec3 Translation})",
            "trigger": "Void BlocTransformation_Translate(Vec3 Translation)"
        },
        {
            "contents": "BlocTransformation_Twist(${0:Real Angle})",
            "trigger": "Void BlocTransformation_Twist(Real Angle)"
        },
        {
            "contents": "BlocTransformation_Bend(${0:Integer Axis}, ${1:Real Radius}, ${2:Real Angle}, ${3:Boolean Direction})",
            "trigger": "Void BlocTransformation_Bend(Integer Axis, Real Radius, Real Angle, Boolean Direction)"
        },
        {
            "contents": "BlocTransformation_Abort()",
            "trigger": "Void BlocTransformation_Abort()"
        },
        {
            "contents": "BlocTransformation_Close()",
            "trigger": "Void BlocTransformation_Close()"
        },
        {
            "contents": "VoxelSpace_Init(${0:Integer Size}, ${1:Boolean UseColors})",
            "trigger": "Void VoxelSpace_Init(Integer Size, Boolean UseColors)"
        },
        {
            "contents": "VoxelSpace_Destroy()",
            "trigger": "Void VoxelSpace_Destroy()"
        },
        {
            "contents": "VoxelSpace_Get(${0:Int3 Pos})",
            "trigger": "Boolean VoxelSpace_Get(Int3 Pos)"
        },
        {
            "contents": "VoxelSpace_Set(${0:Int3 Pos})",
            "trigger": "Void VoxelSpace_Set(Int3 Pos)"
        },
        {
            "contents": "VoxelSpace_Set(${0:Int3 Pos}, ${1:Vec3 Color})",
            "trigger": "Void VoxelSpace_Set(Int3 Pos, Vec3 Color)"
        },
        {
            "contents": "VoxelSpace_Unset(${0:Int3 Pos})",
            "trigger": "Void VoxelSpace_Unset(Int3 Pos)"
        },
        {
            "contents": "VoxelSpace_GenerateMesh()",
            "trigger": "Void VoxelSpace_GenerateMesh()"
        },
        {
            "contents": "SetOfElements_ProjectOnPlane(${0:Ident SetHandle})",
            "trigger": "Void SetOfElements_ProjectOnPlane(Ident SetHandle)"
        },
        {
            "contents": "SetOfVertices_DrawCircle(${0:Ident InputSetHandle}, ${1:Ident ResultSetHandle})",
            "trigger": "Void SetOfVertices_DrawCircle(Ident InputSetHandle, Ident ResultSetHandle)"
        },
        {
            "contents": "SetOfVertices_DrawDisc(${0:Ident InputSetHandle}, ${1:Ident ResultSetHandle})",
            "trigger": "Void SetOfVertices_DrawDisc(Ident InputSetHandle, Ident ResultSetHandle)"
        },
        {
            "contents": "SetOfVertices_DrawCircle(${0:Ident CenterSetHandle}, ${1:Vec3 PointOnCircle}, ${2:Ident ResultSetHandle})",
            "trigger": "Void SetOfVertices_DrawCircle(Ident CenterSetHandle, Vec3 PointOnCircle, Ident ResultSetHandle)"
        },
        {
            "contents": "SetOfVertices_DrawSpline(${0:Ident ControlSetHandle}, ${1:Ident ResultSetHandle})",
            "trigger": "Void SetOfVertices_DrawSpline(Ident ControlSetHandle, Ident ResultSetHandle)"
        },
        {
            "contents": "SetOfVertices_Weld(${0:Ident VerticesSetHandle})",
            "trigger": "Void SetOfVertices_Weld(Ident VerticesSetHandle)"
        },
        {
            "contents": "SetOfVertices_DrawBox(${0:Ident ControlSetHandle}, ${1:Ident ResultSetHandle})",
            "trigger": "Void SetOfVertices_DrawBox(Ident ControlSetHandle, Ident ResultSetHandle)"
        },
        {
            "contents": "SetOfEdges_Fill(${0:Ident SetHandle})",
            "trigger": "Void SetOfEdges_Fill(Ident SetHandle)"
        },
        {
            "contents": "SetOfEdges_BorderExpand(${0:Ident SetHandle})",
            "trigger": "Void SetOfEdges_BorderExpand(Ident SetHandle)"
        },
        {
            "contents": "SetOfOneEdge_FaceLoopExpand(${0:Ident SetHandle})",
            "trigger": "Void SetOfOneEdge_FaceLoopExpand(Ident SetHandle)"
        },
        {
            "contents": "SetOfOneEdge_EdgeLoopExpand(${0:Ident SetHandle})",
            "trigger": "Void SetOfOneEdge_EdgeLoopExpand(Ident SetHandle)"
        },
        {
            "contents": "SetOfOneFace_CutHole(${0:Ident FaceSetHandle}, ${1:Ident EdgesSetHandle})",
            "trigger": "Void SetOfOneFace_CutHole(Ident FaceSetHandle, Ident EdgesSetHandle)"
        },
        {
            "contents": "SetOfFaces_Extrude(${0:Ident SetHandle}, ${1:Ident ResultSetHandle})",
            "trigger": "Void SetOfFaces_Extrude(Ident SetHandle, Ident ResultSetHandle)"
        },
        {
            "contents": "SetOfFaces_ApplyMaterial(${0:Ident SetHandle}, ${1:Ident MaterialId})",
            "trigger": "Void SetOfFaces_ApplyMaterial(Ident SetHandle, Ident MaterialId)"
        },
        {
            "contents": "SetOfFaces_PlanarExpand(${0:Ident FacesSetHandle})",
            "trigger": "Void SetOfFaces_PlanarExpand(Ident FacesSetHandle)"
        },
        {
            "contents": "SetOfFaces_ChangeOrientation(${0:Ident FacesSetHandle})",
            "trigger": "Void SetOfFaces_ChangeOrientation(Ident FacesSetHandle)"
        },
        {
            "contents": "Prefab_Export()",
            "trigger": "Void Prefab_Export()"
        },
        {
            "contents": "Prefab_Import(${0:Integer PrefabIndex})",
            "trigger": "Void Prefab_Import(Integer PrefabIndex)"
        },
        {
            "contents": "Cut()",
            "trigger": "Void Cut()"
        },
        {
            "contents": "Copy()",
            "trigger": "Void Copy()"
        },
        {
            "contents": "SetBaseUndoState()",
            "trigger": "Void SetBaseUndoState()"
        },
        {
            "contents": "AddUndoState()",
            "trigger": "Void AddUndoState()"
        },
        {
            "contents": "CSmMapPlayerSpawn",
            "trigger": "CSmMapPlayerSpawn"
        },
        {
            "contents": "CSmLandmark",
            "trigger": "CSmLandmark"
        },
        {
            "contents": "Tag",
            "trigger": "Text CSmLandmark.Tag"
        },
        {
            "contents": "Order",
            "trigger": "Integer CSmLandmark.Order"
        },
        {
            "contents": "Position",
            "trigger": "Vec3 CSmLandmark.Position"
        },
        {
            "contents": "DirFront",
            "trigger": "Vec3 CSmLandmark.DirFront"
        },
        {
            "contents": "CNotificationsConsumerNotification",
            "trigger": "CNotificationsConsumerNotification"
        },
        {
            "contents": "CNotificationsConsumerNotification::ENotificationPriority::Memo",
            "trigger": "CNotificationsConsumerNotification::ENotificationPriority::Memo"
        },
        {
            "contents": "CNotificationsConsumerNotification::ENotificationPriority::Notice",
            "trigger": "CNotificationsConsumerNotification::ENotificationPriority::Notice"
        },
        {
            "contents": "CNotificationsConsumerNotification::ENotificationPriority::Alarm",
            "trigger": "CNotificationsConsumerNotification::ENotificationPriority::Alarm"
        },
        {
            "contents": "Title",
            "trigger": "Text CNotificationsConsumerNotification.Title"
        },
        {
            "contents": "Description",
            "trigger": "Text CNotificationsConsumerNotification.Description"
        },
        {
            "contents": "ImageUrl",
            "trigger": "Text CNotificationsConsumerNotification.ImageUrl"
        },
        {
            "contents": "Priority",
            "trigger": "ENotificationPriority CNotificationsConsumerNotification.Priority"
        },
        {
            "contents": "HasBeenRead",
            "trigger": "Boolean CNotificationsConsumerNotification.HasBeenRead"
        },
        {
            "contents": "HasBeenActivated",
            "trigger": "Boolean CNotificationsConsumerNotification.HasBeenActivated"
        },
        {
            "contents": "SetRead()",
            "trigger": "Void SetRead()"
        },
        {
            "contents": "SetActivated()",
            "trigger": "Void SetActivated()"
        },
        {
            "contents": "COnlinePresence",
            "trigger": "COnlinePresence"
        },
        {
            "contents": "Login",
            "trigger": "Text COnlinePresence.Login"
        },
        {
            "contents": "DisplayName",
            "trigger": "Text COnlinePresence.DisplayName"
        },
        {
            "contents": "ServerLogin",
            "trigger": "Text COnlinePresence.ServerLogin"
        },
        {
            "contents": "IsOnline",
            "trigger": "Boolean COnlinePresence.IsOnline"
        },
        {
            "contents": "CSmMapGauge",
            "trigger": "CSmMapGauge"
        },
        {
            "contents": "Clan",
            "trigger": "Integer CSmMapGauge.Clan"
        },
        {
            "contents": "ValueReal",
            "trigger": "Real CSmMapGauge.ValueReal"
        },
        {
            "contents": "Value",
            "trigger": "Integer CSmMapGauge.Value"
        },
        {
            "contents": "Max",
            "trigger": "Integer CSmMapGauge.Max"
        },
        {
            "contents": "Speed",
            "trigger": "Integer CSmMapGauge.Speed"
        },
        {
            "contents": "Captured",
            "trigger": "Boolean CSmMapGauge.Captured"
        },
        {
            "contents": "CUserV2Manager",
            "trigger": "CUserV2Manager"
        },
        {
            "contents": "Users",
            "trigger": "CUserV2[] CUserV2Manager.Users"
        },
        {
            "contents": "MainUserPad",
            "trigger": "CInputPad CUserV2Manager.MainUserPad"
        },
        {
            "contents": "MainUserLogged",
            "trigger": "Boolean CUserV2Manager.MainUserLogged"
        },
        {
            "contents": "MainUser",
            "trigger": "CUserV2 CUserV2Manager.MainUser"
        },
        {
            "contents": "RequestMainUserChange()",
            "trigger": "Void RequestMainUserChange()"
        },
        {
            "contents": "CInputEvent",
            "trigger": "CInputEvent"
        },
        {
            "contents": "CInputEvent::EType::PadButtonPress",
            "trigger": "CInputEvent::EType::PadButtonPress"
        },
        {
            "contents": "CInputEvent::EButton::Left",
            "trigger": "CInputEvent::EButton::Left"
        },
        {
            "contents": "CInputEvent::EButton::Right",
            "trigger": "CInputEvent::EButton::Right"
        },
        {
            "contents": "CInputEvent::EButton::Up",
            "trigger": "CInputEvent::EButton::Up"
        },
        {
            "contents": "CInputEvent::EButton::Down",
            "trigger": "CInputEvent::EButton::Down"
        },
        {
            "contents": "CInputEvent::EButton::A",
            "trigger": "CInputEvent::EButton::A"
        },
        {
            "contents": "CInputEvent::EButton::B",
            "trigger": "CInputEvent::EButton::B"
        },
        {
            "contents": "CInputEvent::EButton::X",
            "trigger": "CInputEvent::EButton::X"
        },
        {
            "contents": "CInputEvent::EButton::Y",
            "trigger": "CInputEvent::EButton::Y"
        },
        {
            "contents": "CInputEvent::EButton::L1",
            "trigger": "CInputEvent::EButton::L1"
        },
        {
            "contents": "CInputEvent::EButton::R1",
            "trigger": "CInputEvent::EButton::R1"
        },
        {
            "contents": "CInputEvent::EButton::LeftStick",
            "trigger": "CInputEvent::EButton::LeftStick"
        },
        {
            "contents": "CInputEvent::EButton::RightStick",
            "trigger": "CInputEvent::EButton::RightStick"
        },
        {
            "contents": "CInputEvent::EButton::Menu",
            "trigger": "CInputEvent::EButton::Menu"
        },
        {
            "contents": "CInputEvent::EButton::View",
            "trigger": "CInputEvent::EButton::View"
        },
        {
            "contents": "CInputEvent::EButton::LeftStick_Left",
            "trigger": "CInputEvent::EButton::LeftStick_Left"
        },
        {
            "contents": "CInputEvent::EButton::LeftStick_Right",
            "trigger": "CInputEvent::EButton::LeftStick_Right"
        },
        {
            "contents": "CInputEvent::EButton::LeftStick_Up",
            "trigger": "CInputEvent::EButton::LeftStick_Up"
        },
        {
            "contents": "CInputEvent::EButton::LeftStick_Down",
            "trigger": "CInputEvent::EButton::LeftStick_Down"
        },
        {
            "contents": "CInputEvent::EButton::RightStick_Left",
            "trigger": "CInputEvent::EButton::RightStick_Left"
        },
        {
            "contents": "CInputEvent::EButton::RightStick_Right",
            "trigger": "CInputEvent::EButton::RightStick_Right"
        },
        {
            "contents": "CInputEvent::EButton::RightStick_Up",
            "trigger": "CInputEvent::EButton::RightStick_Up"
        },
        {
            "contents": "CInputEvent::EButton::RightStick_Down",
            "trigger": "CInputEvent::EButton::RightStick_Down"
        },
        {
            "contents": "CInputEvent::EButton::L2",
            "trigger": "CInputEvent::EButton::L2"
        },
        {
            "contents": "CInputEvent::EButton::R2",
            "trigger": "CInputEvent::EButton::R2"
        },
        {
            "contents": "CInputEvent::EButton::None",
            "trigger": "CInputEvent::EButton::None"
        },
        {
            "contents": "Type",
            "trigger": "EType CInputEvent.Type"
        },
        {
            "contents": "Pad",
            "trigger": "CInputPad CInputEvent.Pad"
        },
        {
            "contents": "Button",
            "trigger": "EButton CInputEvent.Button"
        },
        {
            "contents": "IsAutoRepeat",
            "trigger": "Boolean CInputEvent.IsAutoRepeat"
        },
        {
            "contents": "KeyCode",
            "trigger": "Integer CInputEvent.KeyCode"
        },
        {
            "contents": "KeyName",
            "trigger": "Text CInputEvent.KeyName"
        },
        {
            "contents": "CModuleMenu",
            "trigger": "CModuleMenu"
        },
        {
            "contents": "Menu_Goto(${0:Text PageId})",
            "trigger": "Void Menu_Goto(Text PageId)"
        },
        {
            "contents": "Menu_Back()",
            "trigger": "Void Menu_Back()"
        },
        {
            "contents": "Menu_Previous()",
            "trigger": "Void Menu_Previous()"
        },
        {
            "contents": "Menu_Quit()",
            "trigger": "Void Menu_Quit()"
        },
        {
            "contents": "CManiaAppBrowser",
            "trigger": "CManiaAppBrowser"
        },
        {
            "contents": "PendingEvents",
            "trigger": "CManiaAppEvent[] CManiaAppBrowser.PendingEvents"
        },
        {
            "contents": "BrowserFocusedFrameId",
            "trigger": "Text CManiaAppBrowser.BrowserFocusedFrameId"
        },
        {
            "contents": "BrowserBack()",
            "trigger": "Void BrowserBack()"
        },
        {
            "contents": "BrowserQuit()",
            "trigger": "Void BrowserQuit()"
        },
        {
            "contents": "BrowserHome()",
            "trigger": "Void BrowserHome()"
        },
        {
            "contents": "BrowserReload()",
            "trigger": "Void BrowserReload()"
        },
        {
            "contents": "CGhost",
            "trigger": "CGhost"
        },
        {
            "contents": "Id",
            "trigger": "Ident CGhost.Id"
        },
        {
            "contents": "Result",
            "trigger": "CTmResult CGhost.Result"
        },
        {
            "contents": "Nickname",
            "trigger": "Text CGhost.Nickname"
        },
        {
            "contents": "CMap",
            "trigger": "CMap"
        },
        {
            "contents": "MapInfo",
            "trigger": "CMapInfo CMap.MapInfo"
        },
        {
            "contents": "MapName",
            "trigger": "Text CMap.MapName"
        },
        {
            "contents": "Comments",
            "trigger": "Text CMap.Comments"
        },
        {
            "contents": "AuthorZoneIconUrl",
            "trigger": "Text CMap.AuthorZoneIconUrl"
        },
        {
            "contents": "CollectionName",
            "trigger": "Text CMap.CollectionName"
        },
        {
            "contents": "DecorationName",
            "trigger": "Text CMap.DecorationName"
        },
        {
            "contents": "AuthorLogin",
            "trigger": "Text CMap.AuthorLogin"
        },
        {
            "contents": "AuthorNickName",
            "trigger": "Text CMap.AuthorNickName"
        },
        {
            "contents": "AuthorZonePath",
            "trigger": "Text CMap.AuthorZonePath"
        },
        {
            "contents": "MapType",
            "trigger": "Text CMap.MapType"
        },
        {
            "contents": "MapStyle",
            "trigger": "Text CMap.MapStyle"
        },
        {
            "contents": "TMObjective_AuthorTime",
            "trigger": "Integer CMap.TMObjective_AuthorTime"
        },
        {
            "contents": "TMObjective_GoldTime",
            "trigger": "Integer CMap.TMObjective_GoldTime"
        },
        {
            "contents": "TMObjective_SilverTime",
            "trigger": "Integer CMap.TMObjective_SilverTime"
        },
        {
            "contents": "TMObjective_BronzeTime",
            "trigger": "Integer CMap.TMObjective_BronzeTime"
        },
        {
            "contents": "TMObjective_NbLaps",
            "trigger": "Integer CMap.TMObjective_NbLaps"
        },
        {
            "contents": "TMObjective_IsLapRace",
            "trigger": "Boolean CMap.TMObjective_IsLapRace"
        },
        {
            "contents": "ObjectiveTextAuthor",
            "trigger": "Text CMap.ObjectiveTextAuthor"
        },
        {
            "contents": "ObjectiveTextGold",
            "trigger": "Text CMap.ObjectiveTextGold"
        },
        {
            "contents": "ObjectiveTextSilver",
            "trigger": "Text CMap.ObjectiveTextSilver"
        },
        {
            "contents": "ObjectiveTextBronze",
            "trigger": "Text CMap.ObjectiveTextBronze"
        },
        {
            "contents": "CopperPrice",
            "trigger": "Integer CMap.CopperPrice"
        },
        {
            "contents": "Size",
            "trigger": "Int3 CMap.Size"
        },
        {
            "contents": "CServerInfo",
            "trigger": "CServerInfo"
        },
        {
            "contents": "ServerName",
            "trigger": "Text CServerInfo.ServerName"
        },
        {
            "contents": "ServerLogin",
            "trigger": "Text CServerInfo.ServerLogin"
        },
        {
            "contents": "JoinLink",
            "trigger": "Text CServerInfo.JoinLink"
        },
        {
            "contents": "Comment",
            "trigger": "Text CServerInfo.Comment"
        },
        {
            "contents": "ServerVersionBuild",
            "trigger": "Text CServerInfo.ServerVersionBuild"
        },
        {
            "contents": "PlayerCount",
            "trigger": "Integer CServerInfo.PlayerCount"
        },
        {
            "contents": "MaxPlayerCount",
            "trigger": "Integer CServerInfo.MaxPlayerCount"
        },
        {
            "contents": "SpectatorCount",
            "trigger": "Integer CServerInfo.SpectatorCount"
        },
        {
            "contents": "MaxSpectatorCount",
            "trigger": "Integer CServerInfo.MaxSpectatorCount"
        },
        {
            "contents": "PlayersLevelMin",
            "trigger": "Real CServerInfo.PlayersLevelMin"
        },
        {
            "contents": "PlayersLevelAvg",
            "trigger": "Real CServerInfo.PlayersLevelAvg"
        },
        {
            "contents": "PlayersLevelMax",
            "trigger": "Real CServerInfo.PlayersLevelMax"
        },
        {
            "contents": "ServerLevel",
            "trigger": "Integer CServerInfo.ServerLevel"
        },
        {
            "contents": "ServerLevelText",
            "trigger": "Text CServerInfo.ServerLevelText"
        },
        {
            "contents": "ModeName",
            "trigger": "Text CServerInfo.ModeName"
        },
        {
            "contents": "LadderServerLimitMax",
            "trigger": "Real CServerInfo.LadderServerLimitMax"
        },
        {
            "contents": "LadderServerLimitMin",
            "trigger": "Real CServerInfo.LadderServerLimitMin"
        },
        {
            "contents": "PlayerNames",
            "trigger": "Text[] CServerInfo.PlayerNames"
        },
        {
            "contents": "ChallengeNames",
            "trigger": "Text[] CServerInfo.ChallengeNames"
        },
        {
            "contents": "NbChallenges",
            "trigger": "Integer CServerInfo.NbChallenges"
        },
        {
            "contents": "HasBuddies",
            "trigger": "Boolean CServerInfo.HasBuddies"
        },
        {
            "contents": "IsFavourite",
            "trigger": "Boolean CServerInfo.IsFavourite"
        },
        {
            "contents": "IsLobbyServer",
            "trigger": "Boolean CServerInfo.IsLobbyServer"
        },
        {
            "contents": "IsPrivate",
            "trigger": "Boolean CServerInfo.IsPrivate"
        },
        {
            "contents": "CSmMapLandmark",
            "trigger": "CSmMapLandmark"
        },
        {
            "contents": "Tag",
            "trigger": "Text CSmMapLandmark.Tag"
        },
        {
            "contents": "Order",
            "trigger": "Integer CSmMapLandmark.Order"
        },
        {
            "contents": "Position",
            "trigger": "Vec3 CSmMapLandmark.Position"
        },
        {
            "contents": "Base",
            "trigger": "CSmMapBase CSmMapLandmark.Base"
        },
        {
            "contents": "Gate",
            "trigger": "CSmMapGate CSmMapLandmark.Gate"
        },
        {
            "contents": "Gauge",
            "trigger": "CSmMapGauge CSmMapLandmark.Gauge"
        },
        {
            "contents": "Sector",
            "trigger": "CSmMapSector CSmMapLandmark.Sector"
        },
        {
            "contents": "PlayerSpawn",
            "trigger": "CSmMapPlayerSpawn CSmMapLandmark.PlayerSpawn"
        },
        {
            "contents": "BotPath",
            "trigger": "CSmMapBotPath CSmMapLandmark.BotPath"
        },
        {
            "contents": "BotSpawn",
            "trigger": "CSmMapBotSpawn CSmMapLandmark.BotSpawn"
        },
        {
            "contents": "ObjectAnchor",
            "trigger": "CSmMapObjectAnchor CSmMapLandmark.ObjectAnchor"
        },
        {
            "contents": "CTmScore",
            "trigger": "CTmScore"
        },
        {
            "contents": "TeamNum",
            "trigger": "Integer CTmScore.TeamNum"
        },
        {
            "contents": "Points",
            "trigger": "Integer CTmScore.Points"
        },
        {
            "contents": "BestRace",
            "trigger": "CTmResult CTmScore.BestRace"
        },
        {
            "contents": "BestLap",
            "trigger": "CTmResult CTmScore.BestLap"
        },
        {
            "contents": "PrevRaceDeltaPoints",
            "trigger": "Integer CTmScore.PrevRaceDeltaPoints"
        },
        {
            "contents": "PrevRace",
            "trigger": "CTmResult CTmScore.PrevRace"
        },
        {
            "contents": "TempResult",
            "trigger": "CTmResult CTmScore.TempResult"
        },
        {
            "contents": "Clear()",
            "trigger": "Void Clear()"
        },
        {
            "contents": "CAchievementsAchievement",
            "trigger": "CAchievementsAchievement"
        },
        {
            "contents": "UserId",
            "trigger": "Ident CAchievementsAchievement.UserId"
        },
        {
            "contents": "AchievementDesc",
            "trigger": "CAchievementsAchievementDesc CAchievementsAchievement.AchievementDesc"
        },
        {
            "contents": "CSmObject",
            "trigger": "CSmObject"
        },
        {
            "contents": "CSmObject::EStatus::OnPlayer",
            "trigger": "CSmObject::EStatus::OnPlayer"
        },
        {
            "contents": "CSmObject::EStatus::OnAnchor",
            "trigger": "CSmObject::EStatus::OnAnchor"
        },
        {
            "contents": "CSmObject::EStatus::InWorld",
            "trigger": "CSmObject::EStatus::InWorld"
        },
        {
            "contents": "CSmObject::EStatus::Unspawned",
            "trigger": "CSmObject::EStatus::Unspawned"
        },
        {
            "contents": "Status",
            "trigger": "EStatus CSmObject.Status"
        },
        {
            "contents": "ModelId",
            "trigger": "Ident CSmObject.ModelId"
        },
        {
            "contents": "Player",
            "trigger": "CSmPlayer CSmObject.Player"
        },
        {
            "contents": "AnchorLandmark",
            "trigger": "CSmMapLandmark CSmObject.AnchorLandmark"
        },
        {
            "contents": "Position",
            "trigger": "Vec3 CSmObject.Position"
        },
        {
            "contents": "Vel",
            "trigger": "Vec3 CSmObject.Vel"
        },
        {
            "contents": "MachineState",
            "trigger": "Integer CSmObject.MachineState"
        },
        {
            "contents": "Throwable",
            "trigger": "Boolean CSmObject.Throwable"
        },
        {
            "contents": "SetAnchor(${0:CSmMapObjectAnchor ObjectAnchor})",
            "trigger": "Void SetAnchor(CSmMapObjectAnchor ObjectAnchor)"
        },
        {
            "contents": "SetPlayer(${0:CSmPlayer Player})",
            "trigger": "Void SetPlayer(CSmPlayer Player)"
        },
        {
            "contents": "SetPosition(${0:Vec3 Position})",
            "trigger": "Void SetPosition(Vec3 Position)"
        },
        {
            "contents": "SetPositionAndVel(${0:Vec3 Position}, ${1:Vec3 Vel})",
            "trigger": "Void SetPositionAndVel(Vec3 Position, Vec3 Vel)"
        },
        {
            "contents": "SetUnspawned()",
            "trigger": "Void SetUnspawned()"
        },
        {
            "contents": "CTaskResult_MapList",
            "trigger": "CTaskResult_MapList"
        },
        {
            "contents": "ParentPath",
            "trigger": "Text CTaskResult_MapList.ParentPath"
        },
        {
            "contents": "Path",
            "trigger": "Text CTaskResult_MapList.Path"
        },
        {
            "contents": "MapInfos",
            "trigger": "CMapInfo[] CTaskResult_MapList.MapInfos"
        },
        {
            "contents": "SubFolders",
            "trigger": "Text[] CTaskResult_MapList.SubFolders"
        },
        {
            "contents": "GetThumbnail(${0:Text MapUid})",
            "trigger": "CImage GetThumbnail(Text MapUid)"
        },
        {
            "contents": "CTaskResult_Ghost",
            "trigger": "CTaskResult_Ghost"
        },
        {
            "contents": "Ghost",
            "trigger": "CGhost CTaskResult_Ghost.Ghost"
        },
        {
            "contents": "CSmModeEvent",
            "trigger": "CSmModeEvent"
        },
        {
            "contents": "CSmModeEvent::EType::Unknown",
            "trigger": "CSmModeEvent::EType::Unknown"
        },
        {
            "contents": "CSmModeEvent::EType::OnShoot",
            "trigger": "CSmModeEvent::EType::OnShoot"
        },
        {
            "contents": "CSmModeEvent::EType::OnHit",
            "trigger": "CSmModeEvent::EType::OnHit"
        },
        {
            "contents": "CSmModeEvent::EType::OnNearMiss",
            "trigger": "CSmModeEvent::EType::OnNearMiss"
        },
        {
            "contents": "CSmModeEvent::EType::OnArmorEmpty",
            "trigger": "CSmModeEvent::EType::OnArmorEmpty"
        },
        {
            "contents": "CSmModeEvent::EType::OnCapture",
            "trigger": "CSmModeEvent::EType::OnCapture"
        },
        {
            "contents": "CSmModeEvent::EType::OnShotDeny",
            "trigger": "CSmModeEvent::EType::OnShotDeny"
        },
        {
            "contents": "CSmModeEvent::EType::OnFallDamage",
            "trigger": "CSmModeEvent::EType::OnFallDamage"
        },
        {
            "contents": "CSmModeEvent::EType::OnCommand",
            "trigger": "CSmModeEvent::EType::OnCommand"
        },
        {
            "contents": "CSmModeEvent::EType::OnPlayerAdded",
            "trigger": "CSmModeEvent::EType::OnPlayerAdded"
        },
        {
            "contents": "CSmModeEvent::EType::OnPlayerRemoved",
            "trigger": "CSmModeEvent::EType::OnPlayerRemoved"
        },
        {
            "contents": "CSmModeEvent::EType::OnPlayerRequestRespawn",
            "trigger": "CSmModeEvent::EType::OnPlayerRequestRespawn"
        },
        {
            "contents": "CSmModeEvent::EType::OnActionCustomEvent",
            "trigger": "CSmModeEvent::EType::OnActionCustomEvent"
        },
        {
            "contents": "CSmModeEvent::EType::OnActionEvent",
            "trigger": "CSmModeEvent::EType::OnActionEvent"
        },
        {
            "contents": "CSmModeEvent::EType::OnPlayerTouchesObject",
            "trigger": "CSmModeEvent::EType::OnPlayerTouchesObject"
        },
        {
            "contents": "CSmModeEvent::EType::OnPlayerTriggersSector",
            "trigger": "CSmModeEvent::EType::OnPlayerTriggersSector"
        },
        {
            "contents": "CSmModeEvent::EType::OnPlayerThrowsObject",
            "trigger": "CSmModeEvent::EType::OnPlayerThrowsObject"
        },
        {
            "contents": "CSmModeEvent::EType::OnPlayerRequestActionChange",
            "trigger": "CSmModeEvent::EType::OnPlayerRequestActionChange"
        },
        {
            "contents": "CSmModeEvent::EActionSlot::Slot_A",
            "trigger": "CSmModeEvent::EActionSlot::Slot_A"
        },
        {
            "contents": "CSmModeEvent::EActionSlot::Slot_B",
            "trigger": "CSmModeEvent::EActionSlot::Slot_B"
        },
        {
            "contents": "CSmModeEvent::EActionSlot::Slot_C",
            "trigger": "CSmModeEvent::EActionSlot::Slot_C"
        },
        {
            "contents": "CSmModeEvent::EActionSlot::Slot_D",
            "trigger": "CSmModeEvent::EActionSlot::Slot_D"
        },
        {
            "contents": "CSmModeEvent::EActionSlot::Slot_E",
            "trigger": "CSmModeEvent::EActionSlot::Slot_E"
        },
        {
            "contents": "CSmModeEvent::EActionSlot::Slot_F",
            "trigger": "CSmModeEvent::EActionSlot::Slot_F"
        },
        {
            "contents": "CSmModeEvent::EActionSlot::Slot_G",
            "trigger": "CSmModeEvent::EActionSlot::Slot_G"
        },
        {
            "contents": "CSmModeEvent::EActionSlot::Slot_H",
            "trigger": "CSmModeEvent::EActionSlot::Slot_H"
        },
        {
            "contents": "CSmModeEvent::EActionInput::Weapon",
            "trigger": "CSmModeEvent::EActionInput::Weapon"
        },
        {
            "contents": "CSmModeEvent::EActionInput::Movement",
            "trigger": "CSmModeEvent::EActionInput::Movement"
        },
        {
            "contents": "CSmModeEvent::EActionInput::Activable1",
            "trigger": "CSmModeEvent::EActionInput::Activable1"
        },
        {
            "contents": "CSmModeEvent::EActionInput::Activable2",
            "trigger": "CSmModeEvent::EActionInput::Activable2"
        },
        {
            "contents": "CSmModeEvent::EActionInput::Activable3",
            "trigger": "CSmModeEvent::EActionInput::Activable3"
        },
        {
            "contents": "CSmModeEvent::EActionInput::Activable4",
            "trigger": "CSmModeEvent::EActionInput::Activable4"
        },
        {
            "contents": "CSmModeEvent::EActionInput::Consumable1",
            "trigger": "CSmModeEvent::EActionInput::Consumable1"
        },
        {
            "contents": "CSmModeEvent::EActionInput::Consumable2",
            "trigger": "CSmModeEvent::EActionInput::Consumable2"
        },
        {
            "contents": "CSmModeEvent::EActionInput::None",
            "trigger": "CSmModeEvent::EActionInput::None"
        },
        {
            "contents": "CSmModeEvent::EActionSlots::Weapon",
            "trigger": "CSmModeEvent::EActionSlots::Weapon"
        },
        {
            "contents": "CSmModeEvent::EActionSlots::Movement",
            "trigger": "CSmModeEvent::EActionSlots::Movement"
        },
        {
            "contents": "CSmModeEvent::EActionSlots::Activable1",
            "trigger": "CSmModeEvent::EActionSlots::Activable1"
        },
        {
            "contents": "CSmModeEvent::EActionSlots::Activable2",
            "trigger": "CSmModeEvent::EActionSlots::Activable2"
        },
        {
            "contents": "CSmModeEvent::EActionSlots::Activable3",
            "trigger": "CSmModeEvent::EActionSlots::Activable3"
        },
        {
            "contents": "CSmModeEvent::EActionSlots::Activable4",
            "trigger": "CSmModeEvent::EActionSlots::Activable4"
        },
        {
            "contents": "CSmModeEvent::EActionSlots::None",
            "trigger": "CSmModeEvent::EActionSlots::None"
        },
        {
            "contents": "Type",
            "trigger": "EType CSmModeEvent.Type"
        },
        {
            "contents": "Player",
            "trigger": "CSmPlayer CSmModeEvent.Player"
        },
        {
            "contents": "Damage",
            "trigger": "Integer CSmModeEvent.Damage"
        },
        {
            "contents": "VictimObject",
            "trigger": "CSmObject CSmModeEvent.VictimObject"
        },
        {
            "contents": "VictimShield",
            "trigger": "Integer CSmModeEvent.VictimShield"
        },
        {
            "contents": "VictimTurret",
            "trigger": "CModeTurret CSmModeEvent.VictimTurret"
        },
        {
            "contents": "ShooterPoints",
            "trigger": "Integer CSmModeEvent.ShooterPoints"
        },
        {
            "contents": "Shooter",
            "trigger": "CSmPlayer CSmModeEvent.Shooter"
        },
        {
            "contents": "ShooterTurret",
            "trigger": "CModeTurret CSmModeEvent.ShooterTurret"
        },
        {
            "contents": "ShooterClan",
            "trigger": "Integer CSmModeEvent.ShooterClan"
        },
        {
            "contents": "Victim",
            "trigger": "CSmPlayer CSmModeEvent.Victim"
        },
        {
            "contents": "Height",
            "trigger": "Real CSmModeEvent.Height"
        },
        {
            "contents": "MissDist",
            "trigger": "Real CSmModeEvent.MissDist"
        },
        {
            "contents": "WeaponNum",
            "trigger": "Integer CSmModeEvent.WeaponNum"
        },
        {
            "contents": "ShooterUsedAction",
            "trigger": "Boolean CSmModeEvent.ShooterUsedAction"
        },
        {
            "contents": "ShooterWeaponNum",
            "trigger": "Integer CSmModeEvent.ShooterWeaponNum"
        },
        {
            "contents": "ShooterActionSlot",
            "trigger": "EActionSlot CSmModeEvent.ShooterActionSlot"
        },
        {
            "contents": "ShooterActionId",
            "trigger": "Text CSmModeEvent.ShooterActionId"
        },
        {
            "contents": "VictimUsedAction",
            "trigger": "Boolean CSmModeEvent.VictimUsedAction"
        },
        {
            "contents": "VictimWeaponNum",
            "trigger": "Integer CSmModeEvent.VictimWeaponNum"
        },
        {
            "contents": "VictimActionSlot",
            "trigger": "EActionSlot CSmModeEvent.VictimActionSlot"
        },
        {
            "contents": "VictimActionId",
            "trigger": "Text CSmModeEvent.VictimActionId"
        },
        {
            "contents": "Action_Slot",
            "trigger": "EActionSlot CSmModeEvent.Action_Slot"
        },
        {
            "contents": "ActionInput",
            "trigger": "EActionInput CSmModeEvent.ActionInput"
        },
        {
            "contents": "ActionId",
            "trigger": "Text CSmModeEvent.ActionId"
        },
        {
            "contents": "Param1",
            "trigger": "Text CSmModeEvent.Param1"
        },
        {
            "contents": "Param2",
            "trigger": "Text[] CSmModeEvent.Param2"
        },
        {
            "contents": "Object",
            "trigger": "CSmObject CSmModeEvent.Object"
        },
        {
            "contents": "Sector",
            "trigger": "CSmMapSector CSmModeEvent.Sector"
        },
        {
            "contents": "BlockPole",
            "trigger": "CSmBlockPole CSmModeEvent.BlockPole"
        },
        {
            "contents": "Landmark",
            "trigger": "CSmMapLandmark CSmModeEvent.Landmark"
        },
        {
            "contents": "User",
            "trigger": "CUser CSmModeEvent.User"
        },
        {
            "contents": "PlayerWasSpawned",
            "trigger": "Boolean CSmModeEvent.PlayerWasSpawned"
        },
        {
            "contents": "PlayerWasInLadderMatch",
            "trigger": "Boolean CSmModeEvent.PlayerWasInLadderMatch"
        },
        {
            "contents": "PlayerLastPosition",
            "trigger": "Vec3 CSmModeEvent.PlayerLastPosition"
        },
        {
            "contents": "PlayerLastAimDirection",
            "trigger": "Vec3 CSmModeEvent.PlayerLastAimDirection"
        },
        {
            "contents": "GiveUp",
            "trigger": "Boolean CSmModeEvent.GiveUp"
        },
        {
            "contents": "CommandName",
            "trigger": "Text CSmModeEvent.CommandName"
        },
        {
            "contents": "CommandValueBoolean",
            "trigger": "Boolean CSmModeEvent.CommandValueBoolean"
        },
        {
            "contents": "CommandValueInteger",
            "trigger": "Integer CSmModeEvent.CommandValueInteger"
        },
        {
            "contents": "CommandValueReal",
            "trigger": "Real CSmModeEvent.CommandValueReal"
        },
        {
            "contents": "CommandValueText",
            "trigger": "Text CSmModeEvent.CommandValueText"
        },
        {
            "contents": "ActionChange",
            "trigger": "Integer CSmModeEvent.ActionChange"
        },
        {
            "contents": "CRealLeaderBoardInfo",
            "trigger": "CRealLeaderBoardInfo"
        },
        {
            "contents": "Rank",
            "trigger": "Integer CRealLeaderBoardInfo.Rank"
        },
        {
            "contents": "Login",
            "trigger": "Text CRealLeaderBoardInfo.Login"
        },
        {
            "contents": "DisplayName",
            "trigger": "Text CRealLeaderBoardInfo.DisplayName"
        },
        {
            "contents": "Score",
            "trigger": "Real CRealLeaderBoardInfo.Score"
        },
        {
            "contents": "CManiaAppPlaygroundEvent",
            "trigger": "CManiaAppPlaygroundEvent"
        },
        {
            "contents": "CManiaAppPlaygroundEvent::Type::LayerCustomEvent",
            "trigger": "CManiaAppPlaygroundEvent::Type::LayerCustomEvent"
        },
        {
            "contents": "CManiaAppPlaygroundEvent::Type::KeyPress",
            "trigger": "CManiaAppPlaygroundEvent::Type::KeyPress"
        },
        {
            "contents": "CManiaAppPlaygroundEvent::Type::MenuNavigation",
            "trigger": "CManiaAppPlaygroundEvent::Type::MenuNavigation"
        },
        {
            "contents": "CManiaAppPlaygroundEvent::Type::PlaygroundScriptEvent",
            "trigger": "CManiaAppPlaygroundEvent::Type::PlaygroundScriptEvent"
        },
        {
            "contents": "PlaygroundScriptEventType",
            "trigger": "Text CManiaAppPlaygroundEvent.PlaygroundScriptEventType"
        },
        {
            "contents": "PlaygroundScriptEventData",
            "trigger": "Text[] CManiaAppPlaygroundEvent.PlaygroundScriptEventData"
        },
        {
            "contents": "CMlFrame",
            "trigger": "CMlFrame"
        },
        {
            "contents": "CMlFrame::EControlType::Audio",
            "trigger": "CMlFrame::EControlType::Audio"
        },
        {
            "contents": "CMlFrame::EControlType::Entry",
            "trigger": "CMlFrame::EControlType::Entry"
        },
        {
            "contents": "CMlFrame::EControlType::FileEntry",
            "trigger": "CMlFrame::EControlType::FileEntry"
        },
        {
            "contents": "CMlFrame::EControlType::Frame",
            "trigger": "CMlFrame::EControlType::Frame"
        },
        {
            "contents": "CMlFrame::EControlType::Label",
            "trigger": "CMlFrame::EControlType::Label"
        },
        {
            "contents": "CMlFrame::EControlType::Quad",
            "trigger": "CMlFrame::EControlType::Quad"
        },
        {
            "contents": "CMlFrame::EControlType::Video",
            "trigger": "CMlFrame::EControlType::Video"
        },
        {
            "contents": "Controls",
            "trigger": "CMlControl[] CMlFrame.Controls"
        },
        {
            "contents": "ClipWindowActive",
            "trigger": "Boolean CMlFrame.ClipWindowActive"
        },
        {
            "contents": "ClipWindowRelativePosition",
            "trigger": "Vec2 CMlFrame.ClipWindowRelativePosition"
        },
        {
            "contents": "ClipWindowSize",
            "trigger": "Vec2 CMlFrame.ClipWindowSize"
        },
        {
            "contents": "DisablePreload",
            "trigger": "Boolean CMlFrame.DisablePreload"
        },
        {
            "contents": "GetFirstChild(${0:Text ControlId})",
            "trigger": "CMlControl GetFirstChild(Text ControlId)"
        },
        {
            "contents": "CTitleEdition",
            "trigger": "CTitleEdition"
        },
        {
            "contents": "CTitleEdition::EDrive::TitleReadable",
            "trigger": "CTitleEdition::EDrive::TitleReadable"
        },
        {
            "contents": "CTitleEdition::EDrive::Title",
            "trigger": "CTitleEdition::EDrive::Title"
        },
        {
            "contents": "CTitleEdition::EDrive::User",
            "trigger": "CTitleEdition::EDrive::User"
        },
        {
            "contents": "TitleMaker",
            "trigger": "CTitle CTitleEdition.TitleMaker"
        },
        {
            "contents": "PackCreator",
            "trigger": "CPackCreator CTitleEdition.PackCreator"
        },
        {
            "contents": "EditedTitleId",
            "trigger": "Text CTitleEdition.EditedTitleId"
        },
        {
            "contents": "EditedTitleInfo",
            "trigger": "CPackCreatorTitleInfo CTitleEdition.EditedTitleInfo"
        },
        {
            "contents": "Dialog_IsFinished",
            "trigger": "Boolean CTitleEdition.Dialog_IsFinished"
        },
        {
            "contents": "Dialog_Success",
            "trigger": "Boolean CTitleEdition.Dialog_Success"
        },
        {
            "contents": "Dialog_Aborted",
            "trigger": "Boolean CTitleEdition.Dialog_Aborted"
        },
        {
            "contents": "File_ImportFromUser(${0:Text FileName})",
            "trigger": "Void File_ImportFromUser(Text FileName)"
        },
        {
            "contents": "File_Move(${0:Text OrigName}, ${1:Text DestNameOrFolder}, ${2:Boolean KeepOriginalCopy})",
            "trigger": "Void File_Move(Text OrigName, Text DestNameOrFolder, Boolean KeepOriginalCopy)"
        },
        {
            "contents": "File_Exists(${0:Text FileName}, ${1:EDrive InDrive})",
            "trigger": "Boolean File_Exists(Text FileName, EDrive InDrive)"
        },
        {
            "contents": "File_Delete(${0:Text Name})",
            "trigger": "Void File_Delete(Text Name)"
        },
        {
            "contents": "File_WriteText(${0:Text FileName}, ${1:Text Text})",
            "trigger": "Void File_WriteText(Text FileName, Text Text)"
        },
        {
            "contents": "File_ReadText(${0:Text FileName})",
            "trigger": "Text File_ReadText(Text FileName)"
        },
        {
            "contents": "Dialog_ImportFiles()",
            "trigger": "Void Dialog_ImportFiles()"
        },
        {
            "contents": "OpenTitleFolderInExplorer()",
            "trigger": "Void OpenTitleFolderInExplorer()"
        },
        {
            "contents": "ReloadTitleDesc()",
            "trigger": "Void ReloadTitleDesc()"
        },
        {
            "contents": "SaveTitleDesc()",
            "trigger": "Void SaveTitleDesc()"
        },
        {
            "contents": "SetTitleCampaign(${0:Integer CampaignNum}, ${1:Text ScoreContext}, ${2:Text MapsFolderNameOrPlayListName}, ${3:Boolean OfficialRecordEnabled})",
            "trigger": "Void SetTitleCampaign(Integer CampaignNum, Text ScoreContext, Text MapsFolderNameOrPlayListName, Boolean OfficialRecordEnabled)"
        },
        {
            "contents": "ToReal(${0:Text _Text})",
            "trigger": "Real TextLib::ToReal(Text _Text)\tReturns the Real corresponding to _Text."
        },
        {
            "contents": "ToInteger(${0:Text _Text})",
            "trigger": "Integer TextLib::ToInteger(Text _Text)\tReturns the Integer corresponding to _Text."
        },
        {
            "contents": "ToColor(${0:Text _Text})",
            "trigger": "Vec3 TextLib::ToColor(Text _Text)\tReturns the RGB color corresponding to _Text."
        },
        {
            "contents": "SubString(${0:Text _Text}, ${1:Integer _Start}, ${2:Integer _Length})",
            "trigger": "Text TextLib::SubString(Text _Text, Integer _Start, Integer _Length)\tReturns a substring of _Text."
        },
        {
            "contents": "SubText(${0:Text _Text}, ${1:Integer _Start}, ${2:Integer _Length})",
            "trigger": "Text TextLib::SubText(Text _Text, Integer _Start, Integer _Length)\tReturns a substring of _Text."
        },
        {
            "contents": "Length(${0:Text _Text})",
            "trigger": "Integer TextLib::Length(Text _Text)\tReturns the length of _Text."
        },
        {
            "contents": "ToText(${0:Integer _Integer})",
            "trigger": "Text TextLib::ToText(Integer _Integer)\tReturns the Text corresponding to _Integer."
        },
        {
            "contents": "ToText(${0:Real _Real})",
            "trigger": "Text TextLib::ToText(Real _Real)\tReturns the Text corresponding to _Real."
        },
        {
            "contents": "ToText(${0:Boolean _Boolean})",
            "trigger": "Text TextLib::ToText(Boolean _Boolean)\tReturns the Text corresponding to _Boolean."
        },
        {
            "contents": "ToText(${0:Int3 _Int3})",
            "trigger": "Text TextLib::ToText(Int3 _Int3)\tReturns the Text corresponding to _Int3."
        },
        {
            "contents": "ToText(${0:Vec3 _Vec3})",
            "trigger": "Text TextLib::ToText(Vec3 _Vec3)\tReturns the Text corresponding to _Vec3."
        },
        {
            "contents": "TimeToText(${0:Integer _Time}, ${1:Boolean _IncludeCentiSeconds})",
            "trigger": "Text TextLib::TimeToText(Integer _Time, Boolean _IncludeCentiSeconds)\tReturns the Text corresponding to _Time."
        },
        {
            "contents": "TimeToText(${0:Integer _Time})",
            "trigger": "Text TextLib::TimeToText(Integer _Time)\tReturns the Text corresponding to _Time."
        },
        {
            "contents": "ColorToText(${0:Vec3 _Color})",
            "trigger": "Text TextLib::ColorToText(Vec3 _Color)\tReturns the Text corresponding to _Color."
        },
        {
            "contents": "FormatInteger(${0:Integer Argument1}, ${1:Integer Argument2})",
            "trigger": "Text TextLib::FormatInteger(Integer Argument1, Integer Argument2)"
        },
        {
            "contents": "FormatReal(${0:Real _Value}, ${1:Integer _FPartLength}, ${2:Boolean _HideZeroes}, ${3:Boolean _HideDot})",
            "trigger": "Text TextLib::FormatReal(Real _Value, Integer _FPartLength, Boolean _HideZeroes, Boolean _HideDot)\tReturns the Text corresponding to a Real. With formatting."
        },
        {
            "contents": "ToUpperCase(${0:Text _TextToChange})",
            "trigger": "Text TextLib::ToUpperCase(Text _TextToChange)\tChanges lower case characters to upper case characters."
        },
        {
            "contents": "ToLowerCase(${0:Text _TextToChange})",
            "trigger": "Text TextLib::ToLowerCase(Text _TextToChange)\tChanges upper case characters to lower case characters."
        },
        {
            "contents": "CloseStyleTags(${0:Text _String})",
            "trigger": "Text TextLib::CloseStyleTags(Text _String)\tReturn a string where the previously unclosed $< tags have their $> counterpart."
        },
        {
            "contents": "CompareWithoutFormat(${0:Text _Text1}, ${1:Text _Text2}, ${2:Boolean _IsCaseSensitive})",
            "trigger": "Boolean TextLib::CompareWithoutFormat(Text _Text1, Text _Text2, Boolean _IsCaseSensitive)\tCompares texts without taking format characters in account."
        },
        {
            "contents": "Find(${0:Text _TextToFind}, ${1:Text _TextToSearchIn}, ${2:Boolean _IsFormatSensitive}, ${3:Boolean _IsCaseSensitive})",
            "trigger": "Boolean TextLib::Find(Text _TextToFind, Text _TextToSearchIn, Boolean _IsFormatSensitive, Boolean _IsCaseSensitive)\tReturns True if the searched text is found in the text to search in."
        },
        {
            "contents": "Compose(${0:Text Argument1})",
            "trigger": "Text TextLib::Compose(Text Argument1)"
        },
        {
            "contents": "Compose(${0:Text Argument1}, ${1:Text Argument2})",
            "trigger": "Text TextLib::Compose(Text Argument1, Text Argument2)"
        },
        {
            "contents": "Compose(${0:Text Argument1}, ${1:Text Argument2}, ${2:Text Argument3})",
            "trigger": "Text TextLib::Compose(Text Argument1, Text Argument2, Text Argument3)"
        },
        {
            "contents": "Compose(${0:Text Argument1}, ${1:Text Argument2}, ${2:Text Argument3}, ${3:Text Argument4})",
            "trigger": "Text TextLib::Compose(Text Argument1, Text Argument2, Text Argument3, Text Argument4)"
        },
        {
            "contents": "Compose(${0:Text Argument1}, ${1:Text Argument2}, ${2:Text Argument3}, ${3:Text Argument4}, ${4:Text Argument5})",
            "trigger": "Text TextLib::Compose(Text Argument1, Text Argument2, Text Argument3, Text Argument4, Text Argument5)"
        },
        {
            "contents": "Compose(${0:Text Argument1}, ${1:Text Argument2}, ${2:Text Argument3}, ${3:Text Argument4}, ${4:Text Argument5}, ${5:Text Argument6})",
            "trigger": "Text TextLib::Compose(Text Argument1, Text Argument2, Text Argument3, Text Argument4, Text Argument5, Text Argument6)"
        },
        {
            "contents": "MLEncode(${0:Text Argument1})",
            "trigger": "Text TextLib::MLEncode(Text Argument1)"
        },
        {
            "contents": "URLEncode(${0:Text Argument1})",
            "trigger": "Text TextLib::URLEncode(Text Argument1)"
        },
        {
            "contents": "StripFormatting(${0:Text Argument1})",
            "trigger": "Text TextLib::StripFormatting(Text Argument1)"
        },
        {
            "contents": "Split(${0:Text _Separators}, ${1:Text _Text})",
            "trigger": "Text[Void] TextLib::Split(Text _Separators, Text _Text)\tSplits a given text based on a given separators set."
        },
        {
            "contents": "Join(${0:Text _Separator}, ${1:Text _Texts})",
            "trigger": "Text TextLib::Join(Text _Separator, Text _Texts)\tJoins a set of texts with the given separator."
        },
        {
            "contents": "SmartSplit(${0:Text Argument1}, ${1:Integer Argument2}, ${2:Integer Argument3}, ${3:Integer Argument4})",
            "trigger": "Text TextLib::SmartSplit(Text Argument1, Integer Argument2, Integer Argument3, Integer Argument4)"
        },
        {
            "contents": "Trim(${0:Text Argument1})",
            "trigger": "Text TextLib::Trim(Text Argument1)"
        },
        {
            "contents": "ReplaceChars(${0:Text Argument1}, ${1:Text Argument2}, ${2:Text Argument3})",
            "trigger": "Text TextLib::ReplaceChars(Text Argument1, Text Argument2, Text Argument3)"
        },
        {
            "contents": "Replace(${0:Text _Text}, ${1:Text _ToReplace}, ${2:Text _Replacement})",
            "trigger": "Text TextLib::Replace(Text _Text, Text _ToReplace, Text _Replacement)\tReplaces occurences of _ToReplace in _Text with _Replacement."
        },
        {
            "contents": "GetTranslatedText(${0:Text _Text})",
            "trigger": "Text TextLib::GetTranslatedText(Text _Text)\tLookup the text in the current translation dictionary."
        },
        {
            "contents": "SmoothStep(${0:Real _X})",
            "trigger": "Real AnimLib::SmoothStep(Real _X)\tReturns the value smoothly transitionning from 0 to 1."
        },
        {
            "contents": "Ease(${0:Text _Function}, ${1:Real _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Real _Duration})",
            "trigger": "Real AnimLib::Ease(Text _Function, Real _T, Real _Base, Real _Change, Real _Duration)\tReturns the value animated from Base to Base+Delta using Robert Penner easing functions. Function must be one of: \"Linear\", \"QuadIn\", \"QuadOut\", \"QuadInOut\", \"CubicIn\", \"CubicOut\", \"CubicInOut\", \"QuartIn\", \"QuartOut\", \"QuartInOut\", \"QuintIn\", \"QuintOut\", \"QuintInOut\", \"SineIn\", \"SineOut\", \"SineInOut\", \"ExpIn\", \"ExpOut\", \"ExpInOut\", \"CircIn\", \"CircOut\", \"CircInOut\", \"BackIn\", \"BackOut\", \"BackInOut\", \"ElasticIn\", \"ElasticOut\", \"ElasticInOut\", \"ElasticIn2\", \"ElasticOut2\", \"ElasticInOut2\", \"BounceIn\", \"BounceOut\", \"BounceInOut\"."
        },
        {
            "contents": "EaseLinear(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseLinear(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInQuad(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInQuad(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseOutQuad(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseOutQuad(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInOutQuad(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInOutQuad(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInCubic(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInCubic(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseOutCubic(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseOutCubic(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInOutCubic(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInOutCubic(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInQuart(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInQuart(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseOutQuart(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseOutQuart(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInOutQuart(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInOutQuart(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInQuint(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInQuint(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseOutQuint(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseOutQuint(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInOutQuint(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInOutQuint(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInSine(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInSine(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseOutSine(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseOutSine(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInOutSine(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInOutSine(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInExp(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInExp(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseOutExp(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseOutExp(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInOutExp(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInOutExp(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInCirc(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInCirc(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseOutCirc(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseOutCirc(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInOutCirc(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInOutCirc(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInBack(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInBack(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseOutBack(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseOutBack(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInOutBack(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInOutBack(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInElastic(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInElastic(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseOutElastic(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseOutElastic(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInOutElastic(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInOutElastic(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInElastic2(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInElastic2(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseOutElastic2(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseOutElastic2(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInOutElastic2(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInOutElastic2(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInBounce(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInBounce(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseOutBounce(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseOutBounce(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "EaseInOutBounce(${0:Integer _T}, ${1:Real _Base}, ${2:Real _Change}, ${3:Integer _Duration})",
            "trigger": "Real AnimLib::EaseInOutBounce(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions."
        },
        {
            "contents": "GetNextDir(${0:CardinalDirections Argument1})",
            "trigger": "CardinalDirections MapUnits::GetNextDir(CardinalDirections Argument1)"
        },
        {
            "contents": "GetPreviousDir(${0:CardinalDirections Argument1})",
            "trigger": "CardinalDirections MapUnits::GetPreviousDir(CardinalDirections Argument1)"
        },
        {
            "contents": "GetOpposedDir(${0:CardinalDirections Argument1})",
            "trigger": "CardinalDirections MapUnits::GetOpposedDir(CardinalDirections Argument1)"
        },
        {
            "contents": "AddDirs(${0:CardinalDirections Argument1}, ${1:CardinalDirections Argument2})",
            "trigger": "CardinalDirections MapUnits::AddDirs(CardinalDirections Argument1, CardinalDirections Argument2)"
        },
        {
            "contents": "SubDirs(${0:CardinalDirections Argument1}, ${1:CardinalDirections Argument2})",
            "trigger": "CardinalDirections MapUnits::SubDirs(CardinalDirections Argument1, CardinalDirections Argument2)"
        },
        {
            "contents": "GetNeighbourCoord(${0:Int3 Argument1}, ${1:CardinalDirections Argument2})",
            "trigger": "Int3 MapUnits::GetNeighbourCoord(Int3 Argument1, CardinalDirections Argument2)"
        },
        {
            "contents": "GetRotatedOffset(${0:Int3 Argument1}, ${1:CardinalDirections Argument2})",
            "trigger": "Int3 MapUnits::GetRotatedOffset(Int3 Argument1, CardinalDirections Argument2)"
        },
        {
            "contents": "GetRotatedOffsetPositive(${0:Int3 Argument1}, ${1:CardinalDirections Argument2}, ${2:Int3 Argument3})",
            "trigger": "Int3 MapUnits::GetRotatedOffsetPositive(Int3 Argument1, CardinalDirections Argument2, Int3 Argument3)"
        },
        {
            "contents": "Abs(${0:Integer Argument1})",
            "trigger": "Integer MathLib::Abs(Integer Argument1)"
        },
        {
            "contents": "Abs(${0:Real Argument1})",
            "trigger": "Real MathLib::Abs(Real Argument1)"
        },
        {
            "contents": "ToReal(${0:Integer Argument1})",
            "trigger": "Real MathLib::ToReal(Integer Argument1)"
        },
        {
            "contents": "Sin(${0:Real Argument1})",
            "trigger": "Real MathLib::Sin(Real Argument1)"
        },
        {
            "contents": "Cos(${0:Real Argument1})",
            "trigger": "Real MathLib::Cos(Real Argument1)"
        },
        {
            "contents": "Tan(${0:Real Argument1})",
            "trigger": "Real MathLib::Tan(Real Argument1)"
        },
        {
            "contents": "Atan2(${0:Real Argument1}, ${1:Real Argument2})",
            "trigger": "Real MathLib::Atan2(Real Argument1, Real Argument2)"
        },
        {
            "contents": "Exp(${0:Real Argument1})",
            "trigger": "Real MathLib::Exp(Real Argument1)"
        },
        {
            "contents": "Rand(${0:Real Argument1}, ${1:Real Argument2})",
            "trigger": "Real MathLib::Rand(Real Argument1, Real Argument2)"
        },
        {
            "contents": "Rand(${0:Real Argument1}, ${1:Real Argument2}, ${2:Integer Argument3})",
            "trigger": "Real MathLib::Rand(Real Argument1, Real Argument2, Integer Argument3)"
        },
        {
            "contents": "Rand(${0:Integer Argument1}, ${1:Integer Argument2})",
            "trigger": "Integer MathLib::Rand(Integer Argument1, Integer Argument2)"
        },
        {
            "contents": "Rand(${0:Integer Argument1}, ${1:Integer Argument2}, ${2:Integer Argument3})",
            "trigger": "Integer MathLib::Rand(Integer Argument1, Integer Argument2, Integer Argument3)"
        },
        {
            "contents": "NearestReal(${0:Integer Argument1})",
            "trigger": "Real MathLib::NearestReal(Integer Argument1)"
        },
        {
            "contents": "NearestInteger(${0:Real Argument1})",
            "trigger": "Integer MathLib::NearestInteger(Real Argument1)"
        },
        {
            "contents": "FloorInteger(${0:Real Argument1})",
            "trigger": "Integer MathLib::FloorInteger(Real Argument1)"
        },
        {
            "contents": "CeilingInteger(${0:Real Argument1})",
            "trigger": "Integer MathLib::CeilingInteger(Real Argument1)"
        },
        {
            "contents": "Distance(${0:Vec3 Argument1}, ${1:Vec3 Argument2})",
            "trigger": "Real MathLib::Distance(Vec3 Argument1, Vec3 Argument2)"
        },
        {
            "contents": "DotProduct(${0:Vec3 Argument1}, ${1:Vec3 Argument2})",
            "trigger": "Real MathLib::DotProduct(Vec3 Argument1, Vec3 Argument2)"
        },
        {
            "contents": "CrossProduct(${0:Vec3 Argument1}, ${1:Vec3 Argument2})",
            "trigger": "Vec3 MathLib::CrossProduct(Vec3 Argument1, Vec3 Argument2)"
        },
        {
            "contents": "Angle(${0:Vec3 Argument1}, ${1:Vec3 Argument2})",
            "trigger": "Real MathLib::Angle(Vec3 Argument1, Vec3 Argument2)"
        },
        {
            "contents": "OrientedAngle(${0:Vec3 Argument1}, ${1:Vec3 Argument2})",
            "trigger": "Real MathLib::OrientedAngle(Vec3 Argument1, Vec3 Argument2)"
        },
        {
            "contents": "PI()",
            "trigger": "Real MathLib::PI()"
        },
        {
            "contents": "Asin(${0:Real Argument1})",
            "trigger": "Real MathLib::Asin(Real Argument1)"
        },
        {
            "contents": "Acos(${0:Real Argument1})",
            "trigger": "Real MathLib::Acos(Real Argument1)"
        },
        {
            "contents": "Pow(${0:Real Argument1}, ${1:Real Argument2})",
            "trigger": "Real MathLib::Pow(Real Argument1, Real Argument2)"
        },
        {
            "contents": "Ln(${0:Real Argument1})",
            "trigger": "Real MathLib::Ln(Real Argument1)"
        },
        {
            "contents": "Sqrt(${0:Real Argument1})",
            "trigger": "Real MathLib::Sqrt(Real Argument1)"
        },
        {
            "contents": "Max(${0:Integer _A}, ${1:Integer _B})",
            "trigger": "Integer MathLib::Max(Integer _A, Integer _B)\tReturns the maximum between A and B."
        },
        {
            "contents": "Min(${0:Integer _A}, ${1:Integer _B})",
            "trigger": "Integer MathLib::Min(Integer _A, Integer _B)\tReturns the minimum between A and B."
        },
        {
            "contents": "Clamp(${0:Integer _X}, ${1:Integer _Min}, ${2:Integer _Max})",
            "trigger": "Integer MathLib::Clamp(Integer _X, Integer _Min, Integer _Max)\tReturns the value X clamped to the range Min..Max."
        },
        {
            "contents": "Max(${0:Real _A}, ${1:Real _B})",
            "trigger": "Real MathLib::Max(Real _A, Real _B)\tReturns the maximum between A and B."
        },
        {
            "contents": "Min(${0:Real _A}, ${1:Real _B})",
            "trigger": "Real MathLib::Min(Real _A, Real _B)\tReturns the minimum between A and B."
        },
        {
            "contents": "Clamp(${0:Real _X}, ${1:Real _Min}, ${2:Real _Max})",
            "trigger": "Real MathLib::Clamp(Real _X, Real _Min, Real _Max)\tReturns the value X clamped to the range Min..Max."
        },
        {
            "contents": "Mod(${0:Real _X}, ${1:Real _Min}, ${2:Real _Max})",
            "trigger": "Real MathLib::Mod(Real _X, Real _Min, Real _Max)\tReturns the modulus of X in the range Min..Max."
        }
    ],
    "scope": "source.ms"
}