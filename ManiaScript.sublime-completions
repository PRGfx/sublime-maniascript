{
    "completions": [
        {
            "trigger": "Void", 
            "contents": "Void"
        }, 
        {
            "trigger": "Integer", 
            "contents": "Integer"
        }, 
        {
            "trigger": "Real", 
            "contents": "Real"
        }, 
        {
            "trigger": "Boolean", 
            "contents": "Boolean"
        }, 
        {
            "trigger": "Text", 
            "contents": "Text"
        }, 
        {
            "trigger": "Vec2", 
            "contents": "Vec2"
        }, 
        {
            "trigger": "Vec3", 
            "contents": "Vec3"
        }, 
        {
            "trigger": "Int3", 
            "contents": "Int3"
        }, 
        {
            "trigger": "Ident", 
            "contents": "Ident"
        }, 
        {
            "trigger": "CMlScript", 
            "contents": "CMlScript"
        }, 
        {
            "trigger": "CMlScript::LinkType::ExternalBrowser", 
            "contents": "CMlScript::LinkType::ExternalBrowser"
        }, 
        {
            "trigger": "CMlScript::LinkType::ManialinkBrowser", 
            "contents": "CMlScript::LinkType::ManialinkBrowser"
        }, 
        {
            "trigger": "CMlScript::LinkType::Goto", 
            "contents": "CMlScript::LinkType::Goto"
        }, 
        {
            "trigger": "CMlScript::LinkType::ExternalFromId", 
            "contents": "CMlScript::LinkType::ExternalFromId"
        }, 
        {
            "trigger": "CMlScript::LinkType::ManialinkFromId", 
            "contents": "CMlScript::LinkType::ManialinkFromId"
        }, 
        {
            "trigger": "CMlScript::LinkType::GotoFromId", 
            "contents": "CMlScript::LinkType::GotoFromId"
        }, 
        {
            "trigger": "CMlPage CMlScript.Page", 
            "contents": "Page"
        }, 
        {
            "trigger": "Boolean CMlScript.PageIsVisible", 
            "contents": "PageIsVisible"
        }, 
        {
            "trigger": "Integer CMlScript.Now", 
            "contents": "Now"
        }, 
        {
            "trigger": "Integer CMlScript.Period", 
            "contents": "Period"
        }, 
        {
            "trigger": "Integer CMlScript.CurrentTime", 
            "contents": "CurrentTime"
        }, 
        {
            "trigger": "Text CMlScript.CurrentTimeText", 
            "contents": "CurrentTimeText"
        }, 
        {
            "trigger": "Text CMlScript.CurrentLocalDateText", 
            "contents": "CurrentLocalDateText"
        }, 
        {
            "trigger": "CUser CMlScript.LocalUser", 
            "contents": "LocalUser"
        }, 
        {
            "trigger": "CTitle CMlScript.LoadedTitle", 
            "contents": "LoadedTitle"
        }, 
        {
            "trigger": "Real CMlScript.MouseX", 
            "contents": "MouseX"
        }, 
        {
            "trigger": "Real CMlScript.MouseY", 
            "contents": "MouseY"
        }, 
        {
            "trigger": "Boolean CMlScript.MouseLeftButton", 
            "contents": "MouseLeftButton"
        }, 
        {
            "trigger": "Boolean CMlScript.MouseRightButton", 
            "contents": "MouseRightButton"
        }, 
        {
            "trigger": "Boolean CMlScript.MouseMiddleButton", 
            "contents": "MouseMiddleButton"
        }, 
        {
            "trigger": "Boolean CMlScript.KeyUp", 
            "contents": "KeyUp"
        }, 
        {
            "trigger": "Boolean CMlScript.KeyDown", 
            "contents": "KeyDown"
        }, 
        {
            "trigger": "Boolean CMlScript.KeyLeft", 
            "contents": "KeyLeft"
        }, 
        {
            "trigger": "Boolean CMlScript.KeyRight", 
            "contents": "KeyRight"
        }, 
        {
            "trigger": "Boolean CMlScript.KeyReturn", 
            "contents": "KeyReturn"
        }, 
        {
            "trigger": "Boolean CMlScript.KeySpace", 
            "contents": "KeySpace"
        }, 
        {
            "trigger": "Boolean CMlScript.KeyDelete", 
            "contents": "KeyDelete"
        }, 
        {
            "trigger": "Boolean CMlScript.IsKeyPressed(Integer KeyCode)", 
            "contents": "IsKeyPressed(${1:Integer KeyCode})"
        }, 
        {
            "trigger": "Boolean CMlScript.EnableMenuNavigationInputs", 
            "contents": "EnableMenuNavigationInputs"
        }, 
        {
            "trigger": "Void CMlScript.EnableMenuNavigation(Boolean EnableInputs, Boolean WithAutoFocus, CMlControl AutoBackControl, Integer InputPriority)", 
            "contents": "EnableMenuNavigation(${1:Boolean EnableInputs}, ${2:Boolean WithAutoFocus}, ${3:CMlControl AutoBackControl}, ${4:Integer InputPriority})"
        }, 
        {
            "trigger": "Boolean CMlScript.IsMenuNavigationForeground", 
            "contents": "IsMenuNavigationForeground"
        }, 
        {
            "trigger": "Void CMlScript.OpenLink(Text Url, LinkType LinkType)", 
            "contents": "OpenLink(${1:Text Url}, ${2:LinkType LinkType})"
        }, 
        {
            "trigger": "Void CMlScript.TriggerPageAction(Text ActionString)", 
            "contents": "TriggerPageAction(${1:Text ActionString})"
        }, 
        {
            "trigger": "CXmlManager CMlScript.Xml", 
            "contents": "Xml"
        }, 
        {
            "trigger": "CHttpManager CMlScript.Http", 
            "contents": "Http"
        }, 
        {
            "trigger": "CAudioManager CMlScript.Audio", 
            "contents": "Audio"
        }, 
        {
            "trigger": "Void CMlScript.SendCustomEvent(Text Type, Text[] Data)", 
            "contents": "SendCustomEvent(${1:Text Type}, ${2:Text[] Data})"
        }, 
        {
            "trigger": "Void CMlScript.PreloadImage(Text ImageUrl)", 
            "contents": "PreloadImage(${1:Text ImageUrl})"
        }, 
        {
            "trigger": "CMlEntry", 
            "contents": "CMlEntry"
        }, 
        {
            "trigger": "CMlEntry::EKeepRatioMode::Inactive", 
            "contents": "CMlEntry::EKeepRatioMode::Inactive"
        }, 
        {
            "trigger": "CMlEntry::EKeepRatioMode::Clip", 
            "contents": "CMlEntry::EKeepRatioMode::Clip"
        }, 
        {
            "trigger": "CMlEntry::EKeepRatioMode::Fit", 
            "contents": "CMlEntry::EKeepRatioMode::Fit"
        }, 
        {
            "trigger": "Void CMlEntry.ChangeImageUrl(Text fieldName)", 
            "contents": "ChangeImageUrl(${1:Text fieldName})"
        }, 
        {
            "trigger": "Text CMlEntry.ImageUrl", 
            "contents": "ImageUrl"
        }, 
        {
            "trigger": "Text CMlEntry.ImageUrlFocus", 
            "contents": "ImageUrlFocus"
        }, 
        {
            "trigger": "Text CMlEntry.Style", 
            "contents": "Style"
        }, 
        {
            "trigger": "Text CMlEntry.Substyle", 
            "contents": "Substyle"
        }, 
        {
            "trigger": "Boolean CMlEntry.StyleSelected", 
            "contents": "StyleSelected"
        }, 
        {
            "trigger": "Boolean CMlEntry.DownloadInProgress", 
            "contents": "DownloadInProgress"
        }, 
        {
            "trigger": "Vec3 CMlEntry.Colorize", 
            "contents": "Colorize"
        }, 
        {
            "trigger": "Vec3 CMlEntry.ModulateColor", 
            "contents": "ModulateColor"
        }, 
        {
            "trigger": "Vec3 CMlEntry.BgColor", 
            "contents": "BgColor"
        }, 
        {
            "trigger": "Vec3 CMlEntry.BgColorFocus", 
            "contents": "BgColorFocus"
        }, 
        {
            "trigger": "Real CMlEntry.Opacity", 
            "contents": "Opacity"
        }, 
        {
            "trigger": "EKeepRatioMode CMlEntry.KeepRatio", 
            "contents": "KeepRatio"
        }, 
        {
            "trigger": "CMlGauge", 
            "contents": "CMlGauge"
        }, 
        {
            "trigger": "CMlGauge::EBuddyAction::Add", 
            "contents": "CMlGauge::EBuddyAction::Add"
        }, 
        {
            "trigger": "CMlGauge::EBuddyAction::Invite", 
            "contents": "CMlGauge::EBuddyAction::Invite"
        }, 
        {
            "trigger": "CMlGauge::EBuddyAction::Remove", 
            "contents": "CMlGauge::EBuddyAction::Remove"
        }, 
        {
            "trigger": "CMlGauge::EBuddyResult::Ok", 
            "contents": "CMlGauge::EBuddyResult::Ok"
        }, 
        {
            "trigger": "CMlGauge::EBuddyResult::Error", 
            "contents": "CMlGauge::EBuddyResult::Error"
        }, 
        {
            "trigger": "CMlGauge::EBuddyResult::NotFinished", 
            "contents": "CMlGauge::EBuddyResult::NotFinished"
        }, 
        {
            "trigger": "CMap CMlGauge.CurMap", 
            "contents": "CurMap"
        }, 
        {
            "trigger": "Void CMlGauge.ShowCurMapCard()", 
            "contents": "ShowCurMapCard()"
        }, 
        {
            "trigger": "EBuddyResult CMlGauge.BuddyDoResult", 
            "contents": "BuddyDoResult"
        }, 
        {
            "trigger": "Text CMlGauge.BuddyDoErrorMessage", 
            "contents": "BuddyDoErrorMessage"
        }, 
        {
            "trigger": "Boolean CMlGauge.IsInBrowser", 
            "contents": "IsInBrowser"
        }, 
        {
            "trigger": "Void CMlGauge.BrowserBack()", 
            "contents": "BrowserBack()"
        }, 
        {
            "trigger": "Void CMlGauge.BrowserQuit()", 
            "contents": "BrowserQuit()"
        }, 
        {
            "trigger": "Void CMlGauge.BrowserHome()", 
            "contents": "BrowserHome()"
        }, 
        {
            "trigger": "Void CMlGauge.BrowserReload()", 
            "contents": "BrowserReload()"
        }, 
        {
            "trigger": "Text CMlGauge.BrowserFocusedFrameId", 
            "contents": "BrowserFocusedFrameId"
        }, 
        {
            "trigger": "Void CMlGauge.SetLocalUserClubLink(Text ClubLink)", 
            "contents": "SetLocalUserClubLink(${1:Text ClubLink})"
        }, 
        {
            "trigger": "CManiaApp", 
            "contents": "CManiaApp"
        }, 
        {
            "trigger": "CManiaApp::ELinkType::ExternalBrowser", 
            "contents": "CManiaApp::ELinkType::ExternalBrowser"
        }, 
        {
            "trigger": "CManiaApp::ELinkType::ManialinkBrowser", 
            "contents": "CManiaApp::ELinkType::ManialinkBrowser"
        }, 
        {
            "trigger": "Integer CManiaApp.Now", 
            "contents": "Now"
        }, 
        {
            "trigger": "Boolean CManiaApp.IsVisible", 
            "contents": "IsVisible"
        }, 
        {
            "trigger": "CUser CManiaApp.LocalUser", 
            "contents": "LocalUser"
        }, 
        {
            "trigger": "CTitle CManiaApp.LoadedTitle", 
            "contents": "LoadedTitle"
        }, 
        {
            "trigger": "Boolean CManiaApp.EnableMenuNavigationInputs", 
            "contents": "EnableMenuNavigationInputs"
        }, 
        {
            "trigger": "Real CManiaApp.MouseX", 
            "contents": "MouseX"
        }, 
        {
            "trigger": "Real CManiaApp.MouseY", 
            "contents": "MouseY"
        }, 
        {
            "trigger": "CUILayer CManiaApp.UILayerCreate()", 
            "contents": "UILayerCreate()"
        }, 
        {
            "trigger": "Void CManiaApp.UILayerDestroy(CUILayer Layer)", 
            "contents": "UILayerDestroy(${1:CUILayer Layer})"
        }, 
        {
            "trigger": "Void CManiaApp.UILayerDestroyAll()", 
            "contents": "UILayerDestroyAll()"
        }, 
        {
            "trigger": "Void CManiaApp.LayerCustomEvent(CUILayer Layer, Text Type, Text[] Data)", 
            "contents": "LayerCustomEvent(${1:CUILayer Layer}, ${2:Text Type}, ${3:Text[] Data})"
        }, 
        {
            "trigger": "Void CManiaApp.OpenLink(Text Url, ELinkType LinkType)", 
            "contents": "OpenLink(${1:Text Url}, ${2:ELinkType LinkType})"
        }, 
        {
            "trigger": "CXmlManager CManiaApp.Xml", 
            "contents": "Xml"
        }, 
        {
            "trigger": "CHttpManager CManiaApp.Http", 
            "contents": "Http"
        }, 
        {
            "trigger": "CAudioManager CManiaApp.Audio", 
            "contents": "Audio"
        }, 
        {
            "trigger": "CManiaAppEvent", 
            "contents": "CManiaAppEvent"
        }, 
        {
            "trigger": "CManiaAppEvent::EType::LayerCustomEvent", 
            "contents": "CManiaAppEvent::EType::LayerCustomEvent"
        }, 
        {
            "trigger": "CManiaAppEvent::EType::KeyPress", 
            "contents": "CManiaAppEvent::EType::KeyPress"
        }, 
        {
            "trigger": "CManiaAppEvent::EType::ExternalCustomEvent", 
            "contents": "CManiaAppEvent::EType::ExternalCustomEvent"
        }, 
        {
            "trigger": "CManiaAppEvent::EType::MenuNavigation", 
            "contents": "CManiaAppEvent::EType::MenuNavigation"
        }, 
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::Up", 
            "contents": "CManiaAppEvent::EMenuNavAction::Up"
        }, 
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::Right", 
            "contents": "CManiaAppEvent::EMenuNavAction::Right"
        }, 
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::Left", 
            "contents": "CManiaAppEvent::EMenuNavAction::Left"
        }, 
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::Down", 
            "contents": "CManiaAppEvent::EMenuNavAction::Down"
        }, 
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::Select", 
            "contents": "CManiaAppEvent::EMenuNavAction::Select"
        }, 
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::Cancel", 
            "contents": "CManiaAppEvent::EMenuNavAction::Cancel"
        }, 
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::PageUp", 
            "contents": "CManiaAppEvent::EMenuNavAction::PageUp"
        }, 
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::PageDown", 
            "contents": "CManiaAppEvent::EMenuNavAction::PageDown"
        }, 
        {
            "trigger": "EType CManiaAppEvent.Type", 
            "contents": "Type"
        }, 
        {
            "trigger": "CUILayer CManiaAppEvent.CustomEventLayer", 
            "contents": "CustomEventLayer"
        }, 
        {
            "trigger": "Text CManiaAppEvent.CustomEventType", 
            "contents": "CustomEventType"
        }, 
        {
            "trigger": "Text CManiaAppEvent.ExternalEventType", 
            "contents": "ExternalEventType"
        }, 
        {
            "trigger": "EMenuNavAction CManiaAppEvent.MenuNavAction", 
            "contents": "MenuNavAction"
        }, 
        {
            "trigger": "Integer CManiaAppEvent.KeyCode", 
            "contents": "KeyCode"
        }, 
        {
            "trigger": "Text CManiaAppEvent.KeyName", 
            "contents": "KeyName"
        }, 
        {
            "trigger": "CManiaAppTitle", 
            "contents": "CManiaAppTitle"
        }, 
        {
            "trigger": "CManiaAppTitle::CardinalDirections::North", 
            "contents": "CManiaAppTitle::CardinalDirections::North"
        }, 
        {
            "trigger": "CManiaAppTitle::CardinalDirections::East", 
            "contents": "CManiaAppTitle::CardinalDirections::East"
        }, 
        {
            "trigger": "CManiaAppTitle::CardinalDirections::South", 
            "contents": "CManiaAppTitle::CardinalDirections::South"
        }, 
        {
            "trigger": "CManiaAppTitle::CardinalDirections::West", 
            "contents": "CManiaAppTitle::CardinalDirections::West"
        }, 
        {
            "trigger": "CManiaAppTitle::PlaceMode::Unknown", 
            "contents": "CManiaAppTitle::PlaceMode::Unknown"
        }, 
        {
            "trigger": "CManiaAppTitle::PlaceMode::Terraform", 
            "contents": "CManiaAppTitle::PlaceMode::Terraform"
        }, 
        {
            "trigger": "CManiaAppTitle::PlaceMode::Block", 
            "contents": "CManiaAppTitle::PlaceMode::Block"
        }, 
        {
            "trigger": "CManiaAppTitle::PlaceMode::Macroblock", 
            "contents": "CManiaAppTitle::PlaceMode::Macroblock"
        }, 
        {
            "trigger": "CManiaAppTitle::PlaceMode::Skin", 
            "contents": "CManiaAppTitle::PlaceMode::Skin"
        }, 
        {
            "trigger": "CManiaAppTitle::PlaceMode::CopyPaste", 
            "contents": "CManiaAppTitle::PlaceMode::CopyPaste"
        }, 
        {
            "trigger": "CManiaAppTitle::PlaceMode::Test", 
            "contents": "CManiaAppTitle::PlaceMode::Test"
        }, 
        {
            "trigger": "CManiaAppTitle::PlaceMode::Plugin", 
            "contents": "CManiaAppTitle::PlaceMode::Plugin"
        }, 
        {
            "trigger": "CManiaAppTitle::PlaceMode::CustomSelection", 
            "contents": "CManiaAppTitle::PlaceMode::CustomSelection"
        }, 
        {
            "trigger": "CManiaAppTitle::PlaceMode::OffZone", 
            "contents": "CManiaAppTitle::PlaceMode::OffZone"
        }, 
        {
            "trigger": "CManiaAppTitle::PlaceMode::BlockProperty", 
            "contents": "CManiaAppTitle::PlaceMode::BlockProperty"
        }, 
        {
            "trigger": "CManiaAppTitle::PlaceMode::Path", 
            "contents": "CManiaAppTitle::PlaceMode::Path"
        }, 
        {
            "trigger": "CManiaAppTitle::PlaceMode::GhostBlock", 
            "contents": "CManiaAppTitle::PlaceMode::GhostBlock"
        }, 
        {
            "trigger": "CManiaAppTitle::EditMode::Unknown", 
            "contents": "CManiaAppTitle::EditMode::Unknown"
        }, 
        {
            "trigger": "CManiaAppTitle::EditMode::Place", 
            "contents": "CManiaAppTitle::EditMode::Place"
        }, 
        {
            "trigger": "CManiaAppTitle::EditMode::FreeLook", 
            "contents": "CManiaAppTitle::EditMode::FreeLook"
        }, 
        {
            "trigger": "CManiaAppTitle::EditMode::Erase", 
            "contents": "CManiaAppTitle::EditMode::Erase"
        }, 
        {
            "trigger": "CManiaAppTitle::EditMode::Pick", 
            "contents": "CManiaAppTitle::EditMode::Pick"
        }, 
        {
            "trigger": "CManiaAppTitle::EditMode::SelectionAdd", 
            "contents": "CManiaAppTitle::EditMode::SelectionAdd"
        }, 
        {
            "trigger": "CManiaAppTitle::EditMode::SelectionRemove", 
            "contents": "CManiaAppTitle::EditMode::SelectionRemove"
        }, 
        {
            "trigger": "CMap CManiaAppTitle.Map", 
            "contents": "Map"
        }, 
        {
            "trigger": "Void CManiaAppTitle.ComputeShadows()", 
            "contents": "ComputeShadows()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.Undo()", 
            "contents": "Undo()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.Redo()", 
            "contents": "Redo()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.Quit()", 
            "contents": "Quit()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.Help()", 
            "contents": "Help()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.Validate()", 
            "contents": "Validate()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.AutoSave()", 
            "contents": "AutoSave()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.SaveMap(Text FileName, Text Path)", 
            "contents": "SaveMap(${1:Text FileName}, ${2:Text Path})"
        }, 
        {
            "trigger": "PlaceMode CManiaAppTitle.PlaceMode", 
            "contents": "PlaceMode"
        }, 
        {
            "trigger": "EditMode CManiaAppTitle.EditMode", 
            "contents": "EditMode"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.UndergroundMode", 
            "contents": "UndergroundMode"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.BlockStockMode", 
            "contents": "BlockStockMode"
        }, 
        {
            "trigger": "Int3 CManiaAppTitle.CursorCoord", 
            "contents": "CursorCoord"
        }, 
        {
            "trigger": "CardinalDirections CManiaAppTitle.CursorDir", 
            "contents": "CursorDir"
        }, 
        {
            "trigger": "CBlockModel CManiaAppTitle.CursorBlockModel", 
            "contents": "CursorBlockModel"
        }, 
        {
            "trigger": "CBlockModel CManiaAppTitle.CursorTerrainBlockModel", 
            "contents": "CursorTerrainBlockModel"
        }, 
        {
            "trigger": "CMacroblockModel CManiaAppTitle.CursorMacroblockModel", 
            "contents": "CursorMacroblockModel"
        }, 
        {
            "trigger": "Real CManiaAppTitle.CameraVAngle", 
            "contents": "CameraVAngle"
        }, 
        {
            "trigger": "Real CManiaAppTitle.CameraHAngle", 
            "contents": "CameraHAngle"
        }, 
        {
            "trigger": "Real CManiaAppTitle.CameraToTargetDistance", 
            "contents": "CameraToTargetDistance"
        }, 
        {
            "trigger": "Vec3 CManiaAppTitle.TargetedPosition", 
            "contents": "TargetedPosition"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EnableAirMapping", 
            "contents": "EnableAirMapping"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EnableMixMapping", 
            "contents": "EnableMixMapping"
        }, 
        {
            "trigger": "Void CManiaAppTitle.RemoveAllBlocks()", 
            "contents": "RemoveAllBlocks()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.RemoveAllTerrain()", 
            "contents": "RemoveAllTerrain()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.RemoveAllOffZone()", 
            "contents": "RemoveAllOffZone()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.RemoveAllObjects()", 
            "contents": "RemoveAllObjects()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.RemoveAll()", 
            "contents": "RemoveAll()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.RemoveAllBlocksAndTerrain()", 
            "contents": "RemoveAllBlocksAndTerrain()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.ShowCustomSelection()", 
            "contents": "ShowCustomSelection()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.HideCustomSelection()", 
            "contents": "HideCustomSelection()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.CopyPaste_Copy()", 
            "contents": "CopyPaste_Copy()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.CopyPaste_Cut()", 
            "contents": "CopyPaste_Cut()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.CopyPaste_Remove()", 
            "contents": "CopyPaste_Remove()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.CopyPaste_SelectAll()", 
            "contents": "CopyPaste_SelectAll()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.CopyPaste_ResetSelection()", 
            "contents": "CopyPaste_ResetSelection()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.OpenToolsMenu()", 
            "contents": "OpenToolsMenu()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.EditMediatrackIngame()", 
            "contents": "EditMediatrackIngame()"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.CanPlaceBlock(CBlockModel BlockModel, Int3 Coord, CardinalDirections Dir, Boolean OnGround, Integer VariantIndex)", 
            "contents": "CanPlaceBlock(${1:CBlockModel BlockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir}, ${4:Boolean OnGround}, ${5:Integer VariantIndex})"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.PlaceBlock(CBlockModel BlockModel, Int3 Coord, CardinalDirections Dir)", 
            "contents": "PlaceBlock(${1:CBlockModel BlockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.CanPlaceBlock_NoDestruction(CBlockModel BlockModel, Int3 Coord, CardinalDirections Dir, Boolean OnGround, Integer VariantIndex)", 
            "contents": "CanPlaceBlock_NoDestruction(${1:CBlockModel BlockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir}, ${4:Boolean OnGround}, ${5:Integer VariantIndex})"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.PlaceBlock_NoDestruction(CBlockModel BlockModel, Int3 Coord, CardinalDirections Dir)", 
            "contents": "PlaceBlock_NoDestruction(${1:CBlockModel BlockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.CanPlaceRoadBlocks(CBlockModel BlockModel, Int3 StartCoord, Int3 EndCoord)", 
            "contents": "CanPlaceRoadBlocks(${1:CBlockModel BlockModel}, ${2:Int3 StartCoord}, ${3:Int3 EndCoord})"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.PlaceRoadBlocks(CBlockModel BlockModel, Int3 StartCoord, Int3 EndCoord)", 
            "contents": "PlaceRoadBlocks(${1:CBlockModel BlockModel}, ${2:Int3 StartCoord}, ${3:Int3 EndCoord})"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.CanPlaceTerrainBlocks(CBlockModel BlockModel, Int3 StartCoord, Int3 EndCoord)", 
            "contents": "CanPlaceTerrainBlocks(${1:CBlockModel BlockModel}, ${2:Int3 StartCoord}, ${3:Int3 EndCoord})"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.PlaceTerrainBlocks(CBlockModel BlockModel, Int3 StartCoord, Int3 EndCoord)", 
            "contents": "PlaceTerrainBlocks(${1:CBlockModel BlockModel}, ${2:Int3 StartCoord}, ${3:Int3 EndCoord})"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.PlaceTerrainBlocks_NoDestruction(CBlockModel BlockModel, Int3 StartCoord, Int3 EndCoord)", 
            "contents": "PlaceTerrainBlocks_NoDestruction(${1:CBlockModel BlockModel}, ${2:Int3 StartCoord}, ${3:Int3 EndCoord})"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.CanPlaceMacroblock(CMacroblockModel BlockModel, Int3 Coord, CardinalDirections Dir)", 
            "contents": "CanPlaceMacroblock(${1:CMacroblockModel BlockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.PlaceMacroblock(CMacroblockModel BlockModel, Int3 Coord, CardinalDirections Dir)", 
            "contents": "PlaceMacroblock(${1:CMacroblockModel BlockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.CanPlaceMacroblock_NoDestruction(CMacroblockModel BlockModel, Int3 Coord, CardinalDirections Dir)", 
            "contents": "CanPlaceMacroblock_NoDestruction(${1:CMacroblockModel BlockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.PlaceMacroblock_NoDestruction(CMacroblockModel BlockModel, Int3 Coord, CardinalDirections Dir)", 
            "contents": "PlaceMacroblock_NoDestruction(${1:CMacroblockModel BlockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        }, 
        {
            "trigger": "CBlock CManiaAppTitle.GetBlock(Int3 Coord)", 
            "contents": "GetBlock(${1:Int3 Coord})"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.RemoveBlock(Int3 Coord)", 
            "contents": "RemoveBlock(${1:Int3 Coord})"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.RemoveTerrainBlocks(Int3 StartCoord, Int3 EndCoord)", 
            "contents": "RemoveTerrainBlocks(${1:Int3 StartCoord}, ${2:Int3 EndCoord})"
        }, 
        {
            "trigger": "Integer CManiaAppTitle.GetBlockGroundHeight(CBlockModel BlockModel, Integer CoordX, Integer CoordZ, CardinalDirections Dir)", 
            "contents": "GetBlockGroundHeight(${1:CBlockModel BlockModel}, ${2:Integer CoordX}, ${3:Integer CoordZ}, ${4:CardinalDirections Dir})"
        }, 
        {
            "trigger": "CBlock CManiaAppTitle.GetStartLineBlock()", 
            "contents": "GetStartLineBlock()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.CopyPaste_AddOrSubSelection(Int3 StartCoord, Int3 EndCoord)", 
            "contents": "CopyPaste_AddOrSubSelection(${1:Int3 StartCoord}, ${2:Int3 EndCoord})"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.CopyPaste_Symmetrize()", 
            "contents": "CopyPaste_Symmetrize()"
        }, 
        {
            "trigger": "Void CManiaAppTitle.SaveMacroblock(CMacroblockModel MacroblockModel)", 
            "contents": "SaveMacroblock(${1:CMacroblockModel MacroblockModel})"
        }, 
        {
            "trigger": "Integer CManiaAppTitle.GetInterfaceNumber(CCollector Collector)", 
            "contents": "GetInterfaceNumber(${1:CCollector Collector})"
        }, 
        {
            "trigger": "Void CManiaAppTitle.SetInterfaceNumber(CCollector Collector, Integer NewValue)", 
            "contents": "SetInterfaceNumber(${1:CCollector Collector}, ${2:Integer NewValue})"
        }, 
        {
            "trigger": "CMacroblockModel CManiaAppTitle.GetMacroblockModelFromName(Text MacroblockModelName)", 
            "contents": "GetMacroblockModelFromName(${1:Text MacroblockModelName})"
        }, 
        {
            "trigger": "CBlockModel CManiaAppTitle.GetTerrainBlockModelFromName(Text TerrainBlockModelName)", 
            "contents": "GetTerrainBlockModelFromName(${1:Text TerrainBlockModelName})"
        }, 
        {
            "trigger": "CBlockModel CManiaAppTitle.GetBlockModelFromName(Text BlockModelName)", 
            "contents": "GetBlockModelFromName(${1:Text BlockModelName})"
        }, 
        {
            "trigger": "Integer CManiaAppTitle.MediatrackIngameEditedClipIndex", 
            "contents": "MediatrackIngameEditedClipIndex"
        }, 
        {
            "trigger": "Vec3 CManiaAppTitle.CustomSelectionRGB", 
            "contents": "CustomSelectionRGB"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EnableEditorInputsCustomProcessing", 
            "contents": "EnableEditorInputsCustomProcessing"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_Menu", 
            "contents": "EditorInputIsDown_Menu"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_SwitchToRace", 
            "contents": "EditorInputIsDown_SwitchToRace"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_CursorUp", 
            "contents": "EditorInputIsDown_CursorUp"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_CursorRight", 
            "contents": "EditorInputIsDown_CursorRight"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_CursorDown", 
            "contents": "EditorInputIsDown_CursorDown"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_CursorLeft", 
            "contents": "EditorInputIsDown_CursorLeft"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_CursorRaise", 
            "contents": "EditorInputIsDown_CursorRaise"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_CursorLower", 
            "contents": "EditorInputIsDown_CursorLower"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_CursorTurn", 
            "contents": "EditorInputIsDown_CursorTurn"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_CursorPick", 
            "contents": "EditorInputIsDown_CursorPick"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_CursorPlace", 
            "contents": "EditorInputIsDown_CursorPlace"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_CursorDelete", 
            "contents": "EditorInputIsDown_CursorDelete"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_CameraUp", 
            "contents": "EditorInputIsDown_CameraUp"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_CameraRight", 
            "contents": "EditorInputIsDown_CameraRight"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_CameraDown", 
            "contents": "EditorInputIsDown_CameraDown"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_CameraLeft", 
            "contents": "EditorInputIsDown_CameraLeft"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_IconUp", 
            "contents": "EditorInputIsDown_IconUp"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_IconRight", 
            "contents": "EditorInputIsDown_IconRight"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_IconDown", 
            "contents": "EditorInputIsDown_IconDown"
        }, 
        {
            "trigger": "Boolean CManiaAppTitle.EditorInputIsDown_IconLeft", 
            "contents": "EditorInputIsDown_IconLeft"
        }, 
        {
            "trigger": "Real CManiaAppTitle.CollectionSquareSize", 
            "contents": "CollectionSquareSize"
        }, 
        {
            "trigger": "Real CManiaAppTitle.CollectionSquareHeight", 
            "contents": "CollectionSquareHeight"
        }, 
        {
            "trigger": "Integer CManiaAppTitle.CollectionGroundY", 
            "contents": "CollectionGroundY"
        }, 
        {
            "trigger": "Text CManiaAppTitle.ManialinkText", 
            "contents": "ManialinkText"
        }, 
        {
            "trigger": "CMlPage CManiaAppTitle.ManialinkPage", 
            "contents": "ManialinkPage"
        }, 
        {
            "trigger": "CSmMode", 
            "contents": "CSmMode"
        }, 
        {
            "trigger": "CSmMode::EWeapon::Laser", 
            "contents": "CSmMode::EWeapon::Laser"
        }, 
        {
            "trigger": "CSmMode::EWeapon::Rocket", 
            "contents": "CSmMode::EWeapon::Rocket"
        }, 
        {
            "trigger": "CSmMode::EWeapon::Nucleus", 
            "contents": "CSmMode::EWeapon::Nucleus"
        }, 
        {
            "trigger": "CSmMode::EWeapon::Arrow", 
            "contents": "CSmMode::EWeapon::Arrow"
        }, 
        {
            "trigger": "CSmMode::EActionSlot::Slot_A", 
            "contents": "CSmMode::EActionSlot::Slot_A"
        }, 
        {
            "trigger": "CSmMode::EActionSlot::Slot_B", 
            "contents": "CSmMode::EActionSlot::Slot_B"
        }, 
        {
            "trigger": "CSmMode::EActionSlot::Slot_C", 
            "contents": "CSmMode::EActionSlot::Slot_C"
        }, 
        {
            "trigger": "CSmMode::EActionSlot::Slot_D", 
            "contents": "CSmMode::EActionSlot::Slot_D"
        }, 
        {
            "trigger": "CSmMode::EActionSlot::Slot_E", 
            "contents": "CSmMode::EActionSlot::Slot_E"
        }, 
        {
            "trigger": "CSmMode::EActionSlot::Slot_F", 
            "contents": "CSmMode::EActionSlot::Slot_F"
        }, 
        {
            "trigger": "CSmMode::EActionSlot::Slot_G", 
            "contents": "CSmMode::EActionSlot::Slot_G"
        }, 
        {
            "trigger": "CSmMode::EActionSlot::Slot_H", 
            "contents": "CSmMode::EActionSlot::Slot_H"
        }, 
        {
            "trigger": "CSmMode::EActionInput::Weapon", 
            "contents": "CSmMode::EActionInput::Weapon"
        }, 
        {
            "trigger": "CSmMode::EActionInput::Movement", 
            "contents": "CSmMode::EActionInput::Movement"
        }, 
        {
            "trigger": "CSmMode::EActionInput::Activable1", 
            "contents": "CSmMode::EActionInput::Activable1"
        }, 
        {
            "trigger": "CSmMode::EActionInput::Activable2", 
            "contents": "CSmMode::EActionInput::Activable2"
        }, 
        {
            "trigger": "CSmMode::EActionInput::Activable3", 
            "contents": "CSmMode::EActionInput::Activable3"
        }, 
        {
            "trigger": "CSmMode::EActionInput::Activable4", 
            "contents": "CSmMode::EActionInput::Activable4"
        }, 
        {
            "trigger": "CSmMode::EActionInput::Consumable1", 
            "contents": "CSmMode::EActionInput::Consumable1"
        }, 
        {
            "trigger": "CSmMode::EActionInput::Consumable2", 
            "contents": "CSmMode::EActionInput::Consumable2"
        }, 
        {
            "trigger": "CSmMode::EActionInput::None", 
            "contents": "CSmMode::EActionInput::None"
        }, 
        {
            "trigger": "CSmMode::EGameplay::Default", 
            "contents": "CSmMode::EGameplay::Default"
        }, 
        {
            "trigger": "CSmMode::EGameplay::Mp3Beta0", 
            "contents": "CSmMode::EGameplay::Mp3Beta0"
        }, 
        {
            "trigger": "Integer CSmMode.StartTime", 
            "contents": "StartTime"
        }, 
        {
            "trigger": "Integer CSmMode.EndTime", 
            "contents": "EndTime"
        }, 
        {
            "trigger": "Integer CSmMode.SpawnInvulnerabilityDuration", 
            "contents": "SpawnInvulnerabilityDuration"
        }, 
        {
            "trigger": "Boolean CSmMode.UseClans", 
            "contents": "UseClans"
        }, 
        {
            "trigger": "Boolean CSmMode.UseForcedClans", 
            "contents": "UseForcedClans"
        }, 
        {
            "trigger": "Boolean CSmMode.UsePvPCollisions", 
            "contents": "UsePvPCollisions"
        }, 
        {
            "trigger": "Boolean CSmMode.UsePvPWeapons", 
            "contents": "UsePvPWeapons"
        }, 
        {
            "trigger": "Boolean CSmMode.UseInterractiveScreensIn3d", 
            "contents": "UseInterractiveScreensIn3d"
        }, 
        {
            "trigger": "Boolean CSmMode.UseLaserVsBullets", 
            "contents": "UseLaserVsBullets"
        }, 
        {
            "trigger": "Boolean CSmMode.UseLaserSkewering", 
            "contents": "UseLaserSkewering"
        }, 
        {
            "trigger": "Boolean CSmMode.UsePlayerTagging", 
            "contents": "UsePlayerTagging"
        }, 
        {
            "trigger": "Boolean CSmMode.UseBeaconsWithRecipients", 
            "contents": "UseBeaconsWithRecipients"
        }, 
        {
            "trigger": "Boolean CSmMode.UseAmmoBonusOnHit", 
            "contents": "UseAmmoBonusOnHit"
        }, 
        {
            "trigger": "Boolean CSmMode.UseSameWallJump", 
            "contents": "UseSameWallJump"
        }, 
        {
            "trigger": "Boolean CSmMode.UseDefaultActionEvents", 
            "contents": "UseDefaultActionEvents"
        }, 
        {
            "trigger": "Boolean CSmMode.UseAllies", 
            "contents": "UseAllies"
        }, 
        {
            "trigger": "Boolean CSmMode.UseAutoSpawnBots", 
            "contents": "UseAutoSpawnBots"
        }, 
        {
            "trigger": "Boolean CSmMode.ForceNavMapsComputation", 
            "contents": "ForceNavMapsComputation"
        }, 
        {
            "trigger": "Integer CSmMode.GameplayVersion", 
            "contents": "GameplayVersion"
        }, 
        {
            "trigger": "EGameplay CSmMode.Gameplay", 
            "contents": "Gameplay"
        }, 
        {
            "trigger": "Boolean CSmMode.UseProtectClanmates", 
            "contents": "UseProtectClanmates"
        }, 
        {
            "trigger": "Real CSmMode.OffZoneRadius", 
            "contents": "OffZoneRadius"
        }, 
        {
            "trigger": "Real CSmMode.OffZoneRadiusSpeed", 
            "contents": "OffZoneRadiusSpeed"
        }, 
        {
            "trigger": "Ident CSmMode.OffZoneCenterLandmarkId", 
            "contents": "OffZoneCenterLandmarkId"
        }, 
        {
            "trigger": "Integer CSmMode.PlayersNbTotal", 
            "contents": "PlayersNbTotal"
        }, 
        {
            "trigger": "Integer CSmMode.PlayersNbAlive", 
            "contents": "PlayersNbAlive"
        }, 
        {
            "trigger": "Integer CSmMode.PlayersNbDead", 
            "contents": "PlayersNbDead"
        }, 
        {
            "trigger": "Integer CSmMode.ClansNbTotal", 
            "contents": "ClansNbTotal"
        }, 
        {
            "trigger": "Integer CSmMode.ClansNbAlive", 
            "contents": "ClansNbAlive"
        }, 
        {
            "trigger": "Integer CSmMode.ClansNbDead", 
            "contents": "ClansNbDead"
        }, 
        {
            "trigger": "Void CSmMode.PassOn(CSmModeEvent Event)", 
            "contents": "PassOn(${1:CSmModeEvent Event})"
        }, 
        {
            "trigger": "Void CSmMode.Discard(CSmModeEvent Event)", 
            "contents": "Discard(${1:CSmModeEvent Event})"
        }, 
        {
            "trigger": "Void CSmMode.SpawnPlayer(CSmPlayer Player, Integer ClanNum, Integer Armor, CSmMapPlayerSpawn PlayerSpawn, Integer ActivationDate)", 
            "contents": "SpawnPlayer(${1:CSmPlayer Player}, ${2:Integer ClanNum}, ${3:Integer Armor}, ${4:CSmMapPlayerSpawn PlayerSpawn}, ${5:Integer ActivationDate})"
        }, 
        {
            "trigger": "Void CSmMode.SpawnBotPlayer(CSmPlayer Player, Integer ClanNum, Integer Armor, CSmMapPlayerSpawn PlayerSpawn, Integer ActivationDate)", 
            "contents": "SpawnBotPlayer(${1:CSmPlayer Player}, ${2:Integer ClanNum}, ${3:Integer Armor}, ${4:CSmMapPlayerSpawn PlayerSpawn}, ${5:Integer ActivationDate})"
        }, 
        {
            "trigger": "Void CSmMode.SpawnBotPlayer(CSmPlayer Player, Integer ClanNum, Integer Armor, CSmMapBotPath BotPath, Integer ActivationDate)", 
            "contents": "SpawnBotPlayer(${1:CSmPlayer Player}, ${2:Integer ClanNum}, ${3:Integer Armor}, ${4:CSmMapBotPath BotPath}, ${5:Integer ActivationDate})"
        }, 
        {
            "trigger": "Void CSmMode.UnspawnPlayer(CSmPlayer Player)", 
            "contents": "UnspawnPlayer(${1:CSmPlayer Player})"
        }, 
        {
            "trigger": "Void CSmMode.ClearScores()", 
            "contents": "ClearScores()"
        }, 
        {
            "trigger": "Void CSmMode.SetPlayerClan(CSmPlayer Player, Integer ClanNum)", 
            "contents": "SetPlayerClan(${1:CSmPlayer Player}, ${2:Integer ClanNum})"
        }, 
        {
            "trigger": "Void CSmMode.SetPlayerWeapon(CSmPlayer Player, EWeapon DefaultWeapon, Boolean AutoSwitchWeapon)", 
            "contents": "SetPlayerWeapon(${1:CSmPlayer Player}, ${2:EWeapon DefaultWeapon}, ${3:Boolean AutoSwitchWeapon})"
        }, 
        {
            "trigger": "Void CSmMode.SetPlayerReloadAllWeapons(CSmPlayer Player, Boolean ReloadAllWeapons)", 
            "contents": "SetPlayerReloadAllWeapons(${1:CSmPlayer Player}, ${2:Boolean ReloadAllWeapons})"
        }, 
        {
            "trigger": "Void CSmMode.SetPlayerAmmo(CSmPlayer Player, EWeapon Weapon, Integer Count)", 
            "contents": "SetPlayerAmmo(${1:CSmPlayer Player}, ${2:EWeapon Weapon}, ${3:Integer Count})"
        }, 
        {
            "trigger": "Integer CSmMode.GetPlayerAmmo(CSmPlayer Player, EWeapon Weapon)", 
            "contents": "GetPlayerAmmo(${1:CSmPlayer Player}, ${2:EWeapon Weapon})"
        }, 
        {
            "trigger": "Void CSmMode.AddPlayerAmmo(CSmPlayer Player, EWeapon Weapon, Real DeltaCount)", 
            "contents": "AddPlayerAmmo(${1:CSmPlayer Player}, ${2:EWeapon Weapon}, ${3:Real DeltaCount})"
        }, 
        {
            "trigger": "Void CSmMode.SetPlayerAmmoMax(CSmPlayer Player, EWeapon Weapon, Integer Count)", 
            "contents": "SetPlayerAmmoMax(${1:CSmPlayer Player}, ${2:EWeapon Weapon}, ${3:Integer Count})"
        }, 
        {
            "trigger": "Integer CSmMode.GetPlayerAmmoMax(CSmPlayer Player, EWeapon Weapon)", 
            "contents": "GetPlayerAmmoMax(${1:CSmPlayer Player}, ${2:EWeapon Weapon})"
        }, 
        {
            "trigger": "Void CSmMode.AddPlayerArmor(CSmPlayer Victim, Integer DeltaArmor, CSmPlayer Shooter, Integer ShooterPoints)", 
            "contents": "AddPlayerArmor(${1:CSmPlayer Victim}, ${2:Integer DeltaArmor}, ${3:CSmPlayer Shooter}, ${4:Integer ShooterPoints})"
        }, 
        {
            "trigger": "Void CSmMode.RemovePlayerArmor(CSmPlayer Victim, Integer DeltaArmor, CSmPlayer Shooter, Integer ShooterPoints)", 
            "contents": "RemovePlayerArmor(${1:CSmPlayer Victim}, ${2:Integer DeltaArmor}, ${3:CSmPlayer Shooter}, ${4:Integer ShooterPoints})"
        }, 
        {
            "trigger": "Integer CSmMode.GetWeaponNum(EWeapon Weapon)", 
            "contents": "GetWeaponNum(${1:EWeapon Weapon})"
        }, 
        {
            "trigger": "Boolean CSmMode.CanRespawnPlayer(CSmPlayer Player)", 
            "contents": "CanRespawnPlayer(${1:CSmPlayer Player})"
        }, 
        {
            "trigger": "Void CSmMode.RespawnPlayer(CSmPlayer Player)", 
            "contents": "RespawnPlayer(${1:CSmPlayer Player})"
        }, 
        {
            "trigger": "Void CSmMode.RespawnPlayer(CSmPlayer Player, CSmMapLandmark CheckpointLandmark)", 
            "contents": "RespawnPlayer(${1:CSmPlayer Player}, ${2:CSmMapLandmark CheckpointLandmark})"
        }, 
        {
            "trigger": "CSmPlayer CSmMode.CreateBotPlayer(Ident ModelId, Integer TeamNum)", 
            "contents": "CreateBotPlayer(${1:Ident ModelId}, ${2:Integer TeamNum})"
        }, 
        {
            "trigger": "Void CSmMode.DestroyBotPlayer(CSmPlayer BotPlayer)", 
            "contents": "DestroyBotPlayer(${1:CSmPlayer BotPlayer})"
        }, 
        {
            "trigger": "Void CSmMode.DestroyAllBotPlayers()", 
            "contents": "DestroyAllBotPlayers()"
        }, 
        {
            "trigger": "Void CSmMode.ScriptedBot_Move(CSmPlayer BotPlayer, Vec3 Goal)", 
            "contents": "ScriptedBot_Move(${1:CSmPlayer BotPlayer}, ${2:Vec3 Goal})"
        }, 
        {
            "trigger": "Void CSmMode.ScriptedBot_MoveDelta(CSmPlayer BotPlayer, Vec3 Delta)", 
            "contents": "ScriptedBot_MoveDelta(${1:CSmPlayer BotPlayer}, ${2:Vec3 Delta})"
        }, 
        {
            "trigger": "Void CSmMode.ScriptedBot_MoveAndAim(CSmPlayer BotPlayer, Vec3 Goal)", 
            "contents": "ScriptedBot_MoveAndAim(${1:CSmPlayer BotPlayer}, ${2:Vec3 Goal})"
        }, 
        {
            "trigger": "Void CSmMode.ScriptedBot_MoveDeltaAndAim(CSmPlayer BotPlayer, Vec3 Delta)", 
            "contents": "ScriptedBot_MoveDeltaAndAim(${1:CSmPlayer BotPlayer}, ${2:Vec3 Delta})"
        }, 
        {
            "trigger": "Void CSmMode.ScriptedBot_Aim(CSmPlayer BotPlayer, Vec3 Goal)", 
            "contents": "ScriptedBot_Aim(${1:CSmPlayer BotPlayer}, ${2:Vec3 Goal})"
        }, 
        {
            "trigger": "Void CSmMode.ScriptedBot_AimDelta(CSmPlayer BotPlayer, Real DeltaYaw, Real DeltaPitch)", 
            "contents": "ScriptedBot_AimDelta(${1:CSmPlayer BotPlayer}, ${2:Real DeltaYaw}, ${3:Real DeltaPitch})"
        }, 
        {
            "trigger": "Void CSmMode.ScriptedBot_RequestAction(CSmPlayer BotPlayer)", 
            "contents": "ScriptedBot_RequestAction(${1:CSmPlayer BotPlayer})"
        }, 
        {
            "trigger": "Void CSmMode.ScriptedBot_RequestGunTrigger(CSmPlayer BotPlayer)", 
            "contents": "ScriptedBot_RequestGunTrigger(${1:CSmPlayer BotPlayer})"
        }, 
        {
            "trigger": "Void CSmMode.ActionLoad(CSmPlayer Player, EActionSlot ActionSlot, Ident ModelId)", 
            "contents": "ActionLoad(${1:CSmPlayer Player}, ${2:EActionSlot ActionSlot}, ${3:Ident ModelId})"
        }, 
        {
            "trigger": "Void CSmMode.ActionBind(CSmPlayer Player, EActionSlot ActionSlot, EActionInput ActionInput)", 
            "contents": "ActionBind(${1:CSmPlayer Player}, ${2:EActionSlot ActionSlot}, ${3:EActionInput ActionInput})"
        }, 
        {
            "trigger": "Void CSmMode.ActionSetVariant(CSmPlayer Player, EActionSlot ActionSlot, Integer ActionVariant)", 
            "contents": "ActionSetVariant(${1:CSmPlayer Player}, ${2:EActionSlot ActionSlot}, ${3:Integer ActionVariant})"
        }, 
        {
            "trigger": "Void CSmMode.SetNbFakePlayers(Integer NbClan1, Integer NbClan2)", 
            "contents": "SetNbFakePlayers(${1:Integer NbClan1}, ${2:Integer NbClan2})"
        }, 
        {
            "trigger": "CSmObject CSmMode.ObjectCreate(Ident ModelId)", 
            "contents": "ObjectCreate(${1:Ident ModelId})"
        }, 
        {
            "trigger": "Void CSmMode.ObjectDestroy(CSmObject Object)", 
            "contents": "ObjectDestroy(${1:CSmObject Object})"
        }, 
        {
            "trigger": "Void CSmMode.ObjectDestroyAll()", 
            "contents": "ObjectDestroyAll()"
        }, 
        {
            "trigger": "Void CSmMode.Replay_SaveAttackScore(CSmPlayer Player, Integer Score)", 
            "contents": "Replay_SaveAttackScore(${1:CSmPlayer Player}, ${2:Integer Score})"
        }, 
        {
            "trigger": "Void CSmMode.Replay_SaveDefenseScore(CSmPlayer Player, Integer Score)", 
            "contents": "Replay_SaveDefenseScore(${1:CSmPlayer Player}, ${2:Integer Score})"
        }, 
        {
            "trigger": "Void CSmMode.Replay_SaveTeamScore(Integer Team, Integer Score)", 
            "contents": "Replay_SaveTeamScore(${1:Integer Team}, ${2:Integer Score})"
        }, 
        {
            "trigger": "Void CSmMode.Replay_SavePlayerOfInterest(CSmPlayer Player)", 
            "contents": "Replay_SavePlayerOfInterest(${1:CSmPlayer Player})"
        }, 
        {
            "trigger": "Void CSmMode.Replay_SaveWinner(CSmPlayer Player)", 
            "contents": "Replay_SaveWinner(${1:CSmPlayer Player})"
        }, 
        {
            "trigger": "Void CSmMode.Replay_SaveInterface()", 
            "contents": "Replay_SaveInterface()"
        }, 
        {
            "trigger": "CSmMlScriptIngame", 
            "contents": "CSmMlScriptIngame"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETmScoreSortOrder::TotalPoints", 
            "contents": "CSmMlScriptIngame::ETmScoreSortOrder::TotalPoints"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETmScoreSortOrder::BestRace_Time", 
            "contents": "CSmMlScriptIngame::ETmScoreSortOrder::BestRace_Time"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETmScoreSortOrder::BestRace_Stunts", 
            "contents": "CSmMlScriptIngame::ETmScoreSortOrder::BestRace_Stunts"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETmScoreSortOrder::BestRace_NbRespawns", 
            "contents": "CSmMlScriptIngame::ETmScoreSortOrder::BestRace_NbRespawns"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETmScoreSortOrder::BestRace_CheckpointsProgress", 
            "contents": "CSmMlScriptIngame::ETmScoreSortOrder::BestRace_CheckpointsProgress"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETmScoreSortOrder::PrevRace_Time", 
            "contents": "CSmMlScriptIngame::ETmScoreSortOrder::PrevRace_Time"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETmScoreSortOrder::Name", 
            "contents": "CSmMlScriptIngame::ETmScoreSortOrder::Name"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETmScoreSortOrder::LadderRankSortValue", 
            "contents": "CSmMlScriptIngame::ETmScoreSortOrder::LadderRankSortValue"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETMRespawnBehaviour::Normal", 
            "contents": "CSmMlScriptIngame::ETMRespawnBehaviour::Normal"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETMRespawnBehaviour::DoNothing", 
            "contents": "CSmMlScriptIngame::ETMRespawnBehaviour::DoNothing"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETMRespawnBehaviour::GiveUpBeforeFirstCheckPoint", 
            "contents": "CSmMlScriptIngame::ETMRespawnBehaviour::GiveUpBeforeFirstCheckPoint"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETMRespawnBehaviour::AlwaysGiveUp", 
            "contents": "CSmMlScriptIngame::ETMRespawnBehaviour::AlwaysGiveUp"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETmRaceChronoBehaviour::Auto", 
            "contents": "CSmMlScriptIngame::ETmRaceChronoBehaviour::Auto"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETmRaceChronoBehaviour::Hidden", 
            "contents": "CSmMlScriptIngame::ETmRaceChronoBehaviour::Hidden"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETmRaceChronoBehaviour::CountDown", 
            "contents": "CSmMlScriptIngame::ETmRaceChronoBehaviour::CountDown"
        }, 
        {
            "trigger": "CSmMlScriptIngame::ETmRaceChronoBehaviour::Normal", 
            "contents": "CSmMlScriptIngame::ETmRaceChronoBehaviour::Normal"
        }, 
        {
            "trigger": "CSmMlScriptIngame::EPersonalGhost::Disabled", 
            "contents": "CSmMlScriptIngame::EPersonalGhost::Disabled"
        }, 
        {
            "trigger": "CSmMlScriptIngame::EPersonalGhost::Latest", 
            "contents": "CSmMlScriptIngame::EPersonalGhost::Latest"
        }, 
        {
            "trigger": "CSmMlScriptIngame::EPersonalGhost::FastestRace", 
            "contents": "CSmMlScriptIngame::EPersonalGhost::FastestRace"
        }, 
        {
            "trigger": "Integer CSmMlScriptIngame.Clan1Score", 
            "contents": "Clan1Score"
        }, 
        {
            "trigger": "Integer CSmMlScriptIngame.Clan2Score", 
            "contents": "Clan2Score"
        }, 
        {
            "trigger": "Integer CSmMlScriptIngame.ClansNbTotal", 
            "contents": "ClansNbTotal"
        }, 
        {
            "trigger": "Void CSmMlScriptIngame.PassOn(CTmModeEvent Event)", 
            "contents": "PassOn(${1:CTmModeEvent Event})"
        }, 
        {
            "trigger": "Void CSmMlScriptIngame.Discard(CTmModeEvent Event)", 
            "contents": "Discard(${1:CTmModeEvent Event})"
        }, 
        {
            "trigger": "Void CSmMlScriptIngame.SpawnPlayer(CTmPlayer Player, Integer ClanNum, Integer RaceStartTime)", 
            "contents": "SpawnPlayer(${1:CTmPlayer Player}, ${2:Integer ClanNum}, ${3:Integer RaceStartTime})"
        }, 
        {
            "trigger": "Void CSmMlScriptIngame.UnspawnPlayer(CTmPlayer Player)", 
            "contents": "UnspawnPlayer(${1:CTmPlayer Player})"
        }, 
        {
            "trigger": "Void CSmMlScriptIngame.SetPlayerClan(CTmPlayer Player, Integer ClanNum)", 
            "contents": "SetPlayerClan(${1:CTmPlayer Player}, ${2:Integer ClanNum})"
        }, 
        {
            "trigger": "Void CSmMlScriptIngame.Scores_Sort(ETmScoreSortOrder SortOrder)", 
            "contents": "Scores_Sort(${1:ETmScoreSortOrder SortOrder})"
        }, 
        {
            "trigger": "Void CSmMlScriptIngame.Scores_Clear()", 
            "contents": "Scores_Clear()"
        }, 
        {
            "trigger": "Void CSmMlScriptIngame.Ladder_ComputeRank(ETmScoreSortOrder SortOrder)", 
            "contents": "Ladder_ComputeRank(${1:ETmScoreSortOrder SortOrder})"
        }, 
        {
            "trigger": "Integer CSmMlScriptIngame.CutOffTimeLimit", 
            "contents": "CutOffTimeLimit"
        }, 
        {
            "trigger": "Integer CSmMlScriptIngame.NbLaps", 
            "contents": "NbLaps"
        }, 
        {
            "trigger": "Boolean CSmMlScriptIngame.IndependantLaps", 
            "contents": "IndependantLaps"
        }, 
        {
            "trigger": "Boolean CSmMlScriptIngame.UseClans", 
            "contents": "UseClans"
        }, 
        {
            "trigger": "Boolean CSmMlScriptIngame.UseForcedClans", 
            "contents": "UseForcedClans"
        }, 
        {
            "trigger": "ETMRespawnBehaviour CSmMlScriptIngame.RespawnBehaviour", 
            "contents": "RespawnBehaviour"
        }, 
        {
            "trigger": "Boolean CSmMlScriptIngame.UiRounds", 
            "contents": "UiRounds"
        }, 
        {
            "trigger": "Boolean CSmMlScriptIngame.UiLaps", 
            "contents": "UiLaps"
        }, 
        {
            "trigger": "Boolean CSmMlScriptIngame.UiStuntsMode", 
            "contents": "UiStuntsMode"
        }, 
        {
            "trigger": "Boolean CSmMlScriptIngame.UiDisplayStuntsNames", 
            "contents": "UiDisplayStuntsNames"
        }, 
        {
            "trigger": "Boolean CSmMlScriptIngame.UiDisableHelpMessage", 
            "contents": "UiDisableHelpMessage"
        }, 
        {
            "trigger": "Integer CSmMlScriptIngame.UiScoresPointsLimit", 
            "contents": "UiScoresPointsLimit"
        }, 
        {
            "trigger": "ETmRaceChronoBehaviour CSmMlScriptIngame.UiRaceChrono", 
            "contents": "UiRaceChrono"
        }, 
        {
            "trigger": "Boolean CSmMlScriptIngame.HideOpponents", 
            "contents": "HideOpponents"
        }, 
        {
            "trigger": "Integer CSmMlScriptIngame.ForceMaxOpponents", 
            "contents": "ForceMaxOpponents"
        }, 
        {
            "trigger": "Boolean CSmMlScriptIngame.EnableLegacyXmlRpcCallbacks", 
            "contents": "EnableLegacyXmlRpcCallbacks"
        }, 
        {
            "trigger": "Boolean CSmMlScriptIngame.MedalGhost_ShowGold", 
            "contents": "MedalGhost_ShowGold"
        }, 
        {
            "trigger": "Boolean CSmMlScriptIngame.MedalGhost_ShowSilver", 
            "contents": "MedalGhost_ShowSilver"
        }, 
        {
            "trigger": "Boolean CSmMlScriptIngame.MedalGhost_ShowBronze", 
            "contents": "MedalGhost_ShowBronze"
        }, 
        {
            "trigger": "EPersonalGhost CSmMlScriptIngame.PersonalGhost", 
            "contents": "PersonalGhost"
        }, 
        {
            "trigger": "Vec3 CSmMlScriptIngame.MapStartLinePos", 
            "contents": "MapStartLinePos"
        }, 
        {
            "trigger": "Boolean CSmMlScriptIngame.MapIsLapRace", 
            "contents": "MapIsLapRace"
        }, 
        {
            "trigger": "Integer CSmMlScriptIngame.MapNbLaps", 
            "contents": "MapNbLaps"
        }, 
        {
            "trigger": "CTmMapType", 
            "contents": "CTmMapType"
        }, 
        {
            "trigger": "CTmMapType::EEchelon::None", 
            "contents": "CTmMapType::EEchelon::None"
        }, 
        {
            "trigger": "CTmMapType::EEchelon::Bronze1", 
            "contents": "CTmMapType::EEchelon::Bronze1"
        }, 
        {
            "trigger": "CTmMapType::EEchelon::Bronze2", 
            "contents": "CTmMapType::EEchelon::Bronze2"
        }, 
        {
            "trigger": "CTmMapType::EEchelon::Bronze3", 
            "contents": "CTmMapType::EEchelon::Bronze3"
        }, 
        {
            "trigger": "CTmMapType::EEchelon::Silver1", 
            "contents": "CTmMapType::EEchelon::Silver1"
        }, 
        {
            "trigger": "CTmMapType::EEchelon::Silver2", 
            "contents": "CTmMapType::EEchelon::Silver2"
        }, 
        {
            "trigger": "CTmMapType::EEchelon::Silver3", 
            "contents": "CTmMapType::EEchelon::Silver3"
        }, 
        {
            "trigger": "CTmMapType::EEchelon::Gold1", 
            "contents": "CTmMapType::EEchelon::Gold1"
        }, 
        {
            "trigger": "CTmMapType::EEchelon::Gold2", 
            "contents": "CTmMapType::EEchelon::Gold2"
        }, 
        {
            "trigger": "CTmMapType::EEchelon::Gold3", 
            "contents": "CTmMapType::EEchelon::Gold3"
        }, 
        {
            "trigger": "CTmMapType::ETagType::Bronze", 
            "contents": "CTmMapType::ETagType::Bronze"
        }, 
        {
            "trigger": "CTmMapType::ETagType::Silver", 
            "contents": "CTmMapType::ETagType::Silver"
        }, 
        {
            "trigger": "CTmMapType::ETagType::Gold", 
            "contents": "CTmMapType::ETagType::Gold"
        }, 
        {
            "trigger": "CTmMapType::ETagType::Nadeo", 
            "contents": "CTmMapType::ETagType::Nadeo"
        }, 
        {
            "trigger": "CTmMapType::EStereoDisplayMode::None", 
            "contents": "CTmMapType::EStereoDisplayMode::None"
        }, 
        {
            "trigger": "CTmMapType::EStereoDisplayMode::Stereo", 
            "contents": "CTmMapType::EStereoDisplayMode::Stereo"
        }, 
        {
            "trigger": "CTmMapType::EStereoDisplayMode::HMD", 
            "contents": "CTmMapType::EStereoDisplayMode::HMD"
        }, 
        {
            "trigger": "Text CTmMapType.Login", 
            "contents": "Login"
        }, 
        {
            "trigger": "Text CTmMapType.Name", 
            "contents": "Name"
        }, 
        {
            "trigger": "Text CTmMapType.AvatarUrl", 
            "contents": "AvatarUrl"
        }, 
        {
            "trigger": "Text CTmMapType.ZonePath", 
            "contents": "ZonePath"
        }, 
        {
            "trigger": "Text CTmMapType.ZoneFlagUrl", 
            "contents": "ZoneFlagUrl"
        }, 
        {
            "trigger": "Text CTmMapType.CountryFlagUrl", 
            "contents": "CountryFlagUrl"
        }, 
        {
            "trigger": "Text CTmMapType.Language", 
            "contents": "Language"
        }, 
        {
            "trigger": "Text CTmMapType.Description", 
            "contents": "Description"
        }, 
        {
            "trigger": "Vec3 CTmMapType.Color", 
            "contents": "Color"
        }, 
        {
            "trigger": "Text CTmMapType.ClubLink", 
            "contents": "ClubLink"
        }, 
        {
            "trigger": "Text CTmMapType.BroadcastTVLogin", 
            "contents": "BroadcastTVLogin"
        }, 
        {
            "trigger": "Text CTmMapType.SteamUserId", 
            "contents": "SteamUserId"
        }, 
        {
            "trigger": "Integer CTmMapType.FameStars", 
            "contents": "FameStars"
        }, 
        {
            "trigger": "EEchelon CTmMapType.Echelon", 
            "contents": "Echelon"
        }, 
        {
            "trigger": "Boolean CTmMapType.IsBeginner", 
            "contents": "IsBeginner"
        }, 
        {
            "trigger": "Integer CTmMapType.LadderRank", 
            "contents": "LadderRank"
        }, 
        {
            "trigger": "Integer CTmMapType.LadderTotal", 
            "contents": "LadderTotal"
        }, 
        {
            "trigger": "Real CTmMapType.LadderPoints", 
            "contents": "LadderPoints"
        }, 
        {
            "trigger": "Text CTmMapType.LadderZoneName", 
            "contents": "LadderZoneName"
        }, 
        {
            "trigger": "Text CTmMapType.LadderZoneFlagUrl", 
            "contents": "LadderZoneFlagUrl"
        }, 
        {
            "trigger": "Integer CTmMapType.RequestedClan", 
            "contents": "RequestedClan"
        }, 
        {
            "trigger": "Boolean CTmMapType.RequestsSpectate", 
            "contents": "RequestsSpectate"
        }, 
        {
            "trigger": "Boolean CTmMapType.IsFakeUser", 
            "contents": "IsFakeUser"
        }, 
        {
            "trigger": "EStereoDisplayMode CTmMapType.StereoDisplayMode", 
            "contents": "StereoDisplayMode"
        }, 
        {
            "trigger": "CTitle", 
            "contents": "CTitle"
        }, 
        {
            "trigger": "CTitle::Type::KeyPress", 
            "contents": "CTitle::Type::KeyPress"
        }, 
        {
            "trigger": "CTitle::Type::MouseClick", 
            "contents": "CTitle::Type::MouseClick"
        }, 
        {
            "trigger": "CTitle::Type::MouseOver", 
            "contents": "CTitle::Type::MouseOver"
        }, 
        {
            "trigger": "CTitle::Type::MouseOut", 
            "contents": "CTitle::Type::MouseOut"
        }, 
        {
            "trigger": "CTitle::Type::EntrySubmit", 
            "contents": "CTitle::Type::EntrySubmit"
        }, 
        {
            "trigger": "CTitle::Type::MenuNavigation", 
            "contents": "CTitle::Type::MenuNavigation"
        }, 
        {
            "trigger": "CTitle::Type::PluginCustomEvent", 
            "contents": "CTitle::Type::PluginCustomEvent"
        }, 
        {
            "trigger": "CTitle::EMenuNavAction::Up", 
            "contents": "CTitle::EMenuNavAction::Up"
        }, 
        {
            "trigger": "CTitle::EMenuNavAction::Right", 
            "contents": "CTitle::EMenuNavAction::Right"
        }, 
        {
            "trigger": "CTitle::EMenuNavAction::Left", 
            "contents": "CTitle::EMenuNavAction::Left"
        }, 
        {
            "trigger": "CTitle::EMenuNavAction::Down", 
            "contents": "CTitle::EMenuNavAction::Down"
        }, 
        {
            "trigger": "CTitle::EMenuNavAction::Select", 
            "contents": "CTitle::EMenuNavAction::Select"
        }, 
        {
            "trigger": "CTitle::EMenuNavAction::Cancel", 
            "contents": "CTitle::EMenuNavAction::Cancel"
        }, 
        {
            "trigger": "CTitle::EMenuNavAction::PageUp", 
            "contents": "CTitle::EMenuNavAction::PageUp"
        }, 
        {
            "trigger": "CTitle::EMenuNavAction::PageDown", 
            "contents": "CTitle::EMenuNavAction::PageDown"
        }, 
        {
            "trigger": "Type CTitle.Type", 
            "contents": "Type"
        }, 
        {
            "trigger": "Integer CTitle.KeyCode", 
            "contents": "KeyCode"
        }, 
        {
            "trigger": "Text CTitle.KeyName", 
            "contents": "KeyName"
        }, 
        {
            "trigger": "Text CTitle.CharPressed", 
            "contents": "CharPressed"
        }, 
        {
            "trigger": "Text CTitle.ControlId", 
            "contents": "ControlId"
        }, 
        {
            "trigger": "CMlControl CTitle.Control", 
            "contents": "Control"
        }, 
        {
            "trigger": "EMenuNavAction CTitle.MenuNavAction", 
            "contents": "MenuNavAction"
        }, 
        {
            "trigger": "Text CTitle.CustomEventType", 
            "contents": "CustomEventType"
        }, 
        {
            "trigger": "CXmlManager", 
            "contents": "CXmlManager"
        }, 
        {
            "trigger": "CXmlManager::ELibSound::Alert", 
            "contents": "CXmlManager::ELibSound::Alert"
        }, 
        {
            "trigger": "CXmlManager::ELibSound::ShowDialog", 
            "contents": "CXmlManager::ELibSound::ShowDialog"
        }, 
        {
            "trigger": "CXmlManager::ELibSound::HideDialog", 
            "contents": "CXmlManager::ELibSound::HideDialog"
        }, 
        {
            "trigger": "CXmlManager::ELibSound::ShowMenu", 
            "contents": "CXmlManager::ELibSound::ShowMenu"
        }, 
        {
            "trigger": "CXmlManager::ELibSound::HideMenu", 
            "contents": "CXmlManager::ELibSound::HideMenu"
        }, 
        {
            "trigger": "CXmlManager::ELibSound::Focus", 
            "contents": "CXmlManager::ELibSound::Focus"
        }, 
        {
            "trigger": "CXmlManager::ELibSound::Valid", 
            "contents": "CXmlManager::ELibSound::Valid"
        }, 
        {
            "trigger": "CXmlManager::ELibSound::Start", 
            "contents": "CXmlManager::ELibSound::Start"
        }, 
        {
            "trigger": "CXmlManager::ELibSound::Countdown", 
            "contents": "CXmlManager::ELibSound::Countdown"
        }, 
        {
            "trigger": "CXmlManager::ELibSound::Victory", 
            "contents": "CXmlManager::ELibSound::Victory"
        }, 
        {
            "trigger": "CXmlManager::ELibSound::ScoreIncrease", 
            "contents": "CXmlManager::ELibSound::ScoreIncrease"
        }, 
        {
            "trigger": "CXmlManager::ELibSound::Checkpoint", 
            "contents": "CXmlManager::ELibSound::Checkpoint"
        }, 
        {
            "trigger": "CAudioSound CXmlManager.CreateSound(Text Url)", 
            "contents": "CreateSound(${1:Text Url})"
        }, 
        {
            "trigger": "CAudioSound CXmlManager.CreateSound(Text Url, Real VolumedB, Boolean IsMusic, Boolean IsLooping, Boolean IsSpatialized)", 
            "contents": "CreateSound(${1:Text Url}, ${2:Real VolumedB}, ${3:Boolean IsMusic}, ${4:Boolean IsLooping}, ${5:Boolean IsSpatialized})"
        }, 
        {
            "trigger": "Void CXmlManager.DestroySound(CAudioSound Sound)", 
            "contents": "DestroySound(${1:CAudioSound Sound})"
        }, 
        {
            "trigger": "Void CXmlManager.PlaySoundEvent(CAudioSound Sound, Real VolumedB)", 
            "contents": "PlaySoundEvent(${1:CAudioSound Sound}, ${2:Real VolumedB})"
        }, 
        {
            "trigger": "Void CXmlManager.PlaySoundEvent(Text Url, Real VolumedB)", 
            "contents": "PlaySoundEvent(${1:Text Url}, ${2:Real VolumedB})"
        }, 
        {
            "trigger": "Void CXmlManager.PlaySoundEvent(ELibSound Sound, Integer SoundVariant, Real VolumedB)", 
            "contents": "PlaySoundEvent(${1:ELibSound Sound}, ${2:Integer SoundVariant}, ${3:Real VolumedB})"
        }, 
        {
            "trigger": "Void CXmlManager.PlaySoundEvent(CAudioSound Sound, Real VolumedB, Integer Delay)", 
            "contents": "PlaySoundEvent(${1:CAudioSound Sound}, ${2:Real VolumedB}, ${3:Integer Delay})"
        }, 
        {
            "trigger": "Void CXmlManager.PlaySoundEvent(Text Url, Real VolumedB, Integer Delay)", 
            "contents": "PlaySoundEvent(${1:Text Url}, ${2:Real VolumedB}, ${3:Integer Delay})"
        }, 
        {
            "trigger": "Void CXmlManager.PlaySoundEvent(ELibSound Sound, Integer SoundVariant, Real VolumedB, Integer Delay)", 
            "contents": "PlaySoundEvent(${1:ELibSound Sound}, ${2:Integer SoundVariant}, ${3:Real VolumedB}, ${4:Integer Delay})"
        }, 
        {
            "trigger": "Void CXmlManager.ClearAllDelayedSoundsEvents()", 
            "contents": "ClearAllDelayedSoundsEvents()"
        }, 
        {
            "trigger": "Boolean CXmlManager.ForceEnableMusic", 
            "contents": "ForceEnableMusic"
        }, 
        {
            "trigger": "Real CXmlManager.LimitMusicVolumedB", 
            "contents": "LimitMusicVolumedB"
        }, 
        {
            "trigger": "CMlControl", 
            "contents": "CMlControl"
        }, 
        {
            "trigger": "CMlControl::AlignHorizontal::Left", 
            "contents": "CMlControl::AlignHorizontal::Left"
        }, 
        {
            "trigger": "CMlControl::AlignHorizontal::HCenter", 
            "contents": "CMlControl::AlignHorizontal::HCenter"
        }, 
        {
            "trigger": "CMlControl::AlignHorizontal::Right", 
            "contents": "CMlControl::AlignHorizontal::Right"
        }, 
        {
            "trigger": "CMlControl::AlignHorizontal::None", 
            "contents": "CMlControl::AlignHorizontal::None"
        }, 
        {
            "trigger": "CMlControl::AlignVertical::Top", 
            "contents": "CMlControl::AlignVertical::Top"
        }, 
        {
            "trigger": "CMlControl::AlignVertical::VCenter", 
            "contents": "CMlControl::AlignVertical::VCenter"
        }, 
        {
            "trigger": "CMlControl::AlignVertical::Bottom", 
            "contents": "CMlControl::AlignVertical::Bottom"
        }, 
        {
            "trigger": "CMlControl::AlignVertical::None", 
            "contents": "CMlControl::AlignVertical::None"
        }, 
        {
            "trigger": "CMlControl::AlignVertical::VCenter2", 
            "contents": "CMlControl::AlignVertical::VCenter2"
        }, 
        {
            "trigger": "Text CMlControl.ControlId", 
            "contents": "ControlId"
        }, 
        {
            "trigger": "Boolean CMlControl.HasClass(Text Class)", 
            "contents": "HasClass(${1:Text Class})"
        }, 
        {
            "trigger": "Vec2 CMlControl.Size", 
            "contents": "Size"
        }, 
        {
            "trigger": "AlignHorizontal CMlControl.HorizontalAlign", 
            "contents": "HorizontalAlign"
        }, 
        {
            "trigger": "AlignVertical CMlControl.VerticalAlign", 
            "contents": "VerticalAlign"
        }, 
        {
            "trigger": "Boolean CMlControl.Visible", 
            "contents": "Visible"
        }, 
        {
            "trigger": "Vec3 CMlControl.RelativePosition", 
            "contents": "RelativePosition"
        }, 
        {
            "trigger": "Real CMlControl.RelativeScale", 
            "contents": "RelativeScale"
        }, 
        {
            "trigger": "Real CMlControl.RelativeRotation", 
            "contents": "RelativeRotation"
        }, 
        {
            "trigger": "Vec3 CMlControl.AbsolutePosition", 
            "contents": "AbsolutePosition"
        }, 
        {
            "trigger": "Real CMlControl.AbsoluteScale", 
            "contents": "AbsoluteScale"
        }, 
        {
            "trigger": "Real CMlControl.AbsoluteRotation", 
            "contents": "AbsoluteRotation"
        }, 
        {
            "trigger": "Boolean CMlControl.DataAttributeExists(Text DataName)", 
            "contents": "DataAttributeExists(${1:Text DataName})"
        }, 
        {
            "trigger": "Text CMlControl.DataAttributeGet(Text DataName)", 
            "contents": "DataAttributeGet(${1:Text DataName})"
        }, 
        {
            "trigger": "Void CMlControl.DataAttributeSet(Text DataName, Text DataValue)", 
            "contents": "DataAttributeSet(${1:Text DataName}, ${2:Text DataValue})"
        }, 
        {
            "trigger": "Void CMlControl.Show()", 
            "contents": "Show()"
        }, 
        {
            "trigger": "Void CMlControl.Hide()", 
            "contents": "Hide()"
        }, 
        {
            "trigger": "Void CMlControl.Unload()", 
            "contents": "Unload()"
        }, 
        {
            "trigger": "Void CMlControl.Focus()", 
            "contents": "Focus()"
        }, 
        {
            "trigger": "CMlGraphCurve", 
            "contents": "CMlGraphCurve"
        }, 
        {
            "trigger": "CMlGraphCurve::EUILayerType::Normal", 
            "contents": "CMlGraphCurve::EUILayerType::Normal"
        }, 
        {
            "trigger": "CMlGraphCurve::EUILayerType::ScoresTable", 
            "contents": "CMlGraphCurve::EUILayerType::ScoresTable"
        }, 
        {
            "trigger": "CMlGraphCurve::EUILayerType::ScreenIn3d", 
            "contents": "CMlGraphCurve::EUILayerType::ScreenIn3d"
        }, 
        {
            "trigger": "CMlGraphCurve::EUILayerType::AltMenu", 
            "contents": "CMlGraphCurve::EUILayerType::AltMenu"
        }, 
        {
            "trigger": "CMlGraphCurve::EUILayerType::Markers", 
            "contents": "CMlGraphCurve::EUILayerType::Markers"
        }, 
        {
            "trigger": "CMlGraphCurve::EUILayerType::CutScene", 
            "contents": "CMlGraphCurve::EUILayerType::CutScene"
        }, 
        {
            "trigger": "CMlGraphCurve::EUILayerType::InGameMenu", 
            "contents": "CMlGraphCurve::EUILayerType::InGameMenu"
        }, 
        {
            "trigger": "CMlGraphCurve::EUILayerType::EditorPlugin", 
            "contents": "CMlGraphCurve::EUILayerType::EditorPlugin"
        }, 
        {
            "trigger": "CMlGraphCurve::EUILayerType::ManiaplanetPlugin", 
            "contents": "CMlGraphCurve::EUILayerType::ManiaplanetPlugin"
        }, 
        {
            "trigger": "CMlGraphCurve::EUILayerType::ManiaplanetMenu", 
            "contents": "CMlGraphCurve::EUILayerType::ManiaplanetMenu"
        }, 
        {
            "trigger": "CMlGraphCurve::EUILayerType::LoadingScreen", 
            "contents": "CMlGraphCurve::EUILayerType::LoadingScreen"
        }, 
        {
            "trigger": "Boolean CMlGraphCurve.IsVisible", 
            "contents": "IsVisible"
        }, 
        {
            "trigger": "EUILayerType CMlGraphCurve.Type", 
            "contents": "Type"
        }, 
        {
            "trigger": "Text CMlGraphCurve.AttachId", 
            "contents": "AttachId"
        }, 
        {
            "trigger": "Text CMlGraphCurve.ManialinkPage", 
            "contents": "ManialinkPage"
        }, 
        {
            "trigger": "CMlPage CMlGraphCurve.LocalPage", 
            "contents": "LocalPage"
        }, 
        {
            "trigger": "CEditorPluginEvent", 
            "contents": "CEditorPluginEvent"
        }, 
        {
            "trigger": "CEditorPluginEvent::Type::LayerCustomEvent", 
            "contents": "CEditorPluginEvent::Type::LayerCustomEvent"
        }, 
        {
            "trigger": "CEditorPluginEvent::Type::KeyPress", 
            "contents": "CEditorPluginEvent::Type::KeyPress"
        }, 
        {
            "trigger": "CEditorPluginEvent::Type::(reserved)", 
            "contents": "CEditorPluginEvent::Type::(reserved)"
        }, 
        {
            "trigger": "CEditorPluginEvent::Type::MenuNavigation", 
            "contents": "CEditorPluginEvent::Type::MenuNavigation"
        }, 
        {
            "trigger": "CEditorPluginEvent::Type::CursorSelectionBegin", 
            "contents": "CEditorPluginEvent::Type::CursorSelectionBegin"
        }, 
        {
            "trigger": "CEditorPluginEvent::Type::CursorSelectionEnd", 
            "contents": "CEditorPluginEvent::Type::CursorSelectionEnd"
        }, 
        {
            "trigger": "CEditorPluginEvent::Type::CursorChange", 
            "contents": "CEditorPluginEvent::Type::CursorChange"
        }, 
        {
            "trigger": "CEditorPluginEvent::Type::MapModified", 
            "contents": "CEditorPluginEvent::Type::MapModified"
        }, 
        {
            "trigger": "CEditorPluginEvent::Type::EditorInput", 
            "contents": "CEditorPluginEvent::Type::EditorInput"
        }, 
        {
            "trigger": "CEditorPluginEvent::Type::EditAnchor", 
            "contents": "CEditorPluginEvent::Type::EditAnchor"
        }, 
        {
            "trigger": "CEditorPluginEvent::Type::EditObjectives", 
            "contents": "CEditorPluginEvent::Type::EditObjectives"
        }, 
        {
            "trigger": "CEditorPluginEvent::Type::StartValidation", 
            "contents": "CEditorPluginEvent::Type::StartValidation"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::Unknown", 
            "contents": "CEditorPluginEvent::EInput::Unknown"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::Menu", 
            "contents": "CEditorPluginEvent::EInput::Menu"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::SwitchToRace", 
            "contents": "CEditorPluginEvent::EInput::SwitchToRace"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::CursorUp", 
            "contents": "CEditorPluginEvent::EInput::CursorUp"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::CursorRight", 
            "contents": "CEditorPluginEvent::EInput::CursorRight"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::CursorDown", 
            "contents": "CEditorPluginEvent::EInput::CursorDown"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::CursorLeft", 
            "contents": "CEditorPluginEvent::EInput::CursorLeft"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::CursorRaise", 
            "contents": "CEditorPluginEvent::EInput::CursorRaise"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::CursorLower", 
            "contents": "CEditorPluginEvent::EInput::CursorLower"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::CursorTurn", 
            "contents": "CEditorPluginEvent::EInput::CursorTurn"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::CursorPick", 
            "contents": "CEditorPluginEvent::EInput::CursorPick"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::CursorPlace", 
            "contents": "CEditorPluginEvent::EInput::CursorPlace"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::CursorDelete", 
            "contents": "CEditorPluginEvent::EInput::CursorDelete"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::CameraUp", 
            "contents": "CEditorPluginEvent::EInput::CameraUp"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::CameraRight", 
            "contents": "CEditorPluginEvent::EInput::CameraRight"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::CameraDown", 
            "contents": "CEditorPluginEvent::EInput::CameraDown"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::CameraLeft", 
            "contents": "CEditorPluginEvent::EInput::CameraLeft"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::IconUp", 
            "contents": "CEditorPluginEvent::EInput::IconUp"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::IconRight", 
            "contents": "CEditorPluginEvent::EInput::IconRight"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::IconDown", 
            "contents": "CEditorPluginEvent::EInput::IconDown"
        }, 
        {
            "trigger": "CEditorPluginEvent::EInput::IconLeft", 
            "contents": "CEditorPluginEvent::EInput::IconLeft"
        }, 
        {
            "trigger": "Type CEditorPluginEvent.Type", 
            "contents": "Type"
        }, 
        {
            "trigger": "EInput CEditorPluginEvent.Input", 
            "contents": "Input"
        }, 
        {
            "trigger": "Ident CEditorPluginEvent.EditedAnchorDataId", 
            "contents": "EditedAnchorDataId"
        }, 
        {
            "trigger": "CBlockModel", 
            "contents": "CBlockModel"
        }, 
        {
            "trigger": "CBlockModel::EBaseType::None", 
            "contents": "CBlockModel::EBaseType::None"
        }, 
        {
            "trigger": "CBlockModel::EBaseType::Conductor", 
            "contents": "CBlockModel::EBaseType::Conductor"
        }, 
        {
            "trigger": "CBlockModel::EBaseType::Generator", 
            "contents": "CBlockModel::EBaseType::Generator"
        }, 
        {
            "trigger": "CBlockModel::EBaseType::Collector", 
            "contents": "CBlockModel::EBaseType::Collector"
        }, 
        {
            "trigger": "CBlockModel::EWayPointType::Start", 
            "contents": "CBlockModel::EWayPointType::Start"
        }, 
        {
            "trigger": "CBlockModel::EWayPointType::Finish", 
            "contents": "CBlockModel::EWayPointType::Finish"
        }, 
        {
            "trigger": "CBlockModel::EWayPointType::Checkpoint", 
            "contents": "CBlockModel::EWayPointType::Checkpoint"
        }, 
        {
            "trigger": "CBlockModel::EWayPointType::None", 
            "contents": "CBlockModel::EWayPointType::None"
        }, 
        {
            "trigger": "CBlockModel::EWayPointType::StartFinish", 
            "contents": "CBlockModel::EWayPointType::StartFinish"
        }, 
        {
            "trigger": "CBlockModel::EProdState::Obsolete", 
            "contents": "CBlockModel::EProdState::Obsolete"
        }, 
        {
            "trigger": "CBlockModel::EProdState::GameBox", 
            "contents": "CBlockModel::EProdState::GameBox"
        }, 
        {
            "trigger": "CBlockModel::EProdState::DevBuild", 
            "contents": "CBlockModel::EProdState::DevBuild"
        }, 
        {
            "trigger": "CBlockModel::EProdState::Release", 
            "contents": "CBlockModel::EProdState::Release"
        }, 
        {
            "trigger": "Text CBlockModel.Name", 
            "contents": "Name"
        }, 
        {
            "trigger": "Boolean CBlockModel.IsRoad", 
            "contents": "IsRoad"
        }, 
        {
            "trigger": "Boolean CBlockModel.IsTerrain", 
            "contents": "IsTerrain"
        }, 
        {
            "trigger": "EWayPointType CBlockModel.WaypointType", 
            "contents": "WaypointType"
        }, 
        {
            "trigger": "Boolean CBlockModel.NoRespawn", 
            "contents": "NoRespawn"
        }, 
        {
            "trigger": "CBlockModelVariantGround CBlockModel.VariantGround", 
            "contents": "VariantGround"
        }, 
        {
            "trigger": "CBlockModelVariantAir CBlockModel.VariantAir", 
            "contents": "VariantAir"
        }, 
        {
            "trigger": "CMacroblockModel", 
            "contents": "CMacroblockModel"
        }, 
        {
            "trigger": "CMacroblockModel::CardinalDirections::North", 
            "contents": "CMacroblockModel::CardinalDirections::North"
        }, 
        {
            "trigger": "CMacroblockModel::CardinalDirections::East", 
            "contents": "CMacroblockModel::CardinalDirections::East"
        }, 
        {
            "trigger": "CMacroblockModel::CardinalDirections::South", 
            "contents": "CMacroblockModel::CardinalDirections::South"
        }, 
        {
            "trigger": "CMacroblockModel::CardinalDirections::West", 
            "contents": "CMacroblockModel::CardinalDirections::West"
        }, 
        {
            "trigger": "Vec3 CMacroblockModel.Position", 
            "contents": "Position"
        }, 
        {
            "trigger": "CBlock", 
            "contents": "CBlock"
        }, 
        {
            "trigger": "CBlock::CardinalDirections::North", 
            "contents": "CBlock::CardinalDirections::North"
        }, 
        {
            "trigger": "CBlock::CardinalDirections::East", 
            "contents": "CBlock::CardinalDirections::East"
        }, 
        {
            "trigger": "CBlock::CardinalDirections::South", 
            "contents": "CBlock::CardinalDirections::South"
        }, 
        {
            "trigger": "CBlock::CardinalDirections::West", 
            "contents": "CBlock::CardinalDirections::West"
        }, 
        {
            "trigger": "Integer CBlock.BlockScriptId", 
            "contents": "BlockScriptId"
        }, 
        {
            "trigger": "Boolean CBlock.CanHaveAnchor", 
            "contents": "CanHaveAnchor"
        }, 
        {
            "trigger": "Void CBlock.UseDefaultAnchor()", 
            "contents": "UseDefaultAnchor()"
        }, 
        {
            "trigger": "Void CBlock.UseCustomAnchor()", 
            "contents": "UseCustomAnchor()"
        }, 
        {
            "trigger": "Int3 CBlock.Coord", 
            "contents": "Coord"
        }, 
        {
            "trigger": "CardinalDirections CBlock.Direction", 
            "contents": "Direction"
        }, 
        {
            "trigger": "CBlockModel CBlock.BlockModel", 
            "contents": "BlockModel"
        }, 
        {
            "trigger": "CAnchorData", 
            "contents": "CAnchorData"
        }, 
        {
            "trigger": "CAnchorData::EMedal::None", 
            "contents": "CAnchorData::EMedal::None"
        }, 
        {
            "trigger": "CAnchorData::EMedal::Finished", 
            "contents": "CAnchorData::EMedal::Finished"
        }, 
        {
            "trigger": "CAnchorData::EMedal::Bronze", 
            "contents": "CAnchorData::EMedal::Bronze"
        }, 
        {
            "trigger": "CAnchorData::EMedal::Silver", 
            "contents": "CAnchorData::EMedal::Silver"
        }, 
        {
            "trigger": "CAnchorData::EMedal::Gold", 
            "contents": "CAnchorData::EMedal::Gold"
        }, 
        {
            "trigger": "CAnchorData::EMedal::Author", 
            "contents": "CAnchorData::EMedal::Author"
        }, 
        {
            "trigger": "Text CAnchorData.ModeStatusMessage", 
            "contents": "ModeStatusMessage"
        }, 
        {
            "trigger": "CTitle CAnchorData.LoadedTitle", 
            "contents": "LoadedTitle"
        }, 
        {
            "trigger": "Text CAnchorData.ServerLogin", 
            "contents": "ServerLogin"
        }, 
        {
            "trigger": "Text CAnchorData.ServerName", 
            "contents": "ServerName"
        }, 
        {
            "trigger": "Text CAnchorData.ServerModeName", 
            "contents": "ServerModeName"
        }, 
        {
            "trigger": "Text CAnchorData.MapName", 
            "contents": "MapName"
        }, 
        {
            "trigger": "CMap CAnchorData.Map", 
            "contents": "Map"
        }, 
        {
            "trigger": "Text CAnchorData.MapPlayerModelName", 
            "contents": "MapPlayerModelName"
        }, 
        {
            "trigger": "Text CAnchorData.NeutralEmblemUrl", 
            "contents": "NeutralEmblemUrl"
        }, 
        {
            "trigger": "Text CAnchorData.ForcedClubLinkUrl1", 
            "contents": "ForcedClubLinkUrl1"
        }, 
        {
            "trigger": "Text CAnchorData.ForcedClubLinkUrl2", 
            "contents": "ForcedClubLinkUrl2"
        }, 
        {
            "trigger": "Void CAnchorData.TweakTeamColorsToAvoidHueOverlap()", 
            "contents": "TweakTeamColorsToAvoidHueOverlap()"
        }, 
        {
            "trigger": "Integer CAnchorData.Now", 
            "contents": "Now"
        }, 
        {
            "trigger": "Integer CAnchorData.Period", 
            "contents": "Period"
        }, 
        {
            "trigger": "Boolean CAnchorData.MatchEndRequested", 
            "contents": "MatchEndRequested"
        }, 
        {
            "trigger": "Boolean CAnchorData.ServerShutdownRequested", 
            "contents": "ServerShutdownRequested"
        }, 
        {
            "trigger": "Boolean CAnchorData.MapLoaded", 
            "contents": "MapLoaded"
        }, 
        {
            "trigger": "Void CAnchorData.RequestLoadMap()", 
            "contents": "RequestLoadMap()"
        }, 
        {
            "trigger": "Void CAnchorData.RequestUnloadMap()", 
            "contents": "RequestUnloadMap()"
        }, 
        {
            "trigger": "Integer CAnchorData.NextMapIndex", 
            "contents": "NextMapIndex"
        }, 
        {
            "trigger": "CUIConfigMgr CAnchorData.UIManager", 
            "contents": "UIManager"
        }, 
        {
            "trigger": "Void CAnchorData.Ladder_OpenMatch_Request()", 
            "contents": "Ladder_OpenMatch_Request()"
        }, 
        {
            "trigger": "Void CAnchorData.Ladder_AddPlayer(CScore PlayerScore)", 
            "contents": "Ladder_AddPlayer(${1:CScore PlayerScore})"
        }, 
        {
            "trigger": "Void CAnchorData.Ladder_OpenMatch_BeginRequest()", 
            "contents": "Ladder_OpenMatch_BeginRequest()"
        }, 
        {
            "trigger": "Void CAnchorData.Ladder_OpenMatch_AddPlayer(CScore PlayerScore)", 
            "contents": "Ladder_OpenMatch_AddPlayer(${1:CScore PlayerScore})"
        }, 
        {
            "trigger": "Void CAnchorData.Ladder_OpenMatch_EndRequest()", 
            "contents": "Ladder_OpenMatch_EndRequest()"
        }, 
        {
            "trigger": "Void CAnchorData.Ladder_CloseMatchRequest()", 
            "contents": "Ladder_CloseMatchRequest()"
        }, 
        {
            "trigger": "Void CAnchorData.Ladder_CancelMatchRequest()", 
            "contents": "Ladder_CancelMatchRequest()"
        }, 
        {
            "trigger": "Boolean CAnchorData.Ladder_RequestInProgress", 
            "contents": "Ladder_RequestInProgress"
        }, 
        {
            "trigger": "Void CAnchorData.Ladder_SetResultsVersion(Integer Version)", 
            "contents": "Ladder_SetResultsVersion(${1:Integer Version})"
        }, 
        {
            "trigger": "Void CAnchorData.Ladder_SetMatchMakingMatchId(Integer MatchId)", 
            "contents": "Ladder_SetMatchMakingMatchId(${1:Integer MatchId})"
        }, 
        {
            "trigger": "Void CAnchorData.Ladder_EnableChallengeMode(Boolean Enable)", 
            "contents": "Ladder_EnableChallengeMode(${1:Boolean Enable})"
        }, 
        {
            "trigger": "Boolean CAnchorData.Admin_KickUser(CUser User, Text Reason)", 
            "contents": "Admin_KickUser(${1:CUser User}, ${2:Text Reason})"
        }, 
        {
            "trigger": "Void CAnchorData.Admin_SetLobbyInfo(Boolean IsLobby, Integer LobbyPlayerCount, Integer LobbyMaxPlayerCount, Real LobbyPlayersLevel)", 
            "contents": "Admin_SetLobbyInfo(${1:Boolean IsLobby}, ${2:Integer LobbyPlayerCount}, ${3:Integer LobbyMaxPlayerCount}, ${4:Real LobbyPlayersLevel})"
        }, 
        {
            "trigger": "Void CAnchorData.AutoTeamBalance()", 
            "contents": "AutoTeamBalance()"
        }, 
        {
            "trigger": "Void CAnchorData.Solo_SetNewRecord(CScore PlayerScore, EMedal PlayerScore)", 
            "contents": "Solo_SetNewRecord(${1:CScore PlayerScore}, ${2:EMedal PlayerScore})"
        }, 
        {
            "trigger": "Boolean CAnchorData.Solo_NewRecordSequenceInProgress", 
            "contents": "Solo_NewRecordSequenceInProgress"
        }, 
        {
            "trigger": "CXmlRpc CAnchorData.XmlRpc", 
            "contents": "XmlRpc"
        }, 
        {
            "trigger": "CXmlManager CAnchorData.Xml", 
            "contents": "Xml"
        }, 
        {
            "trigger": "CHttpManager CAnchorData.Http", 
            "contents": "Http"
        }, 
        {
            "trigger": "Integer CAnchorData.Synchro_AddBarrier()", 
            "contents": "Synchro_AddBarrier()"
        }, 
        {
            "trigger": "Boolean CAnchorData.Synchro_BarrierReached(Integer Barrier)", 
            "contents": "Synchro_BarrierReached(${1:Integer Barrier})"
        }, 
        {
            "trigger": "Boolean CAnchorData.Users_AreAllies(CUser User1, CUser User2)", 
            "contents": "Users_AreAllies(${1:CUser User1}, ${2:CUser User2})"
        }, 
        {
            "trigger": "Void CAnchorData.Users_RequestSwitchToSpectator(CUser User)", 
            "contents": "Users_RequestSwitchToSpectator(${1:CUser User})"
        }, 
        {
            "trigger": "CUser CAnchorData.Users_CreateFake(Text NickName, Integer RequestedTeam)", 
            "contents": "Users_CreateFake(${1:Text NickName}, ${2:Integer RequestedTeam})"
        }, 
        {
            "trigger": "Void CAnchorData.Users_DestroyFake(CUser User)", 
            "contents": "Users_DestroyFake(${1:CUser User})"
        }, 
        {
            "trigger": "Void CAnchorData.Users_SetNbFakeUsers(Integer NbTeam1, Integer NbTeam2)", 
            "contents": "Users_SetNbFakeUsers(${1:Integer NbTeam1}, ${2:Integer NbTeam2})"
        }, 
        {
            "trigger": "Void CAnchorData.Users_DestroyAllFakes()", 
            "contents": "Users_DestroyAllFakes()"
        }, 
        {
            "trigger": "Void CAnchorData.ItemList_Begin()", 
            "contents": "ItemList_Begin()"
        }, 
        {
            "trigger": "Ident CAnchorData.ItemList_Add(Text ModelName)", 
            "contents": "ItemList_Add(${1:Text ModelName})"
        }, 
        {
            "trigger": "Ident CAnchorData.ItemList_AddWithSkin(Text ModelName, Text SkinName)", 
            "contents": "ItemList_AddWithSkin(${1:Text ModelName}, ${2:Text SkinName})"
        }, 
        {
            "trigger": "Void CAnchorData.ItemList_End()", 
            "contents": "ItemList_End()"
        }, 
        {
            "trigger": "Void CAnchorData.DemoToken_StartUsingToken()", 
            "contents": "DemoToken_StartUsingToken()"
        }, 
        {
            "trigger": "Void CAnchorData.DemoToken_StopUsingToken()", 
            "contents": "DemoToken_StopUsingToken()"
        }, 
        {
            "trigger": "Void CAnchorData.DemoToken_GetAndUseToken(CUser User)", 
            "contents": "DemoToken_GetAndUseToken(${1:CUser User})"
        }, 
        {
            "trigger": "Void CAnchorData.ActionList_Begin()", 
            "contents": "ActionList_Begin()"
        }, 
        {
            "trigger": "Ident CAnchorData.ActionList_Add(Text ActionName)", 
            "contents": "ActionList_Add(${1:Text ActionName})"
        }, 
        {
            "trigger": "Void CAnchorData.ActionList_End()", 
            "contents": "ActionList_End()"
        }, 
        {
            "trigger": "Boolean CAnchorData.UseMinimap", 
            "contents": "UseMinimap"
        }, 
        {
            "trigger": "Boolean CAnchorData.Replay_AutoStart", 
            "contents": "Replay_AutoStart"
        }, 
        {
            "trigger": "Void CAnchorData.Replay_Start()", 
            "contents": "Replay_Start()"
        }, 
        {
            "trigger": "Void CAnchorData.Replay_Stop()", 
            "contents": "Replay_Stop()"
        }, 
        {
            "trigger": "CSmPlayer", 
            "contents": "CSmPlayer"
        }, 
        {
            "trigger": "CSmPlayer::ESpawnStatus::NotSpawned", 
            "contents": "CSmPlayer::ESpawnStatus::NotSpawned"
        }, 
        {
            "trigger": "CSmPlayer::ESpawnStatus::Spawning", 
            "contents": "CSmPlayer::ESpawnStatus::Spawning"
        }, 
        {
            "trigger": "CSmPlayer::ESpawnStatus::Spawned", 
            "contents": "CSmPlayer::ESpawnStatus::Spawned"
        }, 
        {
            "trigger": "CSmScore CSmPlayer.Score", 
            "contents": "Score"
        }, 
        {
            "trigger": "ESpawnStatus CSmPlayer.SpawnStatus", 
            "contents": "SpawnStatus"
        }, 
        {
            "trigger": "Integer CSmPlayer.StartTime", 
            "contents": "StartTime"
        }, 
        {
            "trigger": "Integer CSmPlayer.EndTime", 
            "contents": "EndTime"
        }, 
        {
            "trigger": "Real CSmPlayer.AmmoGain", 
            "contents": "AmmoGain"
        }, 
        {
            "trigger": "Real CSmPlayer.AmmoPower", 
            "contents": "AmmoPower"
        }, 
        {
            "trigger": "Boolean CSmPlayer.AutoSwitchWeapon", 
            "contents": "AutoSwitchWeapon"
        }, 
        {
            "trigger": "Integer CSmPlayer.CurWeapon", 
            "contents": "CurWeapon"
        }, 
        {
            "trigger": "Integer CSmPlayer.CurAmmo", 
            "contents": "CurAmmo"
        }, 
        {
            "trigger": "Integer CSmPlayer.CurAmmoMax", 
            "contents": "CurAmmoMax"
        }, 
        {
            "trigger": "Integer CSmPlayer.CurAmmoUnit", 
            "contents": "CurAmmoUnit"
        }, 
        {
            "trigger": "Integer CSmPlayer.Armor", 
            "contents": "Armor"
        }, 
        {
            "trigger": "Integer CSmPlayer.ArmorMax", 
            "contents": "ArmorMax"
        }, 
        {
            "trigger": "Integer CSmPlayer.ArmorGain", 
            "contents": "ArmorGain"
        }, 
        {
            "trigger": "Integer CSmPlayer.ArmorReplenishGain", 
            "contents": "ArmorReplenishGain"
        }, 
        {
            "trigger": "Real CSmPlayer.ArmorPower", 
            "contents": "ArmorPower"
        }, 
        {
            "trigger": "Integer CSmPlayer.Stamina", 
            "contents": "Stamina"
        }, 
        {
            "trigger": "Real CSmPlayer.StaminaMax", 
            "contents": "StaminaMax"
        }, 
        {
            "trigger": "Real CSmPlayer.StaminaGain", 
            "contents": "StaminaGain"
        }, 
        {
            "trigger": "Real CSmPlayer.StaminaPower", 
            "contents": "StaminaPower"
        }, 
        {
            "trigger": "Real CSmPlayer.SpeedPower", 
            "contents": "SpeedPower"
        }, 
        {
            "trigger": "Real CSmPlayer.JumpPower", 
            "contents": "JumpPower"
        }, 
        {
            "trigger": "Boolean CSmPlayer.AllowWallJump", 
            "contents": "AllowWallJump"
        }, 
        {
            "trigger": "Boolean CSmPlayer.AllowProgressiveJump", 
            "contents": "AllowProgressiveJump"
        }, 
        {
            "trigger": "Boolean CSmPlayer.UseAlternateWeaponVisual", 
            "contents": "UseAlternateWeaponVisual"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsHighlighted", 
            "contents": "IsHighlighted"
        }, 
        {
            "trigger": "Real CSmPlayer.EnergyLevel", 
            "contents": "EnergyLevel"
        }, 
        {
            "trigger": "Vec3 CSmPlayer.ForceColor", 
            "contents": "ForceColor"
        }, 
        {
            "trigger": "Ident CSmPlayer.ForceModelId", 
            "contents": "ForceModelId"
        }, 
        {
            "trigger": "Boolean CSmPlayer.HasShield", 
            "contents": "HasShield"
        }, 
        {
            "trigger": "Real CSmPlayer.ThrowSpeed", 
            "contents": "ThrowSpeed"
        }, 
        {
            "trigger": "Integer CSmPlayer.CurrentClan", 
            "contents": "CurrentClan"
        }, 
        {
            "trigger": "Integer CSmPlayer.IdleDuration", 
            "contents": "IdleDuration"
        }, 
        {
            "trigger": "Vec3 CSmPlayer.Position", 
            "contents": "Position"
        }, 
        {
            "trigger": "Real CSmPlayer.AimYaw", 
            "contents": "AimYaw"
        }, 
        {
            "trigger": "Real CSmPlayer.AimPitch", 
            "contents": "AimPitch"
        }, 
        {
            "trigger": "Vec3 CSmPlayer.AimDirection", 
            "contents": "AimDirection"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsUnderground", 
            "contents": "IsUnderground"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsTouchingGround", 
            "contents": "IsTouchingGround"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsInAir", 
            "contents": "IsInAir"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsOnTechGround", 
            "contents": "IsOnTechGround"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsOnTechLaser", 
            "contents": "IsOnTechLaser"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsOnTechArrow", 
            "contents": "IsOnTechArrow"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsOnTechArmor", 
            "contents": "IsOnTechArmor"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsOnTechSafeZone", 
            "contents": "IsOnTechSafeZone"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsOnTech", 
            "contents": "IsOnTech"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsOnTechNoWeapon", 
            "contents": "IsOnTechNoWeapon"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsInWater", 
            "contents": "IsInWater"
        }, 
        {
            "trigger": "Vec3 CSmPlayer.Velocity", 
            "contents": "Velocity"
        }, 
        {
            "trigger": "Real CSmPlayer.Speed", 
            "contents": "Speed"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsInOffZone", 
            "contents": "IsInOffZone"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsCapturing", 
            "contents": "IsCapturing"
        }, 
        {
            "trigger": "CSmMapLandmark CSmPlayer.CapturedLandmark", 
            "contents": "CapturedLandmark"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsFakePlayer", 
            "contents": "IsFakePlayer"
        }, 
        {
            "trigger": "Boolean CSmPlayer.IsBot", 
            "contents": "IsBot"
        }, 
        {
            "trigger": "CSmPlayerDriver CSmPlayer.Driver", 
            "contents": "Driver"
        }, 
        {
            "trigger": "CSmModeEvent", 
            "contents": "CSmModeEvent"
        }, 
        {
            "trigger": "CSmModeEvent::EType::Unknown", 
            "contents": "CSmModeEvent::EType::Unknown"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnShoot", 
            "contents": "CSmModeEvent::EType::OnShoot"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnHit", 
            "contents": "CSmModeEvent::EType::OnHit"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnNearMiss", 
            "contents": "CSmModeEvent::EType::OnNearMiss"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnArmorEmpty", 
            "contents": "CSmModeEvent::EType::OnArmorEmpty"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnCapture", 
            "contents": "CSmModeEvent::EType::OnCapture"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnShotDeny", 
            "contents": "CSmModeEvent::EType::OnShotDeny"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnFallDamage", 
            "contents": "CSmModeEvent::EType::OnFallDamage"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnCommand", 
            "contents": "CSmModeEvent::EType::OnCommand"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnPlayerAdded", 
            "contents": "CSmModeEvent::EType::OnPlayerAdded"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnPlayerRemoved", 
            "contents": "CSmModeEvent::EType::OnPlayerRemoved"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnPlayerRequestRespawn", 
            "contents": "CSmModeEvent::EType::OnPlayerRequestRespawn"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnActionCustomEvent", 
            "contents": "CSmModeEvent::EType::OnActionCustomEvent"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnActionEvent", 
            "contents": "CSmModeEvent::EType::OnActionEvent"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnPlayerTouchesObject", 
            "contents": "CSmModeEvent::EType::OnPlayerTouchesObject"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnPlayerThrowsObject", 
            "contents": "CSmModeEvent::EType::OnPlayerThrowsObject"
        }, 
        {
            "trigger": "CSmModeEvent::EType::OnPlayerRequestActionChange", 
            "contents": "CSmModeEvent::EType::OnPlayerRequestActionChange"
        }, 
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_A", 
            "contents": "CSmModeEvent::EActionSlot::Slot_A"
        }, 
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_B", 
            "contents": "CSmModeEvent::EActionSlot::Slot_B"
        }, 
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_C", 
            "contents": "CSmModeEvent::EActionSlot::Slot_C"
        }, 
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_D", 
            "contents": "CSmModeEvent::EActionSlot::Slot_D"
        }, 
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_E", 
            "contents": "CSmModeEvent::EActionSlot::Slot_E"
        }, 
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_F", 
            "contents": "CSmModeEvent::EActionSlot::Slot_F"
        }, 
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_G", 
            "contents": "CSmModeEvent::EActionSlot::Slot_G"
        }, 
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_H", 
            "contents": "CSmModeEvent::EActionSlot::Slot_H"
        }, 
        {
            "trigger": "CSmModeEvent::EActionInput::Weapon", 
            "contents": "CSmModeEvent::EActionInput::Weapon"
        }, 
        {
            "trigger": "CSmModeEvent::EActionInput::Movement", 
            "contents": "CSmModeEvent::EActionInput::Movement"
        }, 
        {
            "trigger": "CSmModeEvent::EActionInput::Activable1", 
            "contents": "CSmModeEvent::EActionInput::Activable1"
        }, 
        {
            "trigger": "CSmModeEvent::EActionInput::Activable2", 
            "contents": "CSmModeEvent::EActionInput::Activable2"
        }, 
        {
            "trigger": "CSmModeEvent::EActionInput::Activable3", 
            "contents": "CSmModeEvent::EActionInput::Activable3"
        }, 
        {
            "trigger": "CSmModeEvent::EActionInput::Activable4", 
            "contents": "CSmModeEvent::EActionInput::Activable4"
        }, 
        {
            "trigger": "CSmModeEvent::EActionInput::Consumable1", 
            "contents": "CSmModeEvent::EActionInput::Consumable1"
        }, 
        {
            "trigger": "CSmModeEvent::EActionInput::Consumable2", 
            "contents": "CSmModeEvent::EActionInput::Consumable2"
        }, 
        {
            "trigger": "CSmModeEvent::EActionInput::None", 
            "contents": "CSmModeEvent::EActionInput::None"
        }, 
        {
            "trigger": "CSmModeEvent::EActionSlots::Weapon", 
            "contents": "CSmModeEvent::EActionSlots::Weapon"
        }, 
        {
            "trigger": "CSmModeEvent::EActionSlots::Movement", 
            "contents": "CSmModeEvent::EActionSlots::Movement"
        }, 
        {
            "trigger": "CSmModeEvent::EActionSlots::Activable1", 
            "contents": "CSmModeEvent::EActionSlots::Activable1"
        }, 
        {
            "trigger": "CSmModeEvent::EActionSlots::Activable2", 
            "contents": "CSmModeEvent::EActionSlots::Activable2"
        }, 
        {
            "trigger": "CSmModeEvent::EActionSlots::Activable3", 
            "contents": "CSmModeEvent::EActionSlots::Activable3"
        }, 
        {
            "trigger": "CSmModeEvent::EActionSlots::Activable4", 
            "contents": "CSmModeEvent::EActionSlots::Activable4"
        }, 
        {
            "trigger": "CSmModeEvent::EActionSlots::None", 
            "contents": "CSmModeEvent::EActionSlots::None"
        }, 
        {
            "trigger": "EType CSmModeEvent.Type", 
            "contents": "Type"
        }, 
        {
            "trigger": "CSmPlayer CSmModeEvent.Player", 
            "contents": "Player"
        }, 
        {
            "trigger": "Integer CSmModeEvent.Damage", 
            "contents": "Damage"
        }, 
        {
            "trigger": "CSmObject CSmModeEvent.VictimObject", 
            "contents": "VictimObject"
        }, 
        {
            "trigger": "Integer CSmModeEvent.ShooterPoints", 
            "contents": "ShooterPoints"
        }, 
        {
            "trigger": "CSmPlayer CSmModeEvent.Shooter", 
            "contents": "Shooter"
        }, 
        {
            "trigger": "CSmPlayer CSmModeEvent.Victim", 
            "contents": "Victim"
        }, 
        {
            "trigger": "Real CSmModeEvent.Height", 
            "contents": "Height"
        }, 
        {
            "trigger": "Real CSmModeEvent.MissDist", 
            "contents": "MissDist"
        }, 
        {
            "trigger": "Integer CSmModeEvent.WeaponNum", 
            "contents": "WeaponNum"
        }, 
        {
            "trigger": "Boolean CSmModeEvent.ShooterUsedAction", 
            "contents": "ShooterUsedAction"
        }, 
        {
            "trigger": "Integer CSmModeEvent.ShooterWeaponNum", 
            "contents": "ShooterWeaponNum"
        }, 
        {
            "trigger": "EActionSlot CSmModeEvent.ShooterActionSlot", 
            "contents": "ShooterActionSlot"
        }, 
        {
            "trigger": "Text CSmModeEvent.ShooterActionId", 
            "contents": "ShooterActionId"
        }, 
        {
            "trigger": "Boolean CSmModeEvent.VictimUsedAction", 
            "contents": "VictimUsedAction"
        }, 
        {
            "trigger": "Integer CSmModeEvent.VictimWeaponNum", 
            "contents": "VictimWeaponNum"
        }, 
        {
            "trigger": "EActionSlot CSmModeEvent.VictimActionSlot", 
            "contents": "VictimActionSlot"
        }, 
        {
            "trigger": "Text CSmModeEvent.VictimActionId", 
            "contents": "VictimActionId"
        }, 
        {
            "trigger": "EActionSlot CSmModeEvent.Action_Slot", 
            "contents": "Action_Slot"
        }, 
        {
            "trigger": "EActionInput CSmModeEvent.ActionInput", 
            "contents": "ActionInput"
        }, 
        {
            "trigger": "Text CSmModeEvent.ActionId", 
            "contents": "ActionId"
        }, 
        {
            "trigger": "Text CSmModeEvent.Param1", 
            "contents": "Param1"
        }, 
        {
            "trigger": "CSmObject CSmModeEvent.Object", 
            "contents": "Object"
        }, 
        {
            "trigger": "CSmBlockPole CSmModeEvent.BlockPole", 
            "contents": "BlockPole"
        }, 
        {
            "trigger": "CSmMapLandmark CSmModeEvent.Landmark", 
            "contents": "Landmark"
        }, 
        {
            "trigger": "Ident CSmModeEvent.PlayerId", 
            "contents": "PlayerId"
        }, 
        {
            "trigger": "CUser CSmModeEvent.User", 
            "contents": "User"
        }, 
        {
            "trigger": "Boolean CSmModeEvent.PlayerWasSpawned", 
            "contents": "PlayerWasSpawned"
        }, 
        {
            "trigger": "Boolean CSmModeEvent.PlayerWasInLadderMatch", 
            "contents": "PlayerWasInLadderMatch"
        }, 
        {
            "trigger": "Vec3 CSmModeEvent.PlayerLastPosition", 
            "contents": "PlayerLastPosition"
        }, 
        {
            "trigger": "Vec3 CSmModeEvent.PlayerLastAimDirection", 
            "contents": "PlayerLastAimDirection"
        }, 
        {
            "trigger": "Boolean CSmModeEvent.GiveUp", 
            "contents": "GiveUp"
        }, 
        {
            "trigger": "Text CSmModeEvent.CommandName", 
            "contents": "CommandName"
        }, 
        {
            "trigger": "Boolean CSmModeEvent.CommandValueBoolean", 
            "contents": "CommandValueBoolean"
        }, 
        {
            "trigger": "Integer CSmModeEvent.CommandValueInteger", 
            "contents": "CommandValueInteger"
        }, 
        {
            "trigger": "Real CSmModeEvent.CommandValueReal", 
            "contents": "CommandValueReal"
        }, 
        {
            "trigger": "Text CSmModeEvent.CommandValueText", 
            "contents": "CommandValueText"
        }, 
        {
            "trigger": "Integer CSmModeEvent.ActionChange", 
            "contents": "ActionChange"
        }, 
        {
            "trigger": "CSmMapBase", 
            "contents": "CSmMapBase"
        }, 
        {
            "trigger": "CSmMapBase::EStatus::OnPlayer", 
            "contents": "CSmMapBase::EStatus::OnPlayer"
        }, 
        {
            "trigger": "CSmMapBase::EStatus::OnAnchor", 
            "contents": "CSmMapBase::EStatus::OnAnchor"
        }, 
        {
            "trigger": "CSmMapBase::EStatus::InWorld", 
            "contents": "CSmMapBase::EStatus::InWorld"
        }, 
        {
            "trigger": "CSmMapBase::EStatus::Unspawned", 
            "contents": "CSmMapBase::EStatus::Unspawned"
        }, 
        {
            "trigger": "EStatus CSmMapBase.Status", 
            "contents": "Status"
        }, 
        {
            "trigger": "Ident CSmMapBase.ModelId", 
            "contents": "ModelId"
        }, 
        {
            "trigger": "Void CSmMapBase.SetAnchor(CSmMapObjectAnchor ObjectAnchor)", 
            "contents": "SetAnchor(${1:CSmMapObjectAnchor ObjectAnchor})"
        }, 
        {
            "trigger": "Void CSmMapBase.SetPlayer(CSmPlayer Player)", 
            "contents": "SetPlayer(${1:CSmPlayer Player})"
        }, 
        {
            "trigger": "Void CSmMapBase.SetPosition(Vec3 Position)", 
            "contents": "SetPosition(${1:Vec3 Position})"
        }, 
        {
            "trigger": "Void CSmMapBase.SetPositionAndVel(Vec3 Position, Vec3 Vel)", 
            "contents": "SetPositionAndVel(${1:Vec3 Position}, ${2:Vec3 Vel})"
        }, 
        {
            "trigger": "Void CSmMapBase.SetUnspawned()", 
            "contents": "SetUnspawned()"
        }, 
        {
            "trigger": "CSmPlayer CSmMapBase.Player", 
            "contents": "Player"
        }, 
        {
            "trigger": "Vec3 CSmMapBase.Position", 
            "contents": "Position"
        }, 
        {
            "trigger": "Vec3 CSmMapBase.Vel", 
            "contents": "Vel"
        }, 
        {
            "trigger": "Integer CSmMapBase.MachineState", 
            "contents": "MachineState"
        }, 
        {
            "trigger": "Boolean CSmMapBase.Throwable", 
            "contents": "Throwable"
        }, 
        {
            "trigger": "CMlScriptIngame", 
            "contents": "CMlScriptIngame"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::Default", 
            "contents": "CMlScriptIngame::EUISound::Default"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::Silence", 
            "contents": "CMlScriptIngame::EUISound::Silence"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::StartMatch", 
            "contents": "CMlScriptIngame::EUISound::StartMatch"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::EndMatch", 
            "contents": "CMlScriptIngame::EUISound::EndMatch"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::StartRound", 
            "contents": "CMlScriptIngame::EUISound::StartRound"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::EndRound", 
            "contents": "CMlScriptIngame::EUISound::EndRound"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::PhaseChange", 
            "contents": "CMlScriptIngame::EUISound::PhaseChange"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::TieBreakPoint", 
            "contents": "CMlScriptIngame::EUISound::TieBreakPoint"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::TiePoint", 
            "contents": "CMlScriptIngame::EUISound::TiePoint"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::VictoryPoint", 
            "contents": "CMlScriptIngame::EUISound::VictoryPoint"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::Capture", 
            "contents": "CMlScriptIngame::EUISound::Capture"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::TimeOut", 
            "contents": "CMlScriptIngame::EUISound::TimeOut"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::Notice", 
            "contents": "CMlScriptIngame::EUISound::Notice"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::Warning", 
            "contents": "CMlScriptIngame::EUISound::Warning"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::PlayerEliminated", 
            "contents": "CMlScriptIngame::EUISound::PlayerEliminated"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::PlayerHit", 
            "contents": "CMlScriptIngame::EUISound::PlayerHit"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::Checkpoint", 
            "contents": "CMlScriptIngame::EUISound::Checkpoint"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::Finish", 
            "contents": "CMlScriptIngame::EUISound::Finish"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::Record", 
            "contents": "CMlScriptIngame::EUISound::Record"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::ScoreProgress", 
            "contents": "CMlScriptIngame::EUISound::ScoreProgress"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::RankChange", 
            "contents": "CMlScriptIngame::EUISound::RankChange"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::Bonus", 
            "contents": "CMlScriptIngame::EUISound::Bonus"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::FirstHit", 
            "contents": "CMlScriptIngame::EUISound::FirstHit"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::Combo", 
            "contents": "CMlScriptIngame::EUISound::Combo"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::PlayersRemaining", 
            "contents": "CMlScriptIngame::EUISound::PlayersRemaining"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::Custom1", 
            "contents": "CMlScriptIngame::EUISound::Custom1"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::Custom2", 
            "contents": "CMlScriptIngame::EUISound::Custom2"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::Custom3", 
            "contents": "CMlScriptIngame::EUISound::Custom3"
        }, 
        {
            "trigger": "CMlScriptIngame::EUISound::Custom4", 
            "contents": "CMlScriptIngame::EUISound::Custom4"
        }, 
        {
            "trigger": "CMlScriptIngame::EInGameMenuResult::Resume", 
            "contents": "CMlScriptIngame::EInGameMenuResult::Resume"
        }, 
        {
            "trigger": "CMlScriptIngame::EInGameMenuResult::Quit", 
            "contents": "CMlScriptIngame::EInGameMenuResult::Quit"
        }, 
        {
            "trigger": "CMlScriptIngame::EInGameMenuResult::NormalMenu", 
            "contents": "CMlScriptIngame::EInGameMenuResult::NormalMenu"
        }, 
        {
            "trigger": "CMlScriptIngame::EInGameMenuResult::AdvancedMenu", 
            "contents": "CMlScriptIngame::EInGameMenuResult::AdvancedMenu"
        }, 
        {
            "trigger": "CMlScriptIngame::EInGameMenuResult::ServerSettings", 
            "contents": "CMlScriptIngame::EInGameMenuResult::ServerSettings"
        }, 
        {
            "trigger": "Integer CMlScriptIngame.GameTime", 
            "contents": "GameTime"
        }, 
        {
            "trigger": "CUIConfig CMlScriptIngame.UI", 
            "contents": "UI"
        }, 
        {
            "trigger": "CUIConfig CMlScriptIngame.ClientUI", 
            "contents": "ClientUI"
        }, 
        {
            "trigger": "Boolean CMlScriptIngame.IsSpectatorMode", 
            "contents": "IsSpectatorMode"
        }, 
        {
            "trigger": "Boolean CMlScriptIngame.UseClans", 
            "contents": "UseClans"
        }, 
        {
            "trigger": "Boolean CMlScriptIngame.UseForcedClans", 
            "contents": "UseForcedClans"
        }, 
        {
            "trigger": "CMap CMlScriptIngame.Map", 
            "contents": "Map"
        }, 
        {
            "trigger": "Void CMlScriptIngame.ShowCurChallengeCard()", 
            "contents": "ShowCurChallengeCard()"
        }, 
        {
            "trigger": "Void CMlScriptIngame.ShowModeHelp()", 
            "contents": "ShowModeHelp()"
        }, 
        {
            "trigger": "Void CMlScriptIngame.CopyServerLinkToClipBoard()", 
            "contents": "CopyServerLinkToClipBoard()"
        }, 
        {
            "trigger": "Void CMlScriptIngame.JoinTeam1()", 
            "contents": "JoinTeam1()"
        }, 
        {
            "trigger": "Void CMlScriptIngame.JoinTeam2()", 
            "contents": "JoinTeam2()"
        }, 
        {
            "trigger": "Void CMlScriptIngame.SetSpectateTarget(Text Player)", 
            "contents": "SetSpectateTarget(${1:Text Player})"
        }, 
        {
            "trigger": "Void CMlScriptIngame.ShowProfile(Text Player)", 
            "contents": "ShowProfile(${1:Text Player})"
        }, 
        {
            "trigger": "Void CMlScriptIngame.ShowInGameMenu()", 
            "contents": "ShowInGameMenu()"
        }, 
        {
            "trigger": "Text CMlScriptIngame.CurrentServerLogin", 
            "contents": "CurrentServerLogin"
        }, 
        {
            "trigger": "Text CMlScriptIngame.CurrentServerName", 
            "contents": "CurrentServerName"
        }, 
        {
            "trigger": "Text CMlScriptIngame.CurrentServerJoinLink", 
            "contents": "CurrentServerJoinLink"
        }, 
        {
            "trigger": "Text CMlScriptIngame.CurrentServerModeName", 
            "contents": "CurrentServerModeName"
        }, 
        {
            "trigger": "Void CMlScriptIngame.PlayUiSound(EUISound Sound, Integer SoundVariant, Real Volume)", 
            "contents": "PlayUiSound(${1:EUISound Sound}, ${2:Integer SoundVariant}, ${3:Real Volume})"
        }, 
        {
            "trigger": "Void CMlScriptIngame.CloseInGameMenu(EInGameMenuResult Result)", 
            "contents": "CloseInGameMenu(${1:EInGameMenuResult Result})"
        }, 
        {
            "trigger": "CSmActionEvent", 
            "contents": "CSmActionEvent"
        }, 
        {
            "trigger": "CSmActionEvent::EType::OnHitPlayer", 
            "contents": "CSmActionEvent::EType::OnHitPlayer"
        }, 
        {
            "trigger": "CSmActionEvent::EType::OnProjectileStart", 
            "contents": "CSmActionEvent::EType::OnProjectileStart"
        }, 
        {
            "trigger": "CSmActionEvent::EType::OnProjectileEnd", 
            "contents": "CSmActionEvent::EType::OnProjectileEnd"
        }, 
        {
            "trigger": "CSmActionEvent::EType::OnActiveChange", 
            "contents": "CSmActionEvent::EType::OnActiveChange"
        }, 
        {
            "trigger": "EType CSmActionEvent.Type", 
            "contents": "Type"
        }, 
        {
            "trigger": "CSmPlayer CSmActionEvent.Player", 
            "contents": "Player"
        }, 
        {
            "trigger": "Integer CSmActionEvent.Damage", 
            "contents": "Damage"
        }, 
        {
            "trigger": "Ident CSmActionEvent.ProjectileModelId", 
            "contents": "ProjectileModelId"
        }, 
        {
            "trigger": "Integer CSmActionEvent.ContextId", 
            "contents": "ContextId"
        }, 
        {
            "trigger": "Vec3 CSmActionEvent.Position", 
            "contents": "Position"
        }, 
        {
            "trigger": "Vec3 CSmActionEvent.Direction", 
            "contents": "Direction"
        }, 
        {
            "trigger": "Vec3 CSmActionEvent.Normal", 
            "contents": "Normal"
        }, 
        {
            "trigger": "CMapType", 
            "contents": "CMapType"
        }, 
        {
            "trigger": "CMapType::ValidationStatus::NotValidable", 
            "contents": "CMapType::ValidationStatus::NotValidable"
        }, 
        {
            "trigger": "CMapType::ValidationStatus::Validable", 
            "contents": "CMapType::ValidationStatus::Validable"
        }, 
        {
            "trigger": "CMapType::ValidationStatus::Validated", 
            "contents": "CMapType::ValidationStatus::Validated"
        }, 
        {
            "trigger": "Boolean CMapType.CustomEditAnchorData", 
            "contents": "CustomEditAnchorData"
        }, 
        {
            "trigger": "Void CMapType.ClearMapMetadata()", 
            "contents": "ClearMapMetadata()"
        }, 
        {
            "trigger": "ValidationStatus CMapType.ValidationStatus", 
            "contents": "ValidationStatus"
        }, 
        {
            "trigger": "Text CMapType.ValidabilityRequirementsMessage", 
            "contents": "ValidabilityRequirementsMessage"
        }, 
        {
            "trigger": "Boolean CMapType.ValidationEndRequested", 
            "contents": "ValidationEndRequested"
        }, 
        {
            "trigger": "Void CMapType.StartTestMapWithMode(Text RulesModeName)", 
            "contents": "StartTestMapWithMode(${1:Text RulesModeName})"
        }, 
        {
            "trigger": "Void CMapType.RequestEnterPlayground()", 
            "contents": "RequestEnterPlayground()"
        }, 
        {
            "trigger": "Void CMapType.RequestLeavePlayground()", 
            "contents": "RequestLeavePlayground()"
        }, 
        {
            "trigger": "Boolean CMapType.IsSwitchedToPlayground", 
            "contents": "IsSwitchedToPlayground"
        }, 
        {
            "trigger": "CTmMlPlayer", 
            "contents": "CTmMlPlayer"
        }, 
        {
            "trigger": "CTmMlPlayer::ERaceState::BeforeStart", 
            "contents": "CTmMlPlayer::ERaceState::BeforeStart"
        }, 
        {
            "trigger": "CTmMlPlayer::ERaceState::Running", 
            "contents": "CTmMlPlayer::ERaceState::Running"
        }, 
        {
            "trigger": "CTmMlPlayer::ERaceState::Finished", 
            "contents": "CTmMlPlayer::ERaceState::Finished"
        }, 
        {
            "trigger": "CTmMlPlayer::ERaceState::Eliminated", 
            "contents": "CTmMlPlayer::ERaceState::Eliminated"
        }, 
        {
            "trigger": "Integer CTmMlPlayer.CurrentClan", 
            "contents": "CurrentClan"
        }, 
        {
            "trigger": "ERaceState CTmMlPlayer.RaceState", 
            "contents": "RaceState"
        }, 
        {
            "trigger": "Boolean CTmMlPlayer.IsSpawned", 
            "contents": "IsSpawned"
        }, 
        {
            "trigger": "CTrackManiaScore CTmMlPlayer.Score", 
            "contents": "Score"
        }, 
        {
            "trigger": "Integer CTmMlPlayer.RaceStartTime", 
            "contents": "RaceStartTime"
        }, 
        {
            "trigger": "Integer CTmMlPlayer.LapStartTime", 
            "contents": "LapStartTime"
        }, 
        {
            "trigger": "CTmResult CTmMlPlayer.CurRace", 
            "contents": "CurRace"
        }, 
        {
            "trigger": "CTmResult CTmMlPlayer.CurLap", 
            "contents": "CurLap"
        }, 
        {
            "trigger": "Integer CTmMlPlayer.CurrentNbLaps", 
            "contents": "CurrentNbLaps"
        }, 
        {
            "trigger": "Integer CTmMlPlayer.CurTriggerIndex", 
            "contents": "CurTriggerIndex"
        }, 
        {
            "trigger": "Integer CTmMlPlayer.CurCheckpointRaceTime", 
            "contents": "CurCheckpointRaceTime"
        }, 
        {
            "trigger": "Integer CTmMlPlayer.CurCheckpointLapTime", 
            "contents": "CurCheckpointLapTime"
        }, 
        {
            "trigger": "Real CTmMlPlayer.AccelCoef", 
            "contents": "AccelCoef"
        }, 
        {
            "trigger": "Real CTmMlPlayer.ControlCoef", 
            "contents": "ControlCoef"
        }, 
        {
            "trigger": "Vec3 CTmMlPlayer.Position", 
            "contents": "Position"
        }, 
        {
            "trigger": "Real CTmMlPlayer.AimYaw", 
            "contents": "AimYaw"
        }, 
        {
            "trigger": "Real CTmMlPlayer.AimPitch", 
            "contents": "AimPitch"
        }, 
        {
            "trigger": "Vec3 CTmMlPlayer.AimDirection", 
            "contents": "AimDirection"
        }, 
        {
            "trigger": "Real CTmMlPlayer.Distance", 
            "contents": "Distance"
        }, 
        {
            "trigger": "Real CTmMlPlayer.Speed", 
            "contents": "Speed"
        }, 
        {
            "trigger": "Integer CTmMlPlayer.DisplaySpeed", 
            "contents": "DisplaySpeed"
        }, 
        {
            "trigger": "CTmScore", 
            "contents": "CTmScore"
        }, 
        {
            "trigger": "CTmScore::EType::Unknown", 
            "contents": "CTmScore::EType::Unknown"
        }, 
        {
            "trigger": "CTmScore::EType::StartLine", 
            "contents": "CTmScore::EType::StartLine"
        }, 
        {
            "trigger": "CTmScore::EType::WayPoint", 
            "contents": "CTmScore::EType::WayPoint"
        }, 
        {
            "trigger": "CTmScore::EType::GiveUp", 
            "contents": "CTmScore::EType::GiveUp"
        }, 
        {
            "trigger": "CTmScore::EType::Respawn", 
            "contents": "CTmScore::EType::Respawn"
        }, 
        {
            "trigger": "CTmScore::EType::Stunt", 
            "contents": "CTmScore::EType::Stunt"
        }, 
        {
            "trigger": "CTmScore::EType::OnPlayerAdded", 
            "contents": "CTmScore::EType::OnPlayerAdded"
        }, 
        {
            "trigger": "CTmScore::EType::OnPlayerRemoved", 
            "contents": "CTmScore::EType::OnPlayerRemoved"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::None", 
            "contents": "CTmScore::EStuntFigure::None"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::StraightJump", 
            "contents": "CTmScore::EStuntFigure::StraightJump"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::Flip", 
            "contents": "CTmScore::EStuntFigure::Flip"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::BackFlip", 
            "contents": "CTmScore::EStuntFigure::BackFlip"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::Spin", 
            "contents": "CTmScore::EStuntFigure::Spin"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::Aerial", 
            "contents": "CTmScore::EStuntFigure::Aerial"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::AlleyOop", 
            "contents": "CTmScore::EStuntFigure::AlleyOop"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::Roll", 
            "contents": "CTmScore::EStuntFigure::Roll"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::Corkscrew", 
            "contents": "CTmScore::EStuntFigure::Corkscrew"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::SpinOff", 
            "contents": "CTmScore::EStuntFigure::SpinOff"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::Rodeo", 
            "contents": "CTmScore::EStuntFigure::Rodeo"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::FlipFlap", 
            "contents": "CTmScore::EStuntFigure::FlipFlap"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::Twister", 
            "contents": "CTmScore::EStuntFigure::Twister"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::FreeStyle", 
            "contents": "CTmScore::EStuntFigure::FreeStyle"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::SpinningMix", 
            "contents": "CTmScore::EStuntFigure::SpinningMix"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::FlippingChaos", 
            "contents": "CTmScore::EStuntFigure::FlippingChaos"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::RollingMadness", 
            "contents": "CTmScore::EStuntFigure::RollingMadness"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckNone", 
            "contents": "CTmScore::EStuntFigure::WreckNone"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckStraightJump", 
            "contents": "CTmScore::EStuntFigure::WreckStraightJump"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckFlip", 
            "contents": "CTmScore::EStuntFigure::WreckFlip"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckBackFlip", 
            "contents": "CTmScore::EStuntFigure::WreckBackFlip"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckSpin", 
            "contents": "CTmScore::EStuntFigure::WreckSpin"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckAerial", 
            "contents": "CTmScore::EStuntFigure::WreckAerial"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckAlleyOop", 
            "contents": "CTmScore::EStuntFigure::WreckAlleyOop"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckRoll", 
            "contents": "CTmScore::EStuntFigure::WreckRoll"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckCorkscrew", 
            "contents": "CTmScore::EStuntFigure::WreckCorkscrew"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckSpinOff", 
            "contents": "CTmScore::EStuntFigure::WreckSpinOff"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckRodeo", 
            "contents": "CTmScore::EStuntFigure::WreckRodeo"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckFlipFlap", 
            "contents": "CTmScore::EStuntFigure::WreckFlipFlap"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckTwister", 
            "contents": "CTmScore::EStuntFigure::WreckTwister"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckFreeStyle", 
            "contents": "CTmScore::EStuntFigure::WreckFreeStyle"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckSpinningMix", 
            "contents": "CTmScore::EStuntFigure::WreckSpinningMix"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckFlippingChaos", 
            "contents": "CTmScore::EStuntFigure::WreckFlippingChaos"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::WreckRollingMadness", 
            "contents": "CTmScore::EStuntFigure::WreckRollingMadness"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::TimePenalty", 
            "contents": "CTmScore::EStuntFigure::TimePenalty"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::RespawnPenalty", 
            "contents": "CTmScore::EStuntFigure::RespawnPenalty"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::Grind", 
            "contents": "CTmScore::EStuntFigure::Grind"
        }, 
        {
            "trigger": "CTmScore::EStuntFigure::Reset", 
            "contents": "CTmScore::EStuntFigure::Reset"
        }, 
        {
            "trigger": "EType CTmScore.Type", 
            "contents": "Type"
        }, 
        {
            "trigger": "CTmPlayer CTmScore.Player", 
            "contents": "Player"
        }, 
        {
            "trigger": "Integer CTmScore.RaceTime", 
            "contents": "RaceTime"
        }, 
        {
            "trigger": "Integer CTmScore.CheckpointInRace", 
            "contents": "CheckpointInRace"
        }, 
        {
            "trigger": "Integer CTmScore.CheckpointInLap", 
            "contents": "CheckpointInLap"
        }, 
        {
            "trigger": "Boolean CTmScore.IsEndLap", 
            "contents": "IsEndLap"
        }, 
        {
            "trigger": "Boolean CTmScore.IsEndRace", 
            "contents": "IsEndRace"
        }, 
        {
            "trigger": "Integer CTmScore.LapTime", 
            "contents": "LapTime"
        }, 
        {
            "trigger": "Integer CTmScore.StuntsScore", 
            "contents": "StuntsScore"
        }, 
        {
            "trigger": "Integer CTmScore.NbRespawns", 
            "contents": "NbRespawns"
        }, 
        {
            "trigger": "Ident CTmScore.BlockId", 
            "contents": "BlockId"
        }, 
        {
            "trigger": "Real CTmScore.Speed", 
            "contents": "Speed"
        }, 
        {
            "trigger": "Real CTmScore.Distance", 
            "contents": "Distance"
        }, 
        {
            "trigger": "Real CTmScore.Damages", 
            "contents": "Damages"
        }, 
        {
            "trigger": "EStuntFigure CTmScore.StuntFigure", 
            "contents": "StuntFigure"
        }, 
        {
            "trigger": "Integer CTmScore.Angle", 
            "contents": "Angle"
        }, 
        {
            "trigger": "Integer CTmScore.Points", 
            "contents": "Points"
        }, 
        {
            "trigger": "Integer CTmScore.Combo", 
            "contents": "Combo"
        }, 
        {
            "trigger": "Boolean CTmScore.IsStraight", 
            "contents": "IsStraight"
        }, 
        {
            "trigger": "Boolean CTmScore.IsReverse", 
            "contents": "IsReverse"
        }, 
        {
            "trigger": "Boolean CTmScore.IsMasterJump", 
            "contents": "IsMasterJump"
        }, 
        {
            "trigger": "Real CTmScore.Factor", 
            "contents": "Factor"
        }, 
        {
            "trigger": "CUser CTmScore.User", 
            "contents": "User"
        }, 
        {
            "trigger": "Boolean CTmScore.PlayerWasSpawned", 
            "contents": "PlayerWasSpawned"
        }, 
        {
            "trigger": "Boolean CTmScore.PlayerWasInLadderMatch", 
            "contents": "PlayerWasInLadderMatch"
        }, 
        {
            "trigger": "CMlFrame", 
            "contents": "CMlFrame"
        }, 
        {
            "trigger": "CMlFrame::EControlType::Audio", 
            "contents": "CMlFrame::EControlType::Audio"
        }, 
        {
            "trigger": "CMlFrame::EControlType::Entry", 
            "contents": "CMlFrame::EControlType::Entry"
        }, 
        {
            "trigger": "CMlFrame::EControlType::FileEntry", 
            "contents": "CMlFrame::EControlType::FileEntry"
        }, 
        {
            "trigger": "CMlFrame::EControlType::Frame", 
            "contents": "CMlFrame::EControlType::Frame"
        }, 
        {
            "trigger": "CMlFrame::EControlType::Label", 
            "contents": "CMlFrame::EControlType::Label"
        }, 
        {
            "trigger": "CMlFrame::EControlType::Quad", 
            "contents": "CMlFrame::EControlType::Quad"
        }, 
        {
            "trigger": "CMlFrame::EControlType::Video", 
            "contents": "CMlFrame::EControlType::Video"
        }, 
        {
            "trigger": "CMlControl CMlFrame.GetFirstChild(Text ControlId)", 
            "contents": "GetFirstChild(${1:Text ControlId})"
        }, 
        {
            "trigger": "Boolean CMlFrame.ClipWindowActive", 
            "contents": "ClipWindowActive"
        }, 
        {
            "trigger": "Vec2 CMlFrame.ClipWindowRelativePosition", 
            "contents": "ClipWindowRelativePosition"
        }, 
        {
            "trigger": "Vec2 CMlFrame.ClipWindowSize", 
            "contents": "ClipWindowSize"
        }, 
        {
            "trigger": "CXmlDocument", 
            "contents": "CXmlDocument"
        }, 
        {
            "trigger": "CXmlDocument::EnumAutoTerrainPlaceType::Auto", 
            "contents": "CXmlDocument::EnumAutoTerrainPlaceType::Auto"
        }, 
        {
            "trigger": "CXmlDocument::EnumAutoTerrainPlaceType::Force", 
            "contents": "CXmlDocument::EnumAutoTerrainPlaceType::Force"
        }, 
        {
            "trigger": "CXmlDocument::EnumAutoTerrainPlaceType::DoNotPlace", 
            "contents": "CXmlDocument::EnumAutoTerrainPlaceType::DoNotPlace"
        }, 
        {
            "trigger": "CXmlDocument::EnumAutoTerrainPlaceType::DoNotDestroy", 
            "contents": "CXmlDocument::EnumAutoTerrainPlaceType::DoNotDestroy"
        }, 
        {
            "trigger": "CBlockModelVariantAir", 
            "contents": "CBlockModelVariantAir"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmDriverBehaviour::Static", 
            "contents": "CBlockModelVariantAir::ESmDriverBehaviour::Static"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmDriverBehaviour::Turret", 
            "contents": "CBlockModelVariantAir::ESmDriverBehaviour::Turret"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmDriverBehaviour::Scripted", 
            "contents": "CBlockModelVariantAir::ESmDriverBehaviour::Scripted"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmDriverBehaviour::IA", 
            "contents": "CBlockModelVariantAir::ESmDriverBehaviour::IA"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmDriverBehaviour::Patrol", 
            "contents": "CBlockModelVariantAir::ESmDriverBehaviour::Patrol"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmDriverBehaviour::Escape", 
            "contents": "CBlockModelVariantAir::ESmDriverBehaviour::Escape"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmDriverBehaviour::Saunter", 
            "contents": "CBlockModelVariantAir::ESmDriverBehaviour::Saunter"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmDriverPatrolMode::OneTrip", 
            "contents": "CBlockModelVariantAir::ESmDriverPatrolMode::OneTrip"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmDriverPatrolMode::BackAndForth", 
            "contents": "CBlockModelVariantAir::ESmDriverPatrolMode::BackAndForth"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmDriverPatrolMode::Loop", 
            "contents": "CBlockModelVariantAir::ESmDriverPatrolMode::Loop"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmAttackFilter::All", 
            "contents": "CBlockModelVariantAir::ESmAttackFilter::All"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmAttackFilter::AllPlayers", 
            "contents": "CBlockModelVariantAir::ESmAttackFilter::AllPlayers"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmAttackFilter::AllBots", 
            "contents": "CBlockModelVariantAir::ESmAttackFilter::AllBots"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmAttackFilter::AllOpposite", 
            "contents": "CBlockModelVariantAir::ESmAttackFilter::AllOpposite"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmAttackFilter::OppositePlayers", 
            "contents": "CBlockModelVariantAir::ESmAttackFilter::OppositePlayers"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmAttackFilter::OppositeBots", 
            "contents": "CBlockModelVariantAir::ESmAttackFilter::OppositeBots"
        }, 
        {
            "trigger": "CBlockModelVariantAir::ESmAttackFilter::Nobody", 
            "contents": "CBlockModelVariantAir::ESmAttackFilter::Nobody"
        }, 
        {
            "trigger": "ESmDriverBehaviour CBlockModelVariantAir.Behaviour", 
            "contents": "Behaviour"
        }, 
        {
            "trigger": "Real CBlockModelVariantAir.AggroRadius", 
            "contents": "AggroRadius"
        }, 
        {
            "trigger": "Real CBlockModelVariantAir.DisengageDistance", 
            "contents": "DisengageDistance"
        }, 
        {
            "trigger": "Real CBlockModelVariantAir.PathSpeedCoef", 
            "contents": "PathSpeedCoef"
        }, 
        {
            "trigger": "Real CBlockModelVariantAir.Accuracy", 
            "contents": "Accuracy"
        }, 
        {
            "trigger": "Integer CBlockModelVariantAir.ReactionTime", 
            "contents": "ReactionTime"
        }, 
        {
            "trigger": "Integer CBlockModelVariantAir.ShootPeriodMin", 
            "contents": "ShootPeriodMin"
        }, 
        {
            "trigger": "Integer CBlockModelVariantAir.ShootPeriodMax", 
            "contents": "ShootPeriodMax"
        }, 
        {
            "trigger": "Boolean CBlockModelVariantAir.RocketAnticipation", 
            "contents": "RocketAnticipation"
        }, 
        {
            "trigger": "Real CBlockModelVariantAir.Fov", 
            "contents": "Fov"
        }, 
        {
            "trigger": "ESmAttackFilter CBlockModelVariantAir.AttackFilter", 
            "contents": "AttackFilter"
        }, 
        {
            "trigger": "CSmPlayer CBlockModelVariantAir.Target", 
            "contents": "Target"
        }, 
        {
            "trigger": "Boolean CBlockModelVariantAir.IsStuck", 
            "contents": "IsStuck"
        }, 
        {
            "trigger": "Boolean CBlockModelVariantAir.IsFlying", 
            "contents": "IsFlying"
        }, 
        {
            "trigger": "Integer CBlockModelVariantAir.PathOffset", 
            "contents": "PathOffset"
        }, 
        {
            "trigger": "Real CBlockModelVariantAir.Agressivity", 
            "contents": "Agressivity"
        }, 
        {
            "trigger": "Boolean CBlockModelVariantAir.UseOldShootingSystem", 
            "contents": "UseOldShootingSystem"
        }, 
        {
            "trigger": "ESmDriverPatrolMode CBlockModelVariantAir.Patrol_Mode", 
            "contents": "Patrol_Mode"
        }, 
        {
            "trigger": "Vec3 CBlockModelVariantAir.Escape_AnchorPoint", 
            "contents": "Escape_AnchorPoint"
        }, 
        {
            "trigger": "Real CBlockModelVariantAir.Escape_DistanceSafe", 
            "contents": "Escape_DistanceSafe"
        }, 
        {
            "trigger": "Real CBlockModelVariantAir.Escape_DistanceMinEscape", 
            "contents": "Escape_DistanceMinEscape"
        }, 
        {
            "trigger": "Real CBlockModelVariantAir.Escape_DistanceMaxEscape", 
            "contents": "Escape_DistanceMaxEscape"
        }, 
        {
            "trigger": "Vec3 CBlockModelVariantAir.Saunter_AnchorPoint", 
            "contents": "Saunter_AnchorPoint"
        }, 
        {
            "trigger": "Integer CBlockModelVariantAir.Saunter_BaseChillingTime", 
            "contents": "Saunter_BaseChillingTime"
        }, 
        {
            "trigger": "Integer CBlockModelVariantAir.Saunter_ChillingTimeDelta", 
            "contents": "Saunter_ChillingTimeDelta"
        }, 
        {
            "trigger": "Real CBlockModelVariantAir.Saunter_Radius", 
            "contents": "Saunter_Radius"
        }, 
        {
            "trigger": "Boolean CBlockModelVariantAir.Scripted_ForceAimInMoveDir", 
            "contents": "Scripted_ForceAimInMoveDir"
        }, 
        {
            "trigger": "CSmPlayer CBlockModelVariantAir.ForcedTarget", 
            "contents": "ForcedTarget"
        }, 
        {
            "trigger": "CSmBlockPole", 
            "contents": "CSmBlockPole"
        }, 
        {
            "trigger": "CSmBlockPole::EUISequence::None", 
            "contents": "CSmBlockPole::EUISequence::None"
        }, 
        {
            "trigger": "CSmBlockPole::EUISequence::Playing", 
            "contents": "CSmBlockPole::EUISequence::Playing"
        }, 
        {
            "trigger": "CSmBlockPole::EUISequence::Intro", 
            "contents": "CSmBlockPole::EUISequence::Intro"
        }, 
        {
            "trigger": "CSmBlockPole::EUISequence::Outro", 
            "contents": "CSmBlockPole::EUISequence::Outro"
        }, 
        {
            "trigger": "CSmBlockPole::EUISequence::Podium", 
            "contents": "CSmBlockPole::EUISequence::Podium"
        }, 
        {
            "trigger": "CSmBlockPole::EUISequence::CustomMTClip", 
            "contents": "CSmBlockPole::EUISequence::CustomMTClip"
        }, 
        {
            "trigger": "CSmBlockPole::EUISequence::EndRound", 
            "contents": "CSmBlockPole::EUISequence::EndRound"
        }, 
        {
            "trigger": "CSmBlockPole::EUISequence::PlayersPresentation", 
            "contents": "CSmBlockPole::EUISequence::PlayersPresentation"
        }, 
        {
            "trigger": "CSmBlockPole::EUISequence::UIInteraction", 
            "contents": "CSmBlockPole::EUISequence::UIInteraction"
        }, 
        {
            "trigger": "CSmBlockPole::EUISequence::RollingBackgroundIntro", 
            "contents": "CSmBlockPole::EUISequence::RollingBackgroundIntro"
        }, 
        {
            "trigger": "CSmBlockPole::EUISequence::CustomMTClip_WithUIInteraction", 
            "contents": "CSmBlockPole::EUISequence::CustomMTClip_WithUIInteraction"
        }, 
        {
            "trigger": "CSmBlockPole::EUIStatus::None", 
            "contents": "CSmBlockPole::EUIStatus::None"
        }, 
        {
            "trigger": "CSmBlockPole::EUIStatus::Normal", 
            "contents": "CSmBlockPole::EUIStatus::Normal"
        }, 
        {
            "trigger": "CSmBlockPole::EUIStatus::Warning", 
            "contents": "CSmBlockPole::EUIStatus::Warning"
        }, 
        {
            "trigger": "CSmBlockPole::EUIStatus::Error", 
            "contents": "CSmBlockPole::EUIStatus::Error"
        }, 
        {
            "trigger": "CSmBlockPole::EUIStatus::Official", 
            "contents": "CSmBlockPole::EUIStatus::Official"
        }, 
        {
            "trigger": "CSmBlockPole::EVisibility::None", 
            "contents": "CSmBlockPole::EVisibility::None"
        }, 
        {
            "trigger": "CSmBlockPole::EVisibility::Normal", 
            "contents": "CSmBlockPole::EVisibility::Normal"
        }, 
        {
            "trigger": "CSmBlockPole::EVisibility::Manual", 
            "contents": "CSmBlockPole::EVisibility::Manual"
        }, 
        {
            "trigger": "CSmBlockPole::EVisibility::ForcedHidden", 
            "contents": "CSmBlockPole::EVisibility::ForcedHidden"
        }, 
        {
            "trigger": "CSmBlockPole::EVisibility::ForcedVisible", 
            "contents": "CSmBlockPole::EVisibility::ForcedVisible"
        }, 
        {
            "trigger": "CSmBlockPole::ELabelsVisibility::None", 
            "contents": "CSmBlockPole::ELabelsVisibility::None"
        }, 
        {
            "trigger": "CSmBlockPole::ELabelsVisibility::Never", 
            "contents": "CSmBlockPole::ELabelsVisibility::Never"
        }, 
        {
            "trigger": "CSmBlockPole::ELabelsVisibility::Always", 
            "contents": "CSmBlockPole::ELabelsVisibility::Always"
        }, 
        {
            "trigger": "CSmBlockPole::ELabelsVisibility::WhenInFrustum", 
            "contents": "CSmBlockPole::ELabelsVisibility::WhenInFrustum"
        }, 
        {
            "trigger": "CSmBlockPole::ELabelsVisibility::WhenVisible", 
            "contents": "CSmBlockPole::ELabelsVisibility::WhenVisible"
        }, 
        {
            "trigger": "CSmBlockPole::ELabelsVisibility::WhenInMiddleOfScreen", 
            "contents": "CSmBlockPole::ELabelsVisibility::WhenInMiddleOfScreen"
        }, 
        {
            "trigger": "CSmBlockPole::EAvatarVariant::Default", 
            "contents": "CSmBlockPole::EAvatarVariant::Default"
        }, 
        {
            "trigger": "CSmBlockPole::EAvatarVariant::Sad", 
            "contents": "CSmBlockPole::EAvatarVariant::Sad"
        }, 
        {
            "trigger": "CSmBlockPole::EAvatarVariant::Happy", 
            "contents": "CSmBlockPole::EAvatarVariant::Happy"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::Default", 
            "contents": "CSmBlockPole::EUISound::Default"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::Silence", 
            "contents": "CSmBlockPole::EUISound::Silence"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::StartMatch", 
            "contents": "CSmBlockPole::EUISound::StartMatch"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::EndMatch", 
            "contents": "CSmBlockPole::EUISound::EndMatch"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::StartRound", 
            "contents": "CSmBlockPole::EUISound::StartRound"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::EndRound", 
            "contents": "CSmBlockPole::EUISound::EndRound"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::PhaseChange", 
            "contents": "CSmBlockPole::EUISound::PhaseChange"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::TieBreakPoint", 
            "contents": "CSmBlockPole::EUISound::TieBreakPoint"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::TiePoint", 
            "contents": "CSmBlockPole::EUISound::TiePoint"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::VictoryPoint", 
            "contents": "CSmBlockPole::EUISound::VictoryPoint"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::Capture", 
            "contents": "CSmBlockPole::EUISound::Capture"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::TimeOut", 
            "contents": "CSmBlockPole::EUISound::TimeOut"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::Notice", 
            "contents": "CSmBlockPole::EUISound::Notice"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::Warning", 
            "contents": "CSmBlockPole::EUISound::Warning"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::PlayerEliminated", 
            "contents": "CSmBlockPole::EUISound::PlayerEliminated"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::PlayerHit", 
            "contents": "CSmBlockPole::EUISound::PlayerHit"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::Checkpoint", 
            "contents": "CSmBlockPole::EUISound::Checkpoint"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::Finish", 
            "contents": "CSmBlockPole::EUISound::Finish"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::Record", 
            "contents": "CSmBlockPole::EUISound::Record"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::ScoreProgress", 
            "contents": "CSmBlockPole::EUISound::ScoreProgress"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::RankChange", 
            "contents": "CSmBlockPole::EUISound::RankChange"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::Bonus", 
            "contents": "CSmBlockPole::EUISound::Bonus"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::FirstHit", 
            "contents": "CSmBlockPole::EUISound::FirstHit"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::Combo", 
            "contents": "CSmBlockPole::EUISound::Combo"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::PlayersRemaining", 
            "contents": "CSmBlockPole::EUISound::PlayersRemaining"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::Custom1", 
            "contents": "CSmBlockPole::EUISound::Custom1"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::Custom2", 
            "contents": "CSmBlockPole::EUISound::Custom2"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::Custom3", 
            "contents": "CSmBlockPole::EUISound::Custom3"
        }, 
        {
            "trigger": "CSmBlockPole::EUISound::Custom4", 
            "contents": "CSmBlockPole::EUISound::Custom4"
        }, 
        {
            "trigger": "CSmBlockPole::ENoticeLevel::Default", 
            "contents": "CSmBlockPole::ENoticeLevel::Default"
        }, 
        {
            "trigger": "CSmBlockPole::ENoticeLevel::PlayerInfo", 
            "contents": "CSmBlockPole::ENoticeLevel::PlayerInfo"
        }, 
        {
            "trigger": "CSmBlockPole::ENoticeLevel::PlayerWarning", 
            "contents": "CSmBlockPole::ENoticeLevel::PlayerWarning"
        }, 
        {
            "trigger": "CSmBlockPole::ENoticeLevel::MapInfo", 
            "contents": "CSmBlockPole::ENoticeLevel::MapInfo"
        }, 
        {
            "trigger": "CSmBlockPole::ENoticeLevel::MapWarning", 
            "contents": "CSmBlockPole::ENoticeLevel::MapWarning"
        }, 
        {
            "trigger": "CSmBlockPole::ENoticeLevel::MatchInfo", 
            "contents": "CSmBlockPole::ENoticeLevel::MatchInfo"
        }, 
        {
            "trigger": "CSmBlockPole::ENoticeLevel::MatchWarning", 
            "contents": "CSmBlockPole::ENoticeLevel::MatchWarning"
        }, 
        {
            "trigger": "CSmBlockPole::EObserverMode::Default", 
            "contents": "CSmBlockPole::EObserverMode::Default"
        }, 
        {
            "trigger": "CSmBlockPole::EObserverMode::Forced", 
            "contents": "CSmBlockPole::EObserverMode::Forced"
        }, 
        {
            "trigger": "CSmBlockPole::EObserverMode::Forbidden", 
            "contents": "CSmBlockPole::EObserverMode::Forbidden"
        }, 
        {
            "trigger": "CSmBlockPole::EObserverMode::Manual", 
            "contents": "CSmBlockPole::EObserverMode::Manual"
        }, 
        {
            "trigger": "EUISequence CSmBlockPole.UISequence", 
            "contents": "UISequence"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.UISequenceIsCompleted", 
            "contents": "UISequenceIsCompleted"
        }, 
        {
            "trigger": "Text CSmBlockPole.UISequence_CustomMTClip", 
            "contents": "UISequence_CustomMTClip"
        }, 
        {
            "trigger": "Integer CSmBlockPole.UISequence_CustomMTRefTime", 
            "contents": "UISequence_CustomMTRefTime"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.UISequence_CanSkipIntroMT", 
            "contents": "UISequence_CanSkipIntroMT"
        }, 
        {
            "trigger": "Text CSmBlockPole.UISequence_PodiumPlayersWin", 
            "contents": "UISequence_PodiumPlayersWin"
        }, 
        {
            "trigger": "Text CSmBlockPole.UISequence_PodiumPlayersLose", 
            "contents": "UISequence_PodiumPlayersLose"
        }, 
        {
            "trigger": "Text CSmBlockPole.ManialinkPage", 
            "contents": "ManialinkPage"
        }, 
        {
            "trigger": "Text CSmBlockPole.BigMessage", 
            "contents": "BigMessage"
        }, 
        {
            "trigger": "Text CSmBlockPole.BigMessageAvatarLogin", 
            "contents": "BigMessageAvatarLogin"
        }, 
        {
            "trigger": "EAvatarVariant CSmBlockPole.BigMessageAvatarVariant", 
            "contents": "BigMessageAvatarVariant"
        }, 
        {
            "trigger": "EUISound CSmBlockPole.BigMessageSound", 
            "contents": "BigMessageSound"
        }, 
        {
            "trigger": "Integer CSmBlockPole.BigMessageSoundVariant", 
            "contents": "BigMessageSoundVariant"
        }, 
        {
            "trigger": "Text CSmBlockPole.StatusMessage", 
            "contents": "StatusMessage"
        }, 
        {
            "trigger": "Text CSmBlockPole.GaugeMessage", 
            "contents": "GaugeMessage"
        }, 
        {
            "trigger": "Real CSmBlockPole.GaugeRatio", 
            "contents": "GaugeRatio"
        }, 
        {
            "trigger": "Integer CSmBlockPole.GaugeClan", 
            "contents": "GaugeClan"
        }, 
        {
            "trigger": "Text CSmBlockPole.MarkersXML", 
            "contents": "MarkersXML"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideNotices", 
            "contents": "OverlayHideNotices"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideMapInfo", 
            "contents": "OverlayHideMapInfo"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideOpponentsInfo", 
            "contents": "OverlayHideOpponentsInfo"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideChat", 
            "contents": "OverlayHideChat"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideCheckPointList", 
            "contents": "OverlayHideCheckPointList"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideRoundScores", 
            "contents": "OverlayHideRoundScores"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideCountdown", 
            "contents": "OverlayHideCountdown"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideCrosshair", 
            "contents": "OverlayHideCrosshair"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideGauges", 
            "contents": "OverlayHideGauges"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideConsumables", 
            "contents": "OverlayHideConsumables"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHide321Go", 
            "contents": "OverlayHide321Go"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideBackground", 
            "contents": "OverlayHideBackground"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideChrono", 
            "contents": "OverlayHideChrono"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideSpeedAndDist", 
            "contents": "OverlayHideSpeedAndDist"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHidePersonnalBestAndRank", 
            "contents": "OverlayHidePersonnalBestAndRank"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHidePosition", 
            "contents": "OverlayHidePosition"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideCheckPointTime", 
            "contents": "OverlayHideCheckPointTime"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideEndMapLadderRecap", 
            "contents": "OverlayHideEndMapLadderRecap"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideMultilapInfos", 
            "contents": "OverlayHideMultilapInfos"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideSpectatorControllers", 
            "contents": "OverlayHideSpectatorControllers"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayHideSpectatorInfos", 
            "contents": "OverlayHideSpectatorInfos"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayChatHideAvatar", 
            "contents": "OverlayChatHideAvatar"
        }, 
        {
            "trigger": "Integer CSmBlockPole.OverlayChatLineCount", 
            "contents": "OverlayChatLineCount"
        }, 
        {
            "trigger": "Vec2 CSmBlockPole.OverlayChatOffset", 
            "contents": "OverlayChatOffset"
        }, 
        {
            "trigger": "Vec2 CSmBlockPole.CountdownCoord", 
            "contents": "CountdownCoord"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.NoticesFilter_HidePlayerInfo", 
            "contents": "NoticesFilter_HidePlayerInfo"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.NoticesFilter_HidePlayerWarning", 
            "contents": "NoticesFilter_HidePlayerWarning"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.NoticesFilter_HidePlayerInfoIfNotMe", 
            "contents": "NoticesFilter_HidePlayerInfoIfNotMe"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.NoticesFilter_HidePlayerWarningIfNotMe", 
            "contents": "NoticesFilter_HidePlayerWarningIfNotMe"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.NoticesFilter_HideMapInfo", 
            "contents": "NoticesFilter_HideMapInfo"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.NoticesFilter_HideMapWarning", 
            "contents": "NoticesFilter_HideMapWarning"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.NoticesFilter_HideMatchInfo", 
            "contents": "NoticesFilter_HideMatchInfo"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.NoticesFilter_HideMatchWarning", 
            "contents": "NoticesFilter_HideMatchWarning"
        }, 
        {
            "trigger": "ENoticeLevel CSmBlockPole.NoticesFilter_LevelToShowAsBigMessage", 
            "contents": "NoticesFilter_LevelToShowAsBigMessage"
        }, 
        {
            "trigger": "Text CSmBlockPole.ScoreTable", 
            "contents": "ScoreTable"
        }, 
        {
            "trigger": "EVisibility CSmBlockPole.ScoreTableVisibility", 
            "contents": "ScoreTableVisibility"
        }, 
        {
            "trigger": "Text CSmBlockPole.SmallScoreTable", 
            "contents": "SmallScoreTable"
        }, 
        {
            "trigger": "EVisibility CSmBlockPole.SmallScoreTableVisibility", 
            "contents": "SmallScoreTableVisibility"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.ScoreTableOnlyManialink", 
            "contents": "ScoreTableOnlyManialink"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.AltMenuNoDefaultScores", 
            "contents": "AltMenuNoDefaultScores"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.AltMenuNoCustomScores", 
            "contents": "AltMenuNoCustomScores"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.OverlayScoreSummary", 
            "contents": "OverlayScoreSummary"
        }, 
        {
            "trigger": "Ident CSmBlockPole.ScoreSummary_Player1", 
            "contents": "ScoreSummary_Player1"
        }, 
        {
            "trigger": "Integer CSmBlockPole.ScoreSummary_Points1", 
            "contents": "ScoreSummary_Points1"
        }, 
        {
            "trigger": "Integer CSmBlockPole.ScoreSummary_RoundPoints1", 
            "contents": "ScoreSummary_RoundPoints1"
        }, 
        {
            "trigger": "Integer CSmBlockPole.ScoreSummary_MatchPoints1", 
            "contents": "ScoreSummary_MatchPoints1"
        }, 
        {
            "trigger": "Real CSmBlockPole.ScoreSummary_Gauge1", 
            "contents": "ScoreSummary_Gauge1"
        }, 
        {
            "trigger": "Ident CSmBlockPole.ScoreSummary_Player2", 
            "contents": "ScoreSummary_Player2"
        }, 
        {
            "trigger": "Integer CSmBlockPole.ScoreSummary_Points2", 
            "contents": "ScoreSummary_Points2"
        }, 
        {
            "trigger": "Integer CSmBlockPole.ScoreSummary_RoundPoints2", 
            "contents": "ScoreSummary_RoundPoints2"
        }, 
        {
            "trigger": "Integer CSmBlockPole.ScoreSummary_MatchPoints2", 
            "contents": "ScoreSummary_MatchPoints2"
        }, 
        {
            "trigger": "Real CSmBlockPole.ScoreSummary_Gauge2", 
            "contents": "ScoreSummary_Gauge2"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.ScreenIn3dHideScoreSummary", 
            "contents": "ScreenIn3dHideScoreSummary"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.ScreenIn3dHideVersus", 
            "contents": "ScreenIn3dHideVersus"
        }, 
        {
            "trigger": "Integer CSmBlockPole.CountdownEndTime", 
            "contents": "CountdownEndTime"
        }, 
        {
            "trigger": "EUIStatus CSmBlockPole.UIStatus", 
            "contents": "UIStatus"
        }, 
        {
            "trigger": "ELabelsVisibility CSmBlockPole.AlliesLabelsVisibility", 
            "contents": "AlliesLabelsVisibility"
        }, 
        {
            "trigger": "EVisibility CSmBlockPole.AlliesLabelsShowGauges", 
            "contents": "AlliesLabelsShowGauges"
        }, 
        {
            "trigger": "EVisibility CSmBlockPole.AlliesLabelsShowNames", 
            "contents": "AlliesLabelsShowNames"
        }, 
        {
            "trigger": "Integer CSmBlockPole.AlliesLabelsMaxCount", 
            "contents": "AlliesLabelsMaxCount"
        }, 
        {
            "trigger": "ELabelsVisibility CSmBlockPole.TeamLabelsVisibility", 
            "contents": "TeamLabelsVisibility"
        }, 
        {
            "trigger": "EVisibility CSmBlockPole.TeamLabelsShowGauges", 
            "contents": "TeamLabelsShowGauges"
        }, 
        {
            "trigger": "EVisibility CSmBlockPole.TeamLabelsShowNames", 
            "contents": "TeamLabelsShowNames"
        }, 
        {
            "trigger": "ELabelsVisibility CSmBlockPole.OpposingTeamLabelsVisibility", 
            "contents": "OpposingTeamLabelsVisibility"
        }, 
        {
            "trigger": "EVisibility CSmBlockPole.OpposingTeamLabelsShowGauges", 
            "contents": "OpposingTeamLabelsShowGauges"
        }, 
        {
            "trigger": "EVisibility CSmBlockPole.OpposingTeamLabelsShowNames", 
            "contents": "OpposingTeamLabelsShowNames"
        }, 
        {
            "trigger": "Boolean CSmBlockPole.ForceSpectator", 
            "contents": "ForceSpectator"
        }, 
        {
            "trigger": "Integer CSmBlockPole.SpectatorForceCameraType", 
            "contents": "SpectatorForceCameraType"
        }, 
        {
            "trigger": "Ident CSmBlockPole.SpectatorAutoTarget", 
            "contents": "SpectatorAutoTarget"
        }, 
        {
            "trigger": "Ident CSmBlockPole.SpectatorForcedTarget", 
            "contents": "SpectatorForcedTarget"
        }, 
        {
            "trigger": "Integer CSmBlockPole.SpectatorForcedClan", 
            "contents": "SpectatorForcedClan"
        }, 
        {
            "trigger": "Real CSmBlockPole.SpectatorCamAutoLatitude", 
            "contents": "SpectatorCamAutoLatitude"
        }, 
        {
            "trigger": "Real CSmBlockPole.SpectatorCamAutoLongitude", 
            "contents": "SpectatorCamAutoLongitude"
        }, 
        {
            "trigger": "Real CSmBlockPole.SpectatorCamAutoRadius", 
            "contents": "SpectatorCamAutoRadius"
        }, 
        {
            "trigger": "EObserverMode CSmBlockPole.SpectatorObserverMode", 
            "contents": "SpectatorObserverMode"
        }, 
        {
            "trigger": "Void CSmBlockPole.SendChat(Text Text)", 
            "contents": "SendChat(${1:Text Text})"
        }, 
        {
            "trigger": "Void CSmBlockPole.SendNotice(Text Text, ENoticeLevel Level, CUser Avatar, EAvatarVariant AvatarVariant, EUISound Sound, Integer SoundVariant)", 
            "contents": "SendNotice(${1:Text Text}, ${2:ENoticeLevel Level}, ${3:CUser Avatar}, ${4:EAvatarVariant AvatarVariant}, ${5:EUISound Sound}, ${6:Integer SoundVariant})"
        }, 
        {
            "trigger": "Text CSmBlockPole.GetLayerManialinkAction(CUILayer Layer)", 
            "contents": "GetLayerManialinkAction(${1:CUILayer Layer})"
        }, 
        {
            "trigger": "Void CSmBlockPole.ClearLayerManialinkAction(CUILayer Layer)", 
            "contents": "ClearLayerManialinkAction(${1:CUILayer Layer})"
        }, 
        {
            "trigger": "CTrackManiaScore", 
            "contents": "CTrackManiaScore"
        }, 
        {
            "trigger": "CTrackManiaScore::ETmRaceResultCriteria::Time", 
            "contents": "CTrackManiaScore::ETmRaceResultCriteria::Time"
        }, 
        {
            "trigger": "CTrackManiaScore::ETmRaceResultCriteria::Stunts", 
            "contents": "CTrackManiaScore::ETmRaceResultCriteria::Stunts"
        }, 
        {
            "trigger": "CTrackManiaScore::ETmRaceResultCriteria::NbRespawns", 
            "contents": "CTrackManiaScore::ETmRaceResultCriteria::NbRespawns"
        }, 
        {
            "trigger": "CTrackManiaScore::ETmRaceResultCriteria::CheckpointsProgress", 
            "contents": "CTrackManiaScore::ETmRaceResultCriteria::CheckpointsProgress"
        }, 
        {
            "trigger": "CTrackManiaScore::ETmRaceResultCriteria::None", 
            "contents": "CTrackManiaScore::ETmRaceResultCriteria::None"
        }, 
        {
            "trigger": "Integer CTrackManiaScore.Time", 
            "contents": "Time"
        }, 
        {
            "trigger": "Integer CTrackManiaScore.StuntsScore", 
            "contents": "StuntsScore"
        }, 
        {
            "trigger": "Integer CTrackManiaScore.NbRespawns", 
            "contents": "NbRespawns"
        }, 
        {
            "trigger": "Integer CTrackManiaScore.Compare(CTmResult Other, ETmRaceResultCriteria Criteria)", 
            "contents": "Compare(${1:CTmResult Other}, ${2:ETmRaceResultCriteria Criteria})"
        }, 
        {
            "trigger": "CXmlNode", 
            "contents": "CXmlNode"
        }, 
        {
            "trigger": "CXmlNode::CardinalDirEnum::North", 
            "contents": "CXmlNode::CardinalDirEnum::North"
        }, 
        {
            "trigger": "CXmlNode::CardinalDirEnum::East", 
            "contents": "CXmlNode::CardinalDirEnum::East"
        }, 
        {
            "trigger": "CXmlNode::CardinalDirEnum::South", 
            "contents": "CXmlNode::CardinalDirEnum::South"
        }, 
        {
            "trigger": "CXmlNode::CardinalDirEnum::West", 
            "contents": "CXmlNode::CardinalDirEnum::West"
        }, 
        {
            "trigger": "CXmlNode::MultiDirEnum::SameDir", 
            "contents": "CXmlNode::MultiDirEnum::SameDir"
        }, 
        {
            "trigger": "CXmlNode::MultiDirEnum::SymmetricalDirs", 
            "contents": "CXmlNode::MultiDirEnum::SymmetricalDirs"
        }, 
        {
            "trigger": "CXmlNode::MultiDirEnum::AllDir", 
            "contents": "CXmlNode::MultiDirEnum::AllDir"
        }, 
        {
            "trigger": "CXmlNode::MultiDirEnum::OpposedDirOnly", 
            "contents": "CXmlNode::MultiDirEnum::OpposedDirOnly"
        }, 
        {
            "trigger": "CXmlNode::MultiDirEnum::PerpendicularDirsOnly", 
            "contents": "CXmlNode::MultiDirEnum::PerpendicularDirsOnly"
        }, 
        {
            "trigger": "CXmlNode::MultiDirEnum::NextDirOnly", 
            "contents": "CXmlNode::MultiDirEnum::NextDirOnly"
        }, 
        {
            "trigger": "CXmlNode::MultiDirEnum::PreviousDirOnly", 
            "contents": "CXmlNode::MultiDirEnum::PreviousDirOnly"
        }, 
        {
            "trigger": "Int3 CXmlNode.Offset", 
            "contents": "Offset"
        }, 
        {
            "trigger": "CXmlRpcEvent", 
            "contents": "CXmlRpcEvent"
        }, 
        {
            "trigger": "CXmlRpcEvent::EType::Unknown", 
            "contents": "CXmlRpcEvent::EType::Unknown"
        }, 
        {
            "trigger": "CXmlRpcEvent::EType::Callback", 
            "contents": "CXmlRpcEvent::EType::Callback"
        }, 
        {
            "trigger": "CXmlRpcEvent::EType::CallbackArray", 
            "contents": "CXmlRpcEvent::EType::CallbackArray"
        }, 
        {
            "trigger": "EType CXmlRpcEvent.Type", 
            "contents": "Type"
        }, 
        {
            "trigger": "Text CXmlRpcEvent.Param1", 
            "contents": "Param1"
        }, 
        {
            "trigger": "Text CXmlRpcEvent.Param2", 
            "contents": "Param2"
        }, 
        {
            "trigger": "Text CXmlRpcEvent.ParamArray1", 
            "contents": "ParamArray1"
        }, 
        {
            "trigger": "CSmBlock", 
            "contents": "CSmBlock"
        }, 
        {
            "trigger": "CSmBlock::EnumClipType::ClassicClip", 
            "contents": "CSmBlock::EnumClipType::ClassicClip"
        }, 
        {
            "trigger": "CSmBlock::EnumClipType::FreeClipSide", 
            "contents": "CSmBlock::EnumClipType::FreeClipSide"
        }, 
        {
            "trigger": "CSmBlock::EnumClipType::FreeClipTop", 
            "contents": "CSmBlock::EnumClipType::FreeClipTop"
        }, 
        {
            "trigger": "CSmBlock::EnumClipType::FreeClipBottom", 
            "contents": "CSmBlock::EnumClipType::FreeClipBottom"
        }, 
        {
            "trigger": "CSmBlock::MultiDirEnum::SameDir", 
            "contents": "CSmBlock::MultiDirEnum::SameDir"
        }, 
        {
            "trigger": "CSmBlock::MultiDirEnum::SymmetricalDirs", 
            "contents": "CSmBlock::MultiDirEnum::SymmetricalDirs"
        }, 
        {
            "trigger": "CSmBlock::MultiDirEnum::AllDir", 
            "contents": "CSmBlock::MultiDirEnum::AllDir"
        }, 
        {
            "trigger": "CSmBlock::MultiDirEnum::OpposedDirOnly", 
            "contents": "CSmBlock::MultiDirEnum::OpposedDirOnly"
        }, 
        {
            "trigger": "CSmBlock::MultiDirEnum::PerpendicularDirsOnly", 
            "contents": "CSmBlock::MultiDirEnum::PerpendicularDirsOnly"
        }, 
        {
            "trigger": "CSmBlock::MultiDirEnum::NextDirOnly", 
            "contents": "CSmBlock::MultiDirEnum::NextDirOnly"
        }, 
        {
            "trigger": "CSmBlock::MultiDirEnum::PreviousDirOnly", 
            "contents": "CSmBlock::MultiDirEnum::PreviousDirOnly"
        }
    ], 
    "scope": "source.ms"
}