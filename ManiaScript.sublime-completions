{
    "completions": [
        {
            "trigger": "Real",
            "contents": "Real"
        },
        {
            "trigger": "Ident",
            "contents": "Ident"
        },
        {
            "trigger": "Vec3",
            "contents": "Vec3"
        },
        {
            "trigger": "Int3",
            "contents": "Int3"
        },
        {
            "trigger": "Void",
            "contents": "Void"
        },
        {
            "trigger": "Text",
            "contents": "Text"
        },
        {
            "trigger": "Boolean",
            "contents": "Boolean"
        },
        {
            "trigger": "Integer",
            "contents": "Integer"
        },
        {
            "trigger": "Vec2",
            "contents": "Vec2"
        },
        {
            "trigger": "CSmBlock",
            "contents": "CSmBlock"
        },
        {
            "trigger": "CSmBase CSmBlock.Base",
            "contents": "Base"
        },
        {
            "trigger": "CSmMapPlayerSpawn",
            "contents": "CSmMapPlayerSpawn"
        },
        {
            "trigger": "CSmMapBotSpawn",
            "contents": "CSmMapBotSpawn"
        },
        {
            "trigger": "Boolean CSmMapBotSpawn.IsFlying",
            "contents": "IsFlying"
        },
        {
            "trigger": "Ident CSmMapBotSpawn.BotModelId",
            "contents": "BotModelId"
        },
        {
            "trigger": "CPlaygroundClient",
            "contents": "CPlaygroundClient"
        },
        {
            "trigger": "CMap CPlaygroundClient.Map",
            "contents": "Map"
        },
        {
            "trigger": "Integer CPlaygroundClient.GameTime",
            "contents": "GameTime"
        },
        {
            "trigger": "CUser CPlaygroundClient.LocalUser",
            "contents": "LocalUser"
        },
        {
            "trigger": "CUIConfig CPlaygroundClient.UI",
            "contents": "UI"
        },
        {
            "trigger": "CServerInfo CPlaygroundClient.ServerInfo",
            "contents": "ServerInfo"
        },
        {
            "trigger": "Boolean CPlaygroundClient.IsSpectator",
            "contents": "IsSpectator"
        },
        {
            "trigger": "Boolean CPlaygroundClient.IsSpectatorClient",
            "contents": "IsSpectatorClient"
        },
        {
            "trigger": "Boolean CPlaygroundClient.UseClans",
            "contents": "UseClans"
        },
        {
            "trigger": "Boolean CPlaygroundClient.UseForcedClans",
            "contents": "UseForcedClans"
        },
        {
            "trigger": "Boolean CPlaygroundClient.IsLoadingScreen",
            "contents": "IsLoadingScreen"
        },
        {
            "trigger": "CTeam[] CPlaygroundClient.Teams",
            "contents": "Teams"
        },
        {
            "trigger": "Boolean CPlaygroundClient.DisablePlayingStateTracking",
            "contents": "DisablePlayingStateTracking"
        },
        {
            "trigger": "Void QuitServer(Boolean Silent)",
            "contents": "QuitServer(${1:Boolean Silent})"
        },
        {
            "trigger": "Void QuitServerAndSetResult(Boolean Silent, Text Type, Text[] Data)",
            "contents": "QuitServerAndSetResult(${1:Boolean Silent}, ${2:Text Type}, ${3:Text[] Data})"
        },
        {
            "trigger": "Void JoinTeam1()",
            "contents": "JoinTeam1()"
        },
        {
            "trigger": "Void JoinTeam2()",
            "contents": "JoinTeam2()"
        },
        {
            "trigger": "Void RequestSpectatorClient(Boolean Spectator)",
            "contents": "RequestSpectatorClient(${1:Boolean Spectator})"
        },
        {
            "trigger": "Void SetSpectateTarget(Text Player)",
            "contents": "SetSpectateTarget(${1:Text Player})"
        },
        {
            "trigger": "Void ShowProfile(Text Player)",
            "contents": "ShowProfile(${1:Text Player})"
        },
        {
            "trigger": "CModulePlaygroundHud",
            "contents": "CModulePlaygroundHud"
        },
        {
            "trigger": "CModulePlaygroundInventory CModulePlaygroundHud.Inventory",
            "contents": "Inventory"
        },
        {
            "trigger": "CModulePlaygroundStore CModulePlaygroundHud.Store",
            "contents": "Store"
        },
        {
            "trigger": "CModulePlaygroundScoresTable CModulePlaygroundHud.ScoresTable",
            "contents": "ScoresTable"
        },
        {
            "trigger": "CMapType",
            "contents": "CMapType"
        },
        {
            "trigger": "CMapType::ValidationStatus::NotValidable",
            "contents": "CMapType::ValidationStatus::NotValidable"
        },
        {
            "trigger": "CMapType::ValidationStatus::Validable",
            "contents": "CMapType::ValidationStatus::Validable"
        },
        {
            "trigger": "CMapType::ValidationStatus::Validated",
            "contents": "CMapType::ValidationStatus::Validated"
        },
        {
            "trigger": "Boolean CMapType.CustomEditAnchorData",
            "contents": "CustomEditAnchorData"
        },
        {
            "trigger": "ValidationStatus CMapType.ValidationStatus",
            "contents": "ValidationStatus"
        },
        {
            "trigger": "Text CMapType.ValidabilityRequirementsMessage",
            "contents": "ValidabilityRequirementsMessage"
        },
        {
            "trigger": "Boolean CMapType.ValidationEndRequested",
            "contents": "ValidationEndRequested"
        },
        {
            "trigger": "Boolean CMapType.ValidationEndNoConfirm",
            "contents": "ValidationEndNoConfirm"
        },
        {
            "trigger": "Boolean CMapType.IsSwitchedToPlayground",
            "contents": "IsSwitchedToPlayground"
        },
        {
            "trigger": "CUIConfigMgr CMapType.UIManager",
            "contents": "UIManager"
        },
        {
            "trigger": "CUser[] CMapType.Users",
            "contents": "Users"
        },
        {
            "trigger": "Void ClearMapMetadata()",
            "contents": "ClearMapMetadata()"
        },
        {
            "trigger": "Void RequestEnterPlayground()",
            "contents": "RequestEnterPlayground()"
        },
        {
            "trigger": "Void RequestLeavePlayground()",
            "contents": "RequestLeavePlayground()"
        },
        {
            "trigger": "CModeTurret",
            "contents": "CModeTurret"
        },
        {
            "trigger": "Integer CModeTurret.Armor",
            "contents": "Armor"
        },
        {
            "trigger": "Integer CModeTurret.ArmorMax",
            "contents": "ArmorMax"
        },
        {
            "trigger": "CModeTurret CModeTurret.Owner",
            "contents": "Owner"
        },
        {
            "trigger": "CInputEvent",
            "contents": "CInputEvent"
        },
        {
            "trigger": "CInputEvent::EType::PadButtonPress",
            "contents": "CInputEvent::EType::PadButtonPress"
        },
        {
            "trigger": "CInputEvent::EButton::Left",
            "contents": "CInputEvent::EButton::Left"
        },
        {
            "trigger": "CInputEvent::EButton::Right",
            "contents": "CInputEvent::EButton::Right"
        },
        {
            "trigger": "CInputEvent::EButton::Up",
            "contents": "CInputEvent::EButton::Up"
        },
        {
            "trigger": "CInputEvent::EButton::Down",
            "contents": "CInputEvent::EButton::Down"
        },
        {
            "trigger": "CInputEvent::EButton::A",
            "contents": "CInputEvent::EButton::A"
        },
        {
            "trigger": "CInputEvent::EButton::B",
            "contents": "CInputEvent::EButton::B"
        },
        {
            "trigger": "CInputEvent::EButton::X",
            "contents": "CInputEvent::EButton::X"
        },
        {
            "trigger": "CInputEvent::EButton::Y",
            "contents": "CInputEvent::EButton::Y"
        },
        {
            "trigger": "CInputEvent::EButton::L1",
            "contents": "CInputEvent::EButton::L1"
        },
        {
            "trigger": "CInputEvent::EButton::R1",
            "contents": "CInputEvent::EButton::R1"
        },
        {
            "trigger": "CInputEvent::EButton::LeftStick",
            "contents": "CInputEvent::EButton::LeftStick"
        },
        {
            "trigger": "CInputEvent::EButton::RightStick",
            "contents": "CInputEvent::EButton::RightStick"
        },
        {
            "trigger": "CInputEvent::EButton::Menu",
            "contents": "CInputEvent::EButton::Menu"
        },
        {
            "trigger": "CInputEvent::EButton::View",
            "contents": "CInputEvent::EButton::View"
        },
        {
            "trigger": "CInputEvent::EButton::LeftStick_Left",
            "contents": "CInputEvent::EButton::LeftStick_Left"
        },
        {
            "trigger": "CInputEvent::EButton::LeftStick_Right",
            "contents": "CInputEvent::EButton::LeftStick_Right"
        },
        {
            "trigger": "CInputEvent::EButton::LeftStick_Up",
            "contents": "CInputEvent::EButton::LeftStick_Up"
        },
        {
            "trigger": "CInputEvent::EButton::LeftStick_Down",
            "contents": "CInputEvent::EButton::LeftStick_Down"
        },
        {
            "trigger": "CInputEvent::EButton::RightStick_Left",
            "contents": "CInputEvent::EButton::RightStick_Left"
        },
        {
            "trigger": "CInputEvent::EButton::RightStick_Right",
            "contents": "CInputEvent::EButton::RightStick_Right"
        },
        {
            "trigger": "CInputEvent::EButton::RightStick_Up",
            "contents": "CInputEvent::EButton::RightStick_Up"
        },
        {
            "trigger": "CInputEvent::EButton::RightStick_Down",
            "contents": "CInputEvent::EButton::RightStick_Down"
        },
        {
            "trigger": "CInputEvent::EButton::L2",
            "contents": "CInputEvent::EButton::L2"
        },
        {
            "trigger": "CInputEvent::EButton::R2",
            "contents": "CInputEvent::EButton::R2"
        },
        {
            "trigger": "CInputEvent::EButton::None",
            "contents": "CInputEvent::EButton::None"
        },
        {
            "trigger": "EType CInputEvent.Type",
            "contents": "Type"
        },
        {
            "trigger": "CInputPad CInputEvent.Pad",
            "contents": "Pad"
        },
        {
            "trigger": "EButton CInputEvent.Button",
            "contents": "Button"
        },
        {
            "trigger": "Boolean CInputEvent.IsAutoRepeat",
            "contents": "IsAutoRepeat"
        },
        {
            "trigger": "Integer CInputEvent.KeyCode",
            "contents": "KeyCode"
        },
        {
            "trigger": "Text CInputEvent.KeyName",
            "contents": "KeyName"
        },
        {
            "trigger": "CMlTextEdit",
            "contents": "CMlTextEdit"
        },
        {
            "trigger": "CMlTextEdit::EControlScriptEditorTextFormat::Basic",
            "contents": "CMlTextEdit::EControlScriptEditorTextFormat::Basic"
        },
        {
            "trigger": "CMlTextEdit::EControlScriptEditorTextFormat::Script",
            "contents": "CMlTextEdit::EControlScriptEditorTextFormat::Script"
        },
        {
            "trigger": "CMlTextEdit::EControlScriptEditorTextFormat::Password",
            "contents": "CMlTextEdit::EControlScriptEditorTextFormat::Password"
        },
        {
            "trigger": "CMlTextEdit::EControlScriptEditorTextFormat::Newpassword",
            "contents": "CMlTextEdit::EControlScriptEditorTextFormat::Newpassword"
        },
        {
            "trigger": "Text CMlTextEdit.Value",
            "contents": "Value"
        },
        {
            "trigger": "Integer CMlTextEdit.MaxLine",
            "contents": "MaxLine"
        },
        {
            "trigger": "Boolean CMlTextEdit.AutoNewLine",
            "contents": "AutoNewLine"
        },
        {
            "trigger": "Boolean CMlTextEdit.ShowLineNumbers",
            "contents": "ShowLineNumbers"
        },
        {
            "trigger": "Real CMlTextEdit.LineSpacing",
            "contents": "LineSpacing"
        },
        {
            "trigger": "Integer CMlTextEdit.ValueLineCount",
            "contents": "ValueLineCount"
        },
        {
            "trigger": "Real CMlTextEdit.Opacity",
            "contents": "Opacity"
        },
        {
            "trigger": "Vec3 CMlTextEdit.TextColor",
            "contents": "TextColor"
        },
        {
            "trigger": "Real CMlTextEdit.TextSizeReal",
            "contents": "TextSizeReal"
        },
        {
            "trigger": "EControlScriptEditorTextFormat CMlTextEdit.TextFormat",
            "contents": "TextFormat"
        },
        {
            "trigger": "Void StartEdition()",
            "contents": "StartEdition()"
        },
        {
            "trigger": "CManiaAppTitle",
            "contents": "CManiaAppTitle"
        },
        {
            "trigger": "CManiaAppEvent[] CManiaAppTitle.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "Boolean CManiaAppTitle.LoadingScreenRequireKeyPressed",
            "contents": "LoadingScreenRequireKeyPressed"
        },
        {
            "trigger": "Boolean CManiaAppTitle.DontScaleMainMenuForHMD",
            "contents": "DontScaleMainMenuForHMD"
        },
        {
            "trigger": "CTitleFlow CManiaAppTitle.TitleFlow",
            "contents": "TitleFlow"
        },
        {
            "trigger": "CTitleFlow CManiaAppTitle.TitleControl",
            "contents": "TitleControl"
        },
        {
            "trigger": "CTitleEdition CManiaAppTitle.TitleEdition",
            "contents": "TitleEdition"
        },
        {
            "trigger": "CNotificationsConsumer CManiaAppTitle.Notifications",
            "contents": "Notifications"
        },
        {
            "trigger": "Text CManiaAppTitle.ExternalRequest_Type",
            "contents": "ExternalRequest_Type"
        },
        {
            "trigger": "Text[] CManiaAppTitle.ExternalRequest_Data",
            "contents": "ExternalRequest_Data"
        },
        {
            "trigger": "CAchievementsManager CManiaAppTitle.AchievementsManager",
            "contents": "AchievementsManager"
        },
        {
            "trigger": "CBadgeManager CManiaAppTitle.BadgeManager",
            "contents": "BadgeManager"
        },
        {
            "trigger": "Boolean CManiaAppTitle.Authentication_GetTokenResponseReceived",
            "contents": "Authentication_GetTokenResponseReceived"
        },
        {
            "trigger": "Integer CManiaAppTitle.Authentication_ErrorCode",
            "contents": "Authentication_ErrorCode"
        },
        {
            "trigger": "Text CManiaAppTitle.Authentication_Token",
            "contents": "Authentication_Token"
        },
        {
            "trigger": "Void Menu_Quit()",
            "contents": "Menu_Quit()"
        },
        {
            "trigger": "Void Menu_Home()",
            "contents": "Menu_Home()"
        },
        {
            "trigger": "Void Menu_Solo()",
            "contents": "Menu_Solo()"
        },
        {
            "trigger": "Void Menu_Local()",
            "contents": "Menu_Local()"
        },
        {
            "trigger": "Void Menu_Internet()",
            "contents": "Menu_Internet()"
        },
        {
            "trigger": "Void Menu_Editor()",
            "contents": "Menu_Editor()"
        },
        {
            "trigger": "Void Menu_Profile()",
            "contents": "Menu_Profile()"
        },
        {
            "trigger": "Void PlayMap(Text Map)",
            "contents": "PlayMap(${1:Text Map})"
        },
        {
            "trigger": "Void ExternalRequest_Clear()",
            "contents": "ExternalRequest_Clear()"
        },
        {
            "trigger": "Void Authentication_GetToken(Ident UserId, Text AppLogin)",
            "contents": "Authentication_GetToken(${1:Ident UserId}, ${2:Text AppLogin})"
        },
        {
            "trigger": "CSmPlayerDriver",
            "contents": "CSmPlayerDriver"
        },
        {
            "trigger": "CSmPlayerDriver::ESmDriverBehaviour::Static",
            "contents": "CSmPlayerDriver::ESmDriverBehaviour::Static"
        },
        {
            "trigger": "CSmPlayerDriver::ESmDriverBehaviour::Turret",
            "contents": "CSmPlayerDriver::ESmDriverBehaviour::Turret"
        },
        {
            "trigger": "CSmPlayerDriver::ESmDriverBehaviour::Scripted",
            "contents": "CSmPlayerDriver::ESmDriverBehaviour::Scripted"
        },
        {
            "trigger": "CSmPlayerDriver::ESmDriverBehaviour::IA",
            "contents": "CSmPlayerDriver::ESmDriverBehaviour::IA"
        },
        {
            "trigger": "CSmPlayerDriver::ESmDriverBehaviour::Patrol",
            "contents": "CSmPlayerDriver::ESmDriverBehaviour::Patrol"
        },
        {
            "trigger": "CSmPlayerDriver::ESmDriverBehaviour::Escape",
            "contents": "CSmPlayerDriver::ESmDriverBehaviour::Escape"
        },
        {
            "trigger": "CSmPlayerDriver::ESmDriverBehaviour::Saunter",
            "contents": "CSmPlayerDriver::ESmDriverBehaviour::Saunter"
        },
        {
            "trigger": "CSmPlayerDriver::ESmDriverPatrolMode::OneTrip",
            "contents": "CSmPlayerDriver::ESmDriverPatrolMode::OneTrip"
        },
        {
            "trigger": "CSmPlayerDriver::ESmDriverPatrolMode::BackAndForth",
            "contents": "CSmPlayerDriver::ESmDriverPatrolMode::BackAndForth"
        },
        {
            "trigger": "CSmPlayerDriver::ESmDriverPatrolMode::Loop",
            "contents": "CSmPlayerDriver::ESmDriverPatrolMode::Loop"
        },
        {
            "trigger": "CSmPlayerDriver::ESmAttackFilter::All",
            "contents": "CSmPlayerDriver::ESmAttackFilter::All"
        },
        {
            "trigger": "CSmPlayerDriver::ESmAttackFilter::AllPlayers",
            "contents": "CSmPlayerDriver::ESmAttackFilter::AllPlayers"
        },
        {
            "trigger": "CSmPlayerDriver::ESmAttackFilter::AllBots",
            "contents": "CSmPlayerDriver::ESmAttackFilter::AllBots"
        },
        {
            "trigger": "CSmPlayerDriver::ESmAttackFilter::AllOpposite",
            "contents": "CSmPlayerDriver::ESmAttackFilter::AllOpposite"
        },
        {
            "trigger": "CSmPlayerDriver::ESmAttackFilter::OppositePlayers",
            "contents": "CSmPlayerDriver::ESmAttackFilter::OppositePlayers"
        },
        {
            "trigger": "CSmPlayerDriver::ESmAttackFilter::OppositeBots",
            "contents": "CSmPlayerDriver::ESmAttackFilter::OppositeBots"
        },
        {
            "trigger": "CSmPlayerDriver::ESmAttackFilter::Nobody",
            "contents": "CSmPlayerDriver::ESmAttackFilter::Nobody"
        },
        {
            "trigger": "ESmDriverBehaviour CSmPlayerDriver.Behaviour",
            "contents": "Behaviour"
        },
        {
            "trigger": "Real CSmPlayerDriver.AggroRadius",
            "contents": "AggroRadius"
        },
        {
            "trigger": "Real CSmPlayerDriver.ShootRadius",
            "contents": "ShootRadius"
        },
        {
            "trigger": "Real CSmPlayerDriver.TargetMinDistance",
            "contents": "TargetMinDistance"
        },
        {
            "trigger": "Real CSmPlayerDriver.DisengageDistance",
            "contents": "DisengageDistance"
        },
        {
            "trigger": "Real CSmPlayerDriver.PathSpeedCoef",
            "contents": "PathSpeedCoef"
        },
        {
            "trigger": "Real CSmPlayerDriver.Accuracy",
            "contents": "Accuracy"
        },
        {
            "trigger": "Integer CSmPlayerDriver.ReactionTime",
            "contents": "ReactionTime"
        },
        {
            "trigger": "Integer CSmPlayerDriver.ShootPeriodMin",
            "contents": "ShootPeriodMin"
        },
        {
            "trigger": "Integer CSmPlayerDriver.ShootPeriodMax",
            "contents": "ShootPeriodMax"
        },
        {
            "trigger": "Boolean CSmPlayerDriver.RocketAnticipation",
            "contents": "RocketAnticipation"
        },
        {
            "trigger": "Real CSmPlayerDriver.Fov",
            "contents": "Fov"
        },
        {
            "trigger": "ESmAttackFilter CSmPlayerDriver.AttackFilter",
            "contents": "AttackFilter"
        },
        {
            "trigger": "CSmPlayer CSmPlayerDriver.Target",
            "contents": "Target"
        },
        {
            "trigger": "Boolean CSmPlayerDriver.IsStuck",
            "contents": "IsStuck"
        },
        {
            "trigger": "Boolean CSmPlayerDriver.IsFlying",
            "contents": "IsFlying"
        },
        {
            "trigger": "CSmPlayer CSmPlayerDriver.Owner",
            "contents": "Owner"
        },
        {
            "trigger": "Integer CSmPlayerDriver.PathOffset",
            "contents": "PathOffset"
        },
        {
            "trigger": "Real CSmPlayerDriver.Agressivity",
            "contents": "Agressivity"
        },
        {
            "trigger": "Boolean CSmPlayerDriver.UseOldShootingSystem",
            "contents": "UseOldShootingSystem"
        },
        {
            "trigger": "ESmDriverPatrolMode CSmPlayerDriver.Patrol_Mode",
            "contents": "Patrol_Mode"
        },
        {
            "trigger": "Vec3 CSmPlayerDriver.Escape_AnchorPoint",
            "contents": "Escape_AnchorPoint"
        },
        {
            "trigger": "Real CSmPlayerDriver.Escape_DistanceSafe",
            "contents": "Escape_DistanceSafe"
        },
        {
            "trigger": "Real CSmPlayerDriver.Escape_DistanceMinEscape",
            "contents": "Escape_DistanceMinEscape"
        },
        {
            "trigger": "Real CSmPlayerDriver.Escape_DistanceMaxEscape",
            "contents": "Escape_DistanceMaxEscape"
        },
        {
            "trigger": "Vec3 CSmPlayerDriver.Saunter_AnchorPoint",
            "contents": "Saunter_AnchorPoint"
        },
        {
            "trigger": "Integer CSmPlayerDriver.Saunter_BaseChillingTime",
            "contents": "Saunter_BaseChillingTime"
        },
        {
            "trigger": "Integer CSmPlayerDriver.Saunter_ChillingTimeDelta",
            "contents": "Saunter_ChillingTimeDelta"
        },
        {
            "trigger": "Real CSmPlayerDriver.Saunter_Radius",
            "contents": "Saunter_Radius"
        },
        {
            "trigger": "Boolean CSmPlayerDriver.Scripted_ForceAimInMoveDir",
            "contents": "Scripted_ForceAimInMoveDir"
        },
        {
            "trigger": "CSmPlayer CSmPlayerDriver.ForcedTarget",
            "contents": "ForcedTarget"
        },
        {
            "trigger": "CSmPlayer[] CSmPlayerDriver.TargetsToAvoid",
            "contents": "TargetsToAvoid"
        },
        {
            "trigger": "CModuleMenuLayer",
            "contents": "CModuleMenuLayer"
        },
        {
            "trigger": "CModuleMenuComponent[] CModuleMenuLayer.Components",
            "contents": "Components"
        },
        {
            "trigger": "CModuleMenuComponent GetFirstComponent(Text Name)",
            "contents": "GetFirstComponent(${1:Text Name})"
        },
        {
            "trigger": "CHighScoreComparisonSummary",
            "contents": "CHighScoreComparisonSummary"
        },
        {
            "trigger": "Text CHighScoreComparisonSummary.Login",
            "contents": "Login"
        },
        {
            "trigger": "Integer CHighScoreComparisonSummary.BestRecordCount",
            "contents": "BestRecordCount"
        },
        {
            "trigger": "Integer CHighScoreComparisonSummary.BestRecordLastDate",
            "contents": "BestRecordLastDate"
        },
        {
            "trigger": "Text CHighScoreComparisonSummary.BestRecordLastDateString",
            "contents": "BestRecordLastDateString"
        },
        {
            "trigger": "Integer CHighScoreComparisonSummary.BestRecordElapsedTime",
            "contents": "BestRecordElapsedTime"
        },
        {
            "trigger": "Text CHighScoreComparisonSummary.OpponentLogin",
            "contents": "OpponentLogin"
        },
        {
            "trigger": "Text CHighScoreComparisonSummary.OpponentDisplayName",
            "contents": "OpponentDisplayName"
        },
        {
            "trigger": "Integer CHighScoreComparisonSummary.OpponentBestRecordCount",
            "contents": "OpponentBestRecordCount"
        },
        {
            "trigger": "Integer CHighScoreComparisonSummary.OpponentBestRecordLastDate",
            "contents": "OpponentBestRecordLastDate"
        },
        {
            "trigger": "Text CHighScoreComparisonSummary.OpponentBestRecordLastDateString",
            "contents": "OpponentBestRecordLastDateString"
        },
        {
            "trigger": "Integer CHighScoreComparisonSummary.OpponentBestRecordElapsedTime",
            "contents": "OpponentBestRecordElapsedTime"
        },
        {
            "trigger": "CSmSector",
            "contents": "CSmSector"
        },
        {
            "trigger": "Ident[] CSmSector.PlayersIds",
            "contents": "PlayersIds"
        },
        {
            "trigger": "CEditorPluginModuleEvent",
            "contents": "CEditorPluginModuleEvent"
        },
        {
            "trigger": "CEditorPluginModuleEvent::Type::LayerCustomEvent",
            "contents": "CEditorPluginModuleEvent::Type::LayerCustomEvent"
        },
        {
            "trigger": "CEditorPluginModuleEvent::Type::KeyPress",
            "contents": "CEditorPluginModuleEvent::Type::KeyPress"
        },
        {
            "trigger": "CEditorPluginModuleEvent::Type::MenuNavigation",
            "contents": "CEditorPluginModuleEvent::Type::MenuNavigation"
        },
        {
            "trigger": "CEditorPluginModuleEvent::Type::Exit",
            "contents": "CEditorPluginModuleEvent::Type::Exit"
        },
        {
            "trigger": "CEditorPluginModuleEvent::Type::FileNew",
            "contents": "CEditorPluginModuleEvent::Type::FileNew"
        },
        {
            "trigger": "CEditorPluginModuleEvent::Type::FileOpen",
            "contents": "CEditorPluginModuleEvent::Type::FileOpen"
        },
        {
            "trigger": "CEditorPluginModuleEvent::Type::FileSave",
            "contents": "CEditorPluginModuleEvent::Type::FileSave"
        },
        {
            "trigger": "CEditorPluginModuleEvent::Type::FileSaveAs",
            "contents": "CEditorPluginModuleEvent::Type::FileSaveAs"
        },
        {
            "trigger": "Type CEditorPluginModuleEvent.Type",
            "contents": "Type"
        },
        {
            "trigger": "Void Eat()",
            "contents": "Eat()"
        },
        {
            "trigger": "CNod",
            "contents": "CNod"
        },
        {
            "trigger": "Ident CNod.Id",
            "contents": "Id"
        },
        {
            "trigger": "CTitleFlow",
            "contents": "CTitleFlow"
        },
        {
            "trigger": "CTitleFlow::ESplitScreenLayout::Horizontal",
            "contents": "CTitleFlow::ESplitScreenLayout::Horizontal"
        },
        {
            "trigger": "CTitleFlow::ESplitScreenLayout::Vertical",
            "contents": "CTitleFlow::ESplitScreenLayout::Vertical"
        },
        {
            "trigger": "CTitleFlow::ESplitScreenLayout::Four",
            "contents": "CTitleFlow::ESplitScreenLayout::Four"
        },
        {
            "trigger": "CTitleFlow::EResult::Success",
            "contents": "CTitleFlow::EResult::Success"
        },
        {
            "trigger": "CTitleFlow::EResult::Error_Internal",
            "contents": "CTitleFlow::EResult::Error_Internal"
        },
        {
            "trigger": "CTitleFlow::EResult::Error_DataMgr",
            "contents": "CTitleFlow::EResult::Error_DataMgr"
        },
        {
            "trigger": "CTitleFlow::EResult::Error_Net_ServerNotFound",
            "contents": "CTitleFlow::EResult::Error_Net_ServerNotFound"
        },
        {
            "trigger": "CTitleFlow::EResult::Error_Net_ServerUnreachable",
            "contents": "CTitleFlow::EResult::Error_Net_ServerUnreachable"
        },
        {
            "trigger": "CTitleFlow::EResult::Error_Net_Disconnected",
            "contents": "CTitleFlow::EResult::Error_Net_Disconnected"
        },
        {
            "trigger": "CTitleFlow::EResult::Error_Net_WrongPassword",
            "contents": "CTitleFlow::EResult::Error_Net_WrongPassword"
        },
        {
            "trigger": "CTitleFlow::EResult::Error_Network_OnlineExpired",
            "contents": "CTitleFlow::EResult::Error_Network_OnlineExpired"
        },
        {
            "trigger": "CTitleFlow::EResult::Error_Network_ServerFull",
            "contents": "CTitleFlow::EResult::Error_Network_ServerFull"
        },
        {
            "trigger": "CTitleFlow::EEditorType::ActionMaker",
            "contents": "CTitleFlow::EEditorType::ActionMaker"
        },
        {
            "trigger": "CTitleFlow::EEditorType::ChallengeEditor",
            "contents": "CTitleFlow::EEditorType::ChallengeEditor"
        },
        {
            "trigger": "CTitleFlow::EEditorType::ItemEditor",
            "contents": "CTitleFlow::EEditorType::ItemEditor"
        },
        {
            "trigger": "CTitleFlow::EEditorType::InterfaceDesigner",
            "contents": "CTitleFlow::EEditorType::InterfaceDesigner"
        },
        {
            "trigger": "CTitleFlow::EEditorType::MeshModeler",
            "contents": "CTitleFlow::EEditorType::MeshModeler"
        },
        {
            "trigger": "CTitleFlow::EEditorType::ModuleStudio",
            "contents": "CTitleFlow::EEditorType::ModuleStudio"
        },
        {
            "trigger": "CTitleFlow::EEditorType::PixelArt",
            "contents": "CTitleFlow::EEditorType::PixelArt"
        },
        {
            "trigger": "CTitleFlow::EEditorType::EditorEditor",
            "contents": "CTitleFlow::EEditorType::EditorEditor"
        },
        {
            "trigger": "Boolean CTitleFlow.IsReady",
            "contents": "IsReady"
        },
        {
            "trigger": "EResult CTitleFlow.LatestResult",
            "contents": "LatestResult"
        },
        {
            "trigger": "Text CTitleFlow.CustomResultType",
            "contents": "CustomResultType"
        },
        {
            "trigger": "Text[] CTitleFlow.CustomResultData",
            "contents": "CustomResultData"
        },
        {
            "trigger": "CServerInfo[] CTitleFlow.LocalServers",
            "contents": "LocalServers"
        },
        {
            "trigger": "CServerInfo CTitleFlow.JoinServer_ServerInfo",
            "contents": "JoinServer_ServerInfo"
        },
        {
            "trigger": "Void PlayMap(Text Map, Text Mode, Text SettingsXml)",
            "contents": "PlayMap(${1:Text Map}, ${2:Text Mode}, ${3:Text SettingsXml})"
        },
        {
            "trigger": "Void PlayCampaign(CCampaign Campaign, CMapInfo MapInfo, Text Mode, Text SettingsXml)",
            "contents": "PlayCampaign(${1:CCampaign Campaign}, ${2:CMapInfo MapInfo}, ${3:Text Mode}, ${4:Text SettingsXml})"
        },
        {
            "trigger": "Void PlayMapList(Text[] MapList, Text Mode, Text SettingsXml)",
            "contents": "PlayMapList(${1:Text[] MapList}, ${2:Text Mode}, ${3:Text SettingsXml})"
        },
        {
            "trigger": "Void PlayPlaylist(Text Playlist, Text OverrideMode, Text OverrideSettingsXml)",
            "contents": "PlayPlaylist(${1:Text Playlist}, ${2:Text OverrideMode}, ${3:Text OverrideSettingsXml})"
        },
        {
            "trigger": "Void PlaySplitScreen(ESplitScreenLayout LayoutType, Text[] MapList, Text Mode, Text SettingsXml)",
            "contents": "PlaySplitScreen(${1:ESplitScreenLayout LayoutType}, ${2:Text[] MapList}, ${3:Text Mode}, ${4:Text SettingsXml})"
        },
        {
            "trigger": "Void PlayMultiOnSameScreen(ESplitScreenLayout LayoutType, Text[] MapList, Text Mode, Text SettingsXml)",
            "contents": "PlayMultiOnSameScreen(${1:ESplitScreenLayout LayoutType}, ${2:Text[] MapList}, ${3:Text Mode}, ${4:Text SettingsXml})"
        },
        {
            "trigger": "Void ViewReplay(Text Replay)",
            "contents": "ViewReplay(${1:Text Replay})"
        },
        {
            "trigger": "Void OpenEditor(Text EditorName, Text MainPluginSettings)",
            "contents": "OpenEditor(${1:Text EditorName}, ${2:Text MainPluginSettings})"
        },
        {
            "trigger": "Void OpenEditor(EEditorType EditorType)",
            "contents": "OpenEditor(${1:EEditorType EditorType})"
        },
        {
            "trigger": "Void EditSkins()",
            "contents": "EditSkins()"
        },
        {
            "trigger": "Void EditReplay(Text[] ReplayList)",
            "contents": "EditReplay(${1:Text[] ReplayList})"
        },
        {
            "trigger": "Void EditGhosts(Text Map)",
            "contents": "EditGhosts(${1:Text Map})"
        },
        {
            "trigger": "Void EditAsset(Text EditorName, Text MainPluginSettingsXml, Text RelativeFileName)",
            "contents": "EditAsset(${1:Text EditorName}, ${2:Text MainPluginSettingsXml}, ${3:Text RelativeFileName})"
        },
        {
            "trigger": "Void EditMap(Text Map, Text EditorPluginScript, Text EditorPluginArgument)",
            "contents": "EditMap(${1:Text Map}, ${2:Text EditorPluginScript}, ${3:Text EditorPluginArgument})"
        },
        {
            "trigger": "Void EditNewMap(Text Environment, Text Decoration, Text ModUrl, Text PlayerModel, Text MapType, Text EditorPluginScript, Text EditorPluginArgument)",
            "contents": "EditNewMap(${1:Text Environment}, ${2:Text Decoration}, ${3:Text ModUrl}, ${4:Text PlayerModel}, ${5:Text MapType}, ${6:Text EditorPluginScript}, ${7:Text EditorPluginArgument})"
        },
        {
            "trigger": "Void EditNewMap(Text Environment, Text Decoration, Text ModUrl, Text PlayerModel, Text MapType, Boolean UseSimpleEditor, Text EditorPluginScript, Text EditorPluginArgument)",
            "contents": "EditNewMap(${1:Text Environment}, ${2:Text Decoration}, ${3:Text ModUrl}, ${4:Text PlayerModel}, ${5:Text MapType}, ${6:Boolean UseSimpleEditor}, ${7:Text EditorPluginScript}, ${8:Text EditorPluginArgument})"
        },
        {
            "trigger": "Void EditBadges()",
            "contents": "EditBadges()"
        },
        {
            "trigger": "Void DiscoverLocalServers()",
            "contents": "DiscoverLocalServers()"
        },
        {
            "trigger": "Void CreateServer(Text ServerName, Text ServerComment, Integer MaxPlayerCount, Text Password, Text PasswordSpectators, Text[] MapList, Text Mode, Text ScriptsSettingsXml)",
            "contents": "CreateServer(${1:Text ServerName}, ${2:Text ServerComment}, ${3:Integer MaxPlayerCount}, ${4:Text Password}, ${5:Text PasswordSpectators}, ${6:Text[] MapList}, ${7:Text Mode}, ${8:Text ScriptsSettingsXml})"
        },
        {
            "trigger": "Void CreateServer(Text ServerName, Text ServerComment, Integer MaxPlayerCount, Text Password, Text PasswordSpectators, Text MatchSettingsFileName)",
            "contents": "CreateServer(${1:Text ServerName}, ${2:Text ServerComment}, ${3:Integer MaxPlayerCount}, ${4:Text Password}, ${5:Text PasswordSpectators}, ${6:Text MatchSettingsFileName})"
        },
        {
            "trigger": "Void JoinServer_GetInfo(Text ServerLogin)",
            "contents": "JoinServer_GetInfo(${1:Text ServerLogin})"
        },
        {
            "trigger": "Void JoinServer_GetInfo(Text ServerLogin, Text ServerPassword)",
            "contents": "JoinServer_GetInfo(${1:Text ServerLogin}, ${2:Text ServerPassword})"
        },
        {
            "trigger": "Void JoinServer_GetInfo(CServerInfo Server)",
            "contents": "JoinServer_GetInfo(${1:CServerInfo Server})"
        },
        {
            "trigger": "Void JoinServer_GetInfo(CServerInfo Server, Text ServerPassword)",
            "contents": "JoinServer_GetInfo(${1:CServerInfo Server}, ${2:Text ServerPassword})"
        },
        {
            "trigger": "Void JoinServer_Join(Boolean AsSpectator)",
            "contents": "JoinServer_Join(${1:Boolean AsSpectator})"
        },
        {
            "trigger": "Void JoinServer_Abort()",
            "contents": "JoinServer_Abort()"
        },
        {
            "trigger": "Void Quit()",
            "contents": "Quit()"
        },
        {
            "trigger": "CModuleMenuFileBrowser",
            "contents": "CModuleMenuFileBrowser"
        },
        {
            "trigger": "CModuleMenuFileBrowser::EFileType::Maps",
            "contents": "CModuleMenuFileBrowser::EFileType::Maps"
        },
        {
            "trigger": "CModuleMenuFileBrowser::EFileType::Skins",
            "contents": "CModuleMenuFileBrowser::EFileType::Skins"
        },
        {
            "trigger": "CModuleMenuFileBrowser::EFileType::Items",
            "contents": "CModuleMenuFileBrowser::EFileType::Items"
        },
        {
            "trigger": "CModuleMenuFileBrowser::EFileType::Blocks",
            "contents": "CModuleMenuFileBrowser::EFileType::Blocks"
        },
        {
            "trigger": "CModuleMenuFileBrowser::EFileType::Scripts",
            "contents": "CModuleMenuFileBrowser::EFileType::Scripts"
        },
        {
            "trigger": "CModuleMenuFileBrowser::EFileType::Images",
            "contents": "CModuleMenuFileBrowser::EFileType::Images"
        },
        {
            "trigger": "CModuleMenuFileBrowser::EFileType::Manialinks",
            "contents": "CModuleMenuFileBrowser::EFileType::Manialinks"
        },
        {
            "trigger": "CModuleMenuFileBrowser::EFileType::Packs",
            "contents": "CModuleMenuFileBrowser::EFileType::Packs"
        },
        {
            "trigger": "CModuleMenuFileBrowser::EFileType::Actions",
            "contents": "CModuleMenuFileBrowser::EFileType::Actions"
        },
        {
            "trigger": "CModuleMenuFileBrowser::EFileType::Modules",
            "contents": "CModuleMenuFileBrowser::EFileType::Modules"
        },
        {
            "trigger": "CModuleMenuFileBrowser::EFileType::Meshes",
            "contents": "CModuleMenuFileBrowser::EFileType::Meshes"
        },
        {
            "trigger": "CModuleMenuFileBrowser::EFileType::Replays",
            "contents": "CModuleMenuFileBrowser::EFileType::Replays"
        },
        {
            "trigger": "CModuleMenuFileBrowser::EFileAction::Select",
            "contents": "CModuleMenuFileBrowser::EFileAction::Select"
        },
        {
            "trigger": "CModuleMenuFileBrowser::EFileAction::Save",
            "contents": "CModuleMenuFileBrowser::EFileAction::Save"
        },
        {
            "trigger": "CModuleMenuFileBrowser::EFileAction::MultiSelect",
            "contents": "CModuleMenuFileBrowser::EFileAction::MultiSelect"
        },
        {
            "trigger": "Boolean CModuleMenuFileBrowser.HasFinished",
            "contents": "HasFinished"
        },
        {
            "trigger": "Text[] CModuleMenuFileBrowser.Selection",
            "contents": "Selection"
        },
        {
            "trigger": "Void SetFileType(EFileType FileType)",
            "contents": "SetFileType(${1:EFileType FileType})"
        },
        {
            "trigger": "Void SetFileAction(EFileAction FileAction)",
            "contents": "SetFileAction(${1:EFileAction FileAction})"
        },
        {
            "trigger": "CSmObject",
            "contents": "CSmObject"
        },
        {
            "trigger": "CSmObject::EStatus::OnPlayer",
            "contents": "CSmObject::EStatus::OnPlayer"
        },
        {
            "trigger": "CSmObject::EStatus::OnAnchor",
            "contents": "CSmObject::EStatus::OnAnchor"
        },
        {
            "trigger": "CSmObject::EStatus::InWorld",
            "contents": "CSmObject::EStatus::InWorld"
        },
        {
            "trigger": "CSmObject::EStatus::Unspawned",
            "contents": "CSmObject::EStatus::Unspawned"
        },
        {
            "trigger": "EStatus CSmObject.Status",
            "contents": "Status"
        },
        {
            "trigger": "Ident CSmObject.ModelId",
            "contents": "ModelId"
        },
        {
            "trigger": "CSmPlayer CSmObject.Player",
            "contents": "Player"
        },
        {
            "trigger": "CSmMapLandmark CSmObject.AnchorLandmark",
            "contents": "AnchorLandmark"
        },
        {
            "trigger": "Vec3 CSmObject.Position",
            "contents": "Position"
        },
        {
            "trigger": "Vec3 CSmObject.Vel",
            "contents": "Vel"
        },
        {
            "trigger": "Integer CSmObject.MachineState",
            "contents": "MachineState"
        },
        {
            "trigger": "Boolean CSmObject.Throwable",
            "contents": "Throwable"
        },
        {
            "trigger": "Void SetAnchor(CSmMapObjectAnchor ObjectAnchor)",
            "contents": "SetAnchor(${1:CSmMapObjectAnchor ObjectAnchor})"
        },
        {
            "trigger": "Void SetPlayer(CSmPlayer Player)",
            "contents": "SetPlayer(${1:CSmPlayer Player})"
        },
        {
            "trigger": "Void SetPosition(Vec3 Position)",
            "contents": "SetPosition(${1:Vec3 Position})"
        },
        {
            "trigger": "Void SetPositionAndVel(Vec3 Position, Vec3 Vel)",
            "contents": "SetPositionAndVel(${1:Vec3 Position}, ${2:Vec3 Vel})"
        },
        {
            "trigger": "Void SetUnspawned()",
            "contents": "SetUnspawned()"
        },
        {
            "trigger": "CMlGraphCurve",
            "contents": "CMlGraphCurve"
        },
        {
            "trigger": "Vec2[] CMlGraphCurve.Points",
            "contents": "Points"
        },
        {
            "trigger": "Vec3 CMlGraphCurve.Color",
            "contents": "Color"
        },
        {
            "trigger": "Text CMlGraphCurve.Style",
            "contents": "Style"
        },
        {
            "trigger": "Real CMlGraphCurve.Width",
            "contents": "Width"
        },
        {
            "trigger": "Void SortPoints()",
            "contents": "SortPoints()"
        },
        {
            "trigger": "CModuleMenuComponent",
            "contents": "CModuleMenuComponent"
        },
        {
            "trigger": "CUILayer CModuleMenuComponent.ComponentLayer",
            "contents": "ComponentLayer"
        },
        {
            "trigger": "Void Hide()",
            "contents": "Hide()"
        },
        {
            "trigger": "Void Show()",
            "contents": "Show()"
        },
        {
            "trigger": "CSmMapBotPath",
            "contents": "CSmMapBotPath"
        },
        {
            "trigger": "Integer CSmMapBotPath.Clan",
            "contents": "Clan"
        },
        {
            "trigger": "Vec3[] CSmMapBotPath.Path",
            "contents": "Path"
        },
        {
            "trigger": "Boolean CSmMapBotPath.IsFlying",
            "contents": "IsFlying"
        },
        {
            "trigger": "CHttpManager",
            "contents": "CHttpManager"
        },
        {
            "trigger": "CHttpRequest[] CHttpManager.Requests",
            "contents": "Requests"
        },
        {
            "trigger": "Integer CHttpManager.SlotsAvailable",
            "contents": "SlotsAvailable"
        },
        {
            "trigger": "Boolean CHttpManager.AutomaticHeaders_Timezone",
            "contents": "AutomaticHeaders_Timezone"
        },
        {
            "trigger": "CHttpRequest CreateGet(Text Url)",
            "contents": "CreateGet(${1:Text Url})"
        },
        {
            "trigger": "CHttpRequest CreateGet(Text Url, Boolean UseCache)",
            "contents": "CreateGet(${1:Text Url}, ${2:Boolean UseCache})"
        },
        {
            "trigger": "CHttpRequest CreateGet(Text Url, Boolean UseCache, Text AdditionalHeaders)",
            "contents": "CreateGet(${1:Text Url}, ${2:Boolean UseCache}, ${3:Text AdditionalHeaders})"
        },
        {
            "trigger": "CHttpRequest CreatePost(Text Url, Text Resource)",
            "contents": "CreatePost(${1:Text Url}, ${2:Text Resource})"
        },
        {
            "trigger": "CHttpRequest CreatePost(Text Url, Text Resource, Text AdditionalHeaders)",
            "contents": "CreatePost(${1:Text Url}, ${2:Text Resource}, ${3:Text AdditionalHeaders})"
        },
        {
            "trigger": "Void Destroy(CHttpRequest Request)",
            "contents": "Destroy(${1:CHttpRequest Request})"
        },
        {
            "trigger": "Boolean IsValidUrl(Text Url)",
            "contents": "IsValidUrl(${1:Text Url})"
        },
        {
            "trigger": "CBadgeEditor",
            "contents": "CBadgeEditor"
        },
        {
            "trigger": "CBadge CBadgeEditor.DisplayCurrentBadge",
            "contents": "DisplayCurrentBadge"
        },
        {
            "trigger": "Vec2 CBadgeEditor.DisplayPosN",
            "contents": "DisplayPosN"
        },
        {
            "trigger": "Vec2 CBadgeEditor.DisplaySize",
            "contents": "DisplaySize"
        },
        {
            "trigger": "Real CBadgeEditor.DisplayFoV",
            "contents": "DisplayFoV"
        },
        {
            "trigger": "Real CBadgeEditor.CameraTransitionDuration",
            "contents": "CameraTransitionDuration"
        },
        {
            "trigger": "Real CBadgeEditor.MeshRotation_MaxSpeed",
            "contents": "MeshRotation_MaxSpeed"
        },
        {
            "trigger": "Real CBadgeEditor.MeshRotation_Acceleration",
            "contents": "MeshRotation_Acceleration"
        },
        {
            "trigger": "Ident CBadgeEditor.DisplayCurrentMeshId",
            "contents": "DisplayCurrentMeshId"
        },
        {
            "trigger": "Ident[] CBadgeEditor.MeshIds",
            "contents": "MeshIds"
        },
        {
            "trigger": "CBadge[] CBadgeEditor.Badges",
            "contents": "Badges"
        },
        {
            "trigger": "Void Leave()",
            "contents": "Leave()"
        },
        {
            "trigger": "Void MeshId_Next()",
            "contents": "MeshId_Next()"
        },
        {
            "trigger": "Void MeshId_Previous()",
            "contents": "MeshId_Previous()"
        },
        {
            "trigger": "CBadge BadgeCreate()",
            "contents": "BadgeCreate()"
        },
        {
            "trigger": "Void BadgeDestroy(CBadge Badge)",
            "contents": "BadgeDestroy(${1:CBadge Badge})"
        },
        {
            "trigger": "Void BadgeCopy(CBadge Source, CBadge Destination)",
            "contents": "BadgeCopy(${1:CBadge Source}, ${2:CBadge Destination})"
        },
        {
            "trigger": "Void BadgeReadFromProfile(CBadge Badge, Ident UserId)",
            "contents": "BadgeReadFromProfile(${1:CBadge Badge}, ${2:Ident UserId})"
        },
        {
            "trigger": "Void BadgeWriteToProfile(CBadge Badge, Ident UserId)",
            "contents": "BadgeWriteToProfile(${1:CBadge Badge}, ${2:Ident UserId})"
        },
        {
            "trigger": "CTaskResult_BuddiesChallengeRecord",
            "contents": "CTaskResult_BuddiesChallengeRecord"
        },
        {
            "trigger": "Text CTaskResult_BuddiesChallengeRecord.Login",
            "contents": "Login"
        },
        {
            "trigger": "CHighScoreComparison[] CTaskResult_BuddiesChallengeRecord.BuddiesChallengeRecord",
            "contents": "BuddiesChallengeRecord"
        },
        {
            "trigger": "Void SortByOpponentCount()",
            "contents": "SortByOpponentCount()"
        },
        {
            "trigger": "Void SortByOpponentDisplayName()",
            "contents": "SortByOpponentDisplayName()"
        },
        {
            "trigger": "Void SortByOpponentLogin()",
            "contents": "SortByOpponentLogin()"
        },
        {
            "trigger": "Void SortByOpponentRecordDate()",
            "contents": "SortByOpponentRecordDate()"
        },
        {
            "trigger": "Void SortByOpponentRecordTime()",
            "contents": "SortByOpponentRecordTime()"
        },
        {
            "trigger": "CMlCamera",
            "contents": "CMlCamera"
        },
        {
            "trigger": "CTmMode",
            "contents": "CTmMode"
        },
        {
            "trigger": "CTmMode::ETmScoreSortOrder::TotalPoints",
            "contents": "CTmMode::ETmScoreSortOrder::TotalPoints"
        },
        {
            "trigger": "CTmMode::ETmScoreSortOrder::BestRace_Time",
            "contents": "CTmMode::ETmScoreSortOrder::BestRace_Time"
        },
        {
            "trigger": "CTmMode::ETmScoreSortOrder::BestRace_Stunts",
            "contents": "CTmMode::ETmScoreSortOrder::BestRace_Stunts"
        },
        {
            "trigger": "CTmMode::ETmScoreSortOrder::BestRace_NbRespawns",
            "contents": "CTmMode::ETmScoreSortOrder::BestRace_NbRespawns"
        },
        {
            "trigger": "CTmMode::ETmScoreSortOrder::BestRace_CheckpointsProgress",
            "contents": "CTmMode::ETmScoreSortOrder::BestRace_CheckpointsProgress"
        },
        {
            "trigger": "CTmMode::ETmScoreSortOrder::PrevRace_Time",
            "contents": "CTmMode::ETmScoreSortOrder::PrevRace_Time"
        },
        {
            "trigger": "CTmMode::ETmScoreSortOrder::Name",
            "contents": "CTmMode::ETmScoreSortOrder::Name"
        },
        {
            "trigger": "CTmMode::ETmScoreSortOrder::LadderRankSortValue",
            "contents": "CTmMode::ETmScoreSortOrder::LadderRankSortValue"
        },
        {
            "trigger": "CTmMode::ETMRespawnBehaviour::Normal",
            "contents": "CTmMode::ETMRespawnBehaviour::Normal"
        },
        {
            "trigger": "CTmMode::ETMRespawnBehaviour::DoNothing",
            "contents": "CTmMode::ETMRespawnBehaviour::DoNothing"
        },
        {
            "trigger": "CTmMode::ETMRespawnBehaviour::GiveUpBeforeFirstCheckPoint",
            "contents": "CTmMode::ETMRespawnBehaviour::GiveUpBeforeFirstCheckPoint"
        },
        {
            "trigger": "CTmMode::ETMRespawnBehaviour::AlwaysGiveUp",
            "contents": "CTmMode::ETMRespawnBehaviour::AlwaysGiveUp"
        },
        {
            "trigger": "CTmMode::ETmRaceChronoBehaviour::Auto",
            "contents": "CTmMode::ETmRaceChronoBehaviour::Auto"
        },
        {
            "trigger": "CTmMode::ETmRaceChronoBehaviour::Hidden",
            "contents": "CTmMode::ETmRaceChronoBehaviour::Hidden"
        },
        {
            "trigger": "CTmMode::ETmRaceChronoBehaviour::CountDown",
            "contents": "CTmMode::ETmRaceChronoBehaviour::CountDown"
        },
        {
            "trigger": "CTmMode::ETmRaceChronoBehaviour::Normal",
            "contents": "CTmMode::ETmRaceChronoBehaviour::Normal"
        },
        {
            "trigger": "CTmMode::EPersonalGhost::Disabled",
            "contents": "CTmMode::EPersonalGhost::Disabled"
        },
        {
            "trigger": "CTmMode::EPersonalGhost::Latest",
            "contents": "CTmMode::EPersonalGhost::Latest"
        },
        {
            "trigger": "CTmMode::EPersonalGhost::FastestRace",
            "contents": "CTmMode::EPersonalGhost::FastestRace"
        },
        {
            "trigger": "CTmPlayer[] CTmMode.AllPlayers",
            "contents": "AllPlayers"
        },
        {
            "trigger": "CTmPlayer[] CTmMode.Spectators",
            "contents": "Spectators"
        },
        {
            "trigger": "CTmPlayer[] CTmMode.Players",
            "contents": "Players"
        },
        {
            "trigger": "CTmPlayer[] CTmMode.PlayersRacing",
            "contents": "PlayersRacing"
        },
        {
            "trigger": "CTmPlayer[] CTmMode.PlayersWaiting",
            "contents": "PlayersWaiting"
        },
        {
            "trigger": "CTmScore[] CTmMode.Scores",
            "contents": "Scores"
        },
        {
            "trigger": "Integer CTmMode.Clan1Score",
            "contents": "Clan1Score"
        },
        {
            "trigger": "Integer CTmMode.Clan2Score",
            "contents": "Clan2Score"
        },
        {
            "trigger": "Integer[] CTmMode.ClanScores",
            "contents": "ClanScores"
        },
        {
            "trigger": "Integer CTmMode.ClansNbTotal",
            "contents": "ClansNbTotal"
        },
        {
            "trigger": "Integer[] CTmMode.ClansNbPlayers",
            "contents": "ClansNbPlayers"
        },
        {
            "trigger": "CTmModeEvent[] CTmMode.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "Integer CTmMode.CutOffTimeLimit",
            "contents": "CutOffTimeLimit"
        },
        {
            "trigger": "Integer CTmMode.NbLaps",
            "contents": "NbLaps"
        },
        {
            "trigger": "Boolean CTmMode.IndependantLaps",
            "contents": "IndependantLaps"
        },
        {
            "trigger": "Boolean CTmMode.UseClans",
            "contents": "UseClans"
        },
        {
            "trigger": "Boolean CTmMode.UseForcedClans",
            "contents": "UseForcedClans"
        },
        {
            "trigger": "ETMRespawnBehaviour CTmMode.RespawnBehaviour",
            "contents": "RespawnBehaviour"
        },
        {
            "trigger": "Boolean CTmMode.UiRounds",
            "contents": "UiRounds"
        },
        {
            "trigger": "Boolean CTmMode.UiLaps",
            "contents": "UiLaps"
        },
        {
            "trigger": "Boolean CTmMode.UiStuntsMode",
            "contents": "UiStuntsMode"
        },
        {
            "trigger": "Boolean CTmMode.UiDisplayStuntsNames",
            "contents": "UiDisplayStuntsNames"
        },
        {
            "trigger": "Boolean CTmMode.UiDisableHelpMessage",
            "contents": "UiDisableHelpMessage"
        },
        {
            "trigger": "Integer CTmMode.UiScoresPointsLimit",
            "contents": "UiScoresPointsLimit"
        },
        {
            "trigger": "ETmRaceChronoBehaviour CTmMode.UiRaceChrono",
            "contents": "UiRaceChrono"
        },
        {
            "trigger": "Boolean CTmMode.EnableCollisions",
            "contents": "EnableCollisions"
        },
        {
            "trigger": "Boolean CTmMode.EnableScaleCar",
            "contents": "EnableScaleCar"
        },
        {
            "trigger": "Boolean CTmMode.EnableCheckpointBonus",
            "contents": "EnableCheckpointBonus"
        },
        {
            "trigger": "Boolean CTmMode.EnableUniqueCamera",
            "contents": "EnableUniqueCamera"
        },
        {
            "trigger": "Boolean CTmMode.EnableBonusEvents",
            "contents": "EnableBonusEvents"
        },
        {
            "trigger": "Boolean CTmMode.HideOpponents",
            "contents": "HideOpponents"
        },
        {
            "trigger": "Integer CTmMode.ForceMaxOpponents",
            "contents": "ForceMaxOpponents"
        },
        {
            "trigger": "Boolean CTmMode.EnableLegacyXmlRpcCallbacks",
            "contents": "EnableLegacyXmlRpcCallbacks"
        },
        {
            "trigger": "Boolean CTmMode.MedalGhost_ShowGold",
            "contents": "MedalGhost_ShowGold"
        },
        {
            "trigger": "Boolean CTmMode.MedalGhost_ShowSilver",
            "contents": "MedalGhost_ShowSilver"
        },
        {
            "trigger": "Boolean CTmMode.MedalGhost_ShowBronze",
            "contents": "MedalGhost_ShowBronze"
        },
        {
            "trigger": "EPersonalGhost CTmMode.PersonalGhost",
            "contents": "PersonalGhost"
        },
        {
            "trigger": "Vec3 CTmMode.MapStartLinePos",
            "contents": "MapStartLinePos"
        },
        {
            "trigger": "Vec3[] CTmMode.MapCheckpointPos",
            "contents": "MapCheckpointPos"
        },
        {
            "trigger": "Vec3[] CTmMode.MapFinishLinePos",
            "contents": "MapFinishLinePos"
        },
        {
            "trigger": "Boolean CTmMode.MapIsLapRace",
            "contents": "MapIsLapRace"
        },
        {
            "trigger": "Integer CTmMode.MapNbLaps",
            "contents": "MapNbLaps"
        },
        {
            "trigger": "Void PassOn(CTmModeEvent Event)",
            "contents": "PassOn(${1:CTmModeEvent Event})"
        },
        {
            "trigger": "Void Discard(CTmModeEvent Event)",
            "contents": "Discard(${1:CTmModeEvent Event})"
        },
        {
            "trigger": "Void SpawnPlayer(CTmPlayer Player, Integer ClanNum, Integer RaceStartTime)",
            "contents": "SpawnPlayer(${1:CTmPlayer Player}, ${2:Integer ClanNum}, ${3:Integer RaceStartTime})"
        },
        {
            "trigger": "Void UnspawnPlayer(CTmPlayer Player)",
            "contents": "UnspawnPlayer(${1:CTmPlayer Player})"
        },
        {
            "trigger": "Void SetPlayerClan(CTmPlayer Player, Integer ClanNum)",
            "contents": "SetPlayerClan(${1:CTmPlayer Player}, ${2:Integer ClanNum})"
        },
        {
            "trigger": "Void Scores_Sort(ETmScoreSortOrder SortOrder)",
            "contents": "Scores_Sort(${1:ETmScoreSortOrder SortOrder})"
        },
        {
            "trigger": "Void Scores_Clear()",
            "contents": "Scores_Clear()"
        },
        {
            "trigger": "Void Ladder_ComputeRank(ETmScoreSortOrder SortOrder)",
            "contents": "Ladder_ComputeRank(${1:ETmScoreSortOrder SortOrder})"
        },
        {
            "trigger": "Void Cheats_Reset()",
            "contents": "Cheats_Reset()"
        },
        {
            "trigger": "Ident RaceGhost_Add(CGhost Ghost, Boolean DisplayAsPlayerBest)",
            "contents": "RaceGhost_Add(${1:CGhost Ghost}, ${2:Boolean DisplayAsPlayerBest})"
        },
        {
            "trigger": "Ident RaceGhost_AddWithOffset(CGhost Ghost, Integer OffsetMs)",
            "contents": "RaceGhost_AddWithOffset(${1:CGhost Ghost}, ${2:Integer OffsetMs})"
        },
        {
            "trigger": "Ident RaceGhost_Add(CGhost Ghost, Boolean DisplayAsPlayerBest, Ident ModelId)",
            "contents": "RaceGhost_Add(${1:CGhost Ghost}, ${2:Boolean DisplayAsPlayerBest}, ${3:Ident ModelId})"
        },
        {
            "trigger": "Void RaceGhost_Remove(Ident GhostInstId)",
            "contents": "RaceGhost_Remove(${1:Ident GhostInstId})"
        },
        {
            "trigger": "Void RaceGhost_RemoveAll()",
            "contents": "RaceGhost_RemoveAll()"
        },
        {
            "trigger": "Integer RaceGhost_GetStartTime(Ident GhostInstId)",
            "contents": "RaceGhost_GetStartTime(${1:Ident GhostInstId})"
        },
        {
            "trigger": "Integer RaceGhost_GetCurCheckpoint(Ident GhostInstId)",
            "contents": "RaceGhost_GetCurCheckpoint(${1:Ident GhostInstId})"
        },
        {
            "trigger": "Integer RaceGhost_GetCheckpointTime(Ident GhostInstId, Integer Checkpoint)",
            "contents": "RaceGhost_GetCheckpointTime(${1:Ident GhostInstId}, ${2:Integer Checkpoint})"
        },
        {
            "trigger": "Boolean RaceGhost_IsReplayOver(Ident GhostInstId)",
            "contents": "RaceGhost_IsReplayOver(${1:Ident GhostInstId})"
        },
        {
            "trigger": "CEditorEditor",
            "contents": "CEditorEditor"
        },
        {
            "trigger": "Boolean CEditorEditor.Bindings_RequestInput_Done",
            "contents": "Bindings_RequestInput_Done"
        },
        {
            "trigger": "Text[] CEditorEditor.BindingContexts",
            "contents": "BindingContexts"
        },
        {
            "trigger": "Text[] CEditorEditor.RequestedContextBindings",
            "contents": "RequestedContextBindings"
        },
        {
            "trigger": "CEditorEvent[] CEditorEditor.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "Void Bindings_AddContext(Text ContextName)",
            "contents": "Bindings_AddContext(${1:Text ContextName})"
        },
        {
            "trigger": "Void Bindings_AddBinding(Text ContextName, Text BindingName)",
            "contents": "Bindings_AddBinding(${1:Text ContextName}, ${2:Text BindingName})"
        },
        {
            "trigger": "Void Bindings_RemoveContext(Text ContextName)",
            "contents": "Bindings_RemoveContext(${1:Text ContextName})"
        },
        {
            "trigger": "Void Bindings_RemoveBinding(Text BindingName)",
            "contents": "Bindings_RemoveBinding(${1:Text BindingName})"
        },
        {
            "trigger": "Void Bindings_RequestInput(Text BindingName)",
            "contents": "Bindings_RequestInput(${1:Text BindingName})"
        },
        {
            "trigger": "Void Bindings_SetBindingName(Text BindingName, Text NewBindingName)",
            "contents": "Bindings_SetBindingName(${1:Text BindingName}, ${2:Text NewBindingName})"
        },
        {
            "trigger": "Void Bindings_SetContextName(Text ContextName, Text NewContextName)",
            "contents": "Bindings_SetContextName(${1:Text ContextName}, ${2:Text NewContextName})"
        },
        {
            "trigger": "Void Bindings_GetContextBindings(Text ContextName)",
            "contents": "Bindings_GetContextBindings(${1:Text ContextName})"
        },
        {
            "trigger": "Text Bindings_GetBindingActionName(Text BindingName)",
            "contents": "Bindings_GetBindingActionName(${1:Text BindingName})"
        },
        {
            "trigger": "CTmModeEvent",
            "contents": "CTmModeEvent"
        },
        {
            "trigger": "CTmModeEvent::EType::Unknown",
            "contents": "CTmModeEvent::EType::Unknown"
        },
        {
            "trigger": "CTmModeEvent::EType::StartLine",
            "contents": "CTmModeEvent::EType::StartLine"
        },
        {
            "trigger": "CTmModeEvent::EType::WayPoint",
            "contents": "CTmModeEvent::EType::WayPoint"
        },
        {
            "trigger": "CTmModeEvent::EType::GiveUp",
            "contents": "CTmModeEvent::EType::GiveUp"
        },
        {
            "trigger": "CTmModeEvent::EType::Respawn",
            "contents": "CTmModeEvent::EType::Respawn"
        },
        {
            "trigger": "CTmModeEvent::EType::Stunt",
            "contents": "CTmModeEvent::EType::Stunt"
        },
        {
            "trigger": "CTmModeEvent::EType::OnPlayerAdded",
            "contents": "CTmModeEvent::EType::OnPlayerAdded"
        },
        {
            "trigger": "CTmModeEvent::EType::OnPlayerRemoved",
            "contents": "CTmModeEvent::EType::OnPlayerRemoved"
        },
        {
            "trigger": "CTmModeEvent::EType::OnCommand",
            "contents": "CTmModeEvent::EType::OnCommand"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::None",
            "contents": "CTmModeEvent::EStuntFigure::None"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::StraightJump",
            "contents": "CTmModeEvent::EStuntFigure::StraightJump"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::Flip",
            "contents": "CTmModeEvent::EStuntFigure::Flip"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::BackFlip",
            "contents": "CTmModeEvent::EStuntFigure::BackFlip"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::Spin",
            "contents": "CTmModeEvent::EStuntFigure::Spin"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::Aerial",
            "contents": "CTmModeEvent::EStuntFigure::Aerial"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::AlleyOop",
            "contents": "CTmModeEvent::EStuntFigure::AlleyOop"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::Roll",
            "contents": "CTmModeEvent::EStuntFigure::Roll"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::Corkscrew",
            "contents": "CTmModeEvent::EStuntFigure::Corkscrew"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::SpinOff",
            "contents": "CTmModeEvent::EStuntFigure::SpinOff"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::Rodeo",
            "contents": "CTmModeEvent::EStuntFigure::Rodeo"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::FlipFlap",
            "contents": "CTmModeEvent::EStuntFigure::FlipFlap"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::Twister",
            "contents": "CTmModeEvent::EStuntFigure::Twister"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::FreeStyle",
            "contents": "CTmModeEvent::EStuntFigure::FreeStyle"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::SpinningMix",
            "contents": "CTmModeEvent::EStuntFigure::SpinningMix"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::FlippingChaos",
            "contents": "CTmModeEvent::EStuntFigure::FlippingChaos"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::RollingMadness",
            "contents": "CTmModeEvent::EStuntFigure::RollingMadness"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckNone",
            "contents": "CTmModeEvent::EStuntFigure::WreckNone"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckStraightJump",
            "contents": "CTmModeEvent::EStuntFigure::WreckStraightJump"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckFlip",
            "contents": "CTmModeEvent::EStuntFigure::WreckFlip"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckBackFlip",
            "contents": "CTmModeEvent::EStuntFigure::WreckBackFlip"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckSpin",
            "contents": "CTmModeEvent::EStuntFigure::WreckSpin"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckAerial",
            "contents": "CTmModeEvent::EStuntFigure::WreckAerial"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckAlleyOop",
            "contents": "CTmModeEvent::EStuntFigure::WreckAlleyOop"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckRoll",
            "contents": "CTmModeEvent::EStuntFigure::WreckRoll"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckCorkscrew",
            "contents": "CTmModeEvent::EStuntFigure::WreckCorkscrew"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckSpinOff",
            "contents": "CTmModeEvent::EStuntFigure::WreckSpinOff"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckRodeo",
            "contents": "CTmModeEvent::EStuntFigure::WreckRodeo"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckFlipFlap",
            "contents": "CTmModeEvent::EStuntFigure::WreckFlipFlap"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckTwister",
            "contents": "CTmModeEvent::EStuntFigure::WreckTwister"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckFreeStyle",
            "contents": "CTmModeEvent::EStuntFigure::WreckFreeStyle"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckSpinningMix",
            "contents": "CTmModeEvent::EStuntFigure::WreckSpinningMix"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckFlippingChaos",
            "contents": "CTmModeEvent::EStuntFigure::WreckFlippingChaos"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::WreckRollingMadness",
            "contents": "CTmModeEvent::EStuntFigure::WreckRollingMadness"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::TimePenalty",
            "contents": "CTmModeEvent::EStuntFigure::TimePenalty"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::RespawnPenalty",
            "contents": "CTmModeEvent::EStuntFigure::RespawnPenalty"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::Grind",
            "contents": "CTmModeEvent::EStuntFigure::Grind"
        },
        {
            "trigger": "CTmModeEvent::EStuntFigure::Reset",
            "contents": "CTmModeEvent::EStuntFigure::Reset"
        },
        {
            "trigger": "EType CTmModeEvent.Type",
            "contents": "Type"
        },
        {
            "trigger": "CTmPlayer CTmModeEvent.Player",
            "contents": "Player"
        },
        {
            "trigger": "Integer CTmModeEvent.RaceTime",
            "contents": "RaceTime"
        },
        {
            "trigger": "Integer CTmModeEvent.CheckpointInRace",
            "contents": "CheckpointInRace"
        },
        {
            "trigger": "Integer CTmModeEvent.CheckpointInLap",
            "contents": "CheckpointInLap"
        },
        {
            "trigger": "Boolean CTmModeEvent.IsEndLap",
            "contents": "IsEndLap"
        },
        {
            "trigger": "Boolean CTmModeEvent.IsEndRace",
            "contents": "IsEndRace"
        },
        {
            "trigger": "Integer CTmModeEvent.LapTime",
            "contents": "LapTime"
        },
        {
            "trigger": "Integer CTmModeEvent.StuntsScore",
            "contents": "StuntsScore"
        },
        {
            "trigger": "Integer CTmModeEvent.NbRespawns",
            "contents": "NbRespawns"
        },
        {
            "trigger": "Ident CTmModeEvent.BlockId",
            "contents": "BlockId"
        },
        {
            "trigger": "Real CTmModeEvent.Speed",
            "contents": "Speed"
        },
        {
            "trigger": "Real CTmModeEvent.Distance",
            "contents": "Distance"
        },
        {
            "trigger": "Real CTmModeEvent.Damages",
            "contents": "Damages"
        },
        {
            "trigger": "EStuntFigure CTmModeEvent.StuntFigure",
            "contents": "StuntFigure"
        },
        {
            "trigger": "Integer CTmModeEvent.Angle",
            "contents": "Angle"
        },
        {
            "trigger": "Integer CTmModeEvent.Points",
            "contents": "Points"
        },
        {
            "trigger": "Integer CTmModeEvent.Combo",
            "contents": "Combo"
        },
        {
            "trigger": "Boolean CTmModeEvent.IsStraight",
            "contents": "IsStraight"
        },
        {
            "trigger": "Boolean CTmModeEvent.IsReverse",
            "contents": "IsReverse"
        },
        {
            "trigger": "Boolean CTmModeEvent.IsMasterJump",
            "contents": "IsMasterJump"
        },
        {
            "trigger": "Real CTmModeEvent.Factor",
            "contents": "Factor"
        },
        {
            "trigger": "CUser CTmModeEvent.User",
            "contents": "User"
        },
        {
            "trigger": "Boolean CTmModeEvent.PlayerWasSpawned",
            "contents": "PlayerWasSpawned"
        },
        {
            "trigger": "Boolean CTmModeEvent.PlayerWasInLadderMatch",
            "contents": "PlayerWasInLadderMatch"
        },
        {
            "trigger": "Text CTmModeEvent.CommandName",
            "contents": "CommandName"
        },
        {
            "trigger": "Boolean CTmModeEvent.CommandValueBoolean",
            "contents": "CommandValueBoolean"
        },
        {
            "trigger": "Integer CTmModeEvent.CommandValueInteger",
            "contents": "CommandValueInteger"
        },
        {
            "trigger": "Real CTmModeEvent.CommandValueReal",
            "contents": "CommandValueReal"
        },
        {
            "trigger": "Text CTmModeEvent.CommandValueText",
            "contents": "CommandValueText"
        },
        {
            "trigger": "CUIConfigEvent",
            "contents": "CUIConfigEvent"
        },
        {
            "trigger": "CUIConfigEvent::EType::Unknown",
            "contents": "CUIConfigEvent::EType::Unknown"
        },
        {
            "trigger": "CUIConfigEvent::EType::OnModuleCustomEvent",
            "contents": "CUIConfigEvent::EType::OnModuleCustomEvent"
        },
        {
            "trigger": "CUIConfigEvent::EType::OnModuleShowRequest",
            "contents": "CUIConfigEvent::EType::OnModuleShowRequest"
        },
        {
            "trigger": "CUIConfigEvent::EType::OnModuleHideRequest",
            "contents": "CUIConfigEvent::EType::OnModuleHideRequest"
        },
        {
            "trigger": "CUIConfigEvent::EType::OnModuleStorePurchase",
            "contents": "CUIConfigEvent::EType::OnModuleStorePurchase"
        },
        {
            "trigger": "CUIConfigEvent::EType::OnModuleInventoryDrop",
            "contents": "CUIConfigEvent::EType::OnModuleInventoryDrop"
        },
        {
            "trigger": "CUIConfigEvent::EType::OnModuleInventoryEquip",
            "contents": "CUIConfigEvent::EType::OnModuleInventoryEquip"
        },
        {
            "trigger": "CUIConfigEvent::EModuleType::Undefined",
            "contents": "CUIConfigEvent::EModuleType::Undefined"
        },
        {
            "trigger": "CUIConfigEvent::EModuleType::Hud",
            "contents": "CUIConfigEvent::EModuleType::Hud"
        },
        {
            "trigger": "CUIConfigEvent::EModuleType::Inventory",
            "contents": "CUIConfigEvent::EModuleType::Inventory"
        },
        {
            "trigger": "CUIConfigEvent::EModuleType::Store",
            "contents": "CUIConfigEvent::EModuleType::Store"
        },
        {
            "trigger": "CUIConfigEvent::EModuleType::ScoresTable",
            "contents": "CUIConfigEvent::EModuleType::ScoresTable"
        },
        {
            "trigger": "CUIConfigEvent::EModuleType::Equipment",
            "contents": "CUIConfigEvent::EModuleType::Equipment"
        },
        {
            "trigger": "CUIConfigEvent::EModuleType::MenuBase",
            "contents": "CUIConfigEvent::EModuleType::MenuBase"
        },
        {
            "trigger": "CUIConfigEvent::EModuleType::MenuPage",
            "contents": "CUIConfigEvent::EModuleType::MenuPage"
        },
        {
            "trigger": "EType CUIConfigEvent.Type",
            "contents": "Type"
        },
        {
            "trigger": "CUIConfig CUIConfigEvent.UIConfig",
            "contents": "UIConfig"
        },
        {
            "trigger": "Text CUIConfigEvent.Param1",
            "contents": "Param1"
        },
        {
            "trigger": "Text[] CUIConfigEvent.Param2",
            "contents": "Param2"
        },
        {
            "trigger": "Text CUIConfigEvent.ItemUrl",
            "contents": "ItemUrl"
        },
        {
            "trigger": "Integer CUIConfigEvent.Quantity",
            "contents": "Quantity"
        },
        {
            "trigger": "EModuleType CUIConfigEvent.ModuleType",
            "contents": "ModuleType"
        },
        {
            "trigger": "CAchievementsAchievement",
            "contents": "CAchievementsAchievement"
        },
        {
            "trigger": "Ident CAchievementsAchievement.UserId",
            "contents": "UserId"
        },
        {
            "trigger": "CAchievementsAchievementDesc CAchievementsAchievement.AchievementDesc",
            "contents": "AchievementDesc"
        },
        {
            "trigger": "CSmAction",
            "contents": "CSmAction"
        },
        {
            "trigger": "Integer CSmAction.Now",
            "contents": "Now"
        },
        {
            "trigger": "Integer CSmAction.Variant",
            "contents": "Variant"
        },
        {
            "trigger": "CSmPlayer[] CSmAction.Players",
            "contents": "Players"
        },
        {
            "trigger": "CSmPlayer CSmAction.Owner",
            "contents": "Owner"
        },
        {
            "trigger": "Boolean CSmAction.IsActive",
            "contents": "IsActive"
        },
        {
            "trigger": "Boolean CSmAction.IsBound",
            "contents": "IsBound"
        },
        {
            "trigger": "Integer CSmAction.Energy",
            "contents": "Energy"
        },
        {
            "trigger": "Integer CSmAction.EnergyMax",
            "contents": "EnergyMax"
        },
        {
            "trigger": "Integer CSmAction.EnergyCost",
            "contents": "EnergyCost"
        },
        {
            "trigger": "Boolean CSmAction.EnergyReload",
            "contents": "EnergyReload"
        },
        {
            "trigger": "Real CSmAction.AmmoGain",
            "contents": "AmmoGain"
        },
        {
            "trigger": "Ident CSmAction.State_EntityId1",
            "contents": "State_EntityId1"
        },
        {
            "trigger": "Integer CSmAction.State_Integer1",
            "contents": "State_Integer1"
        },
        {
            "trigger": "Boolean CSmAction.State_Boolean1",
            "contents": "State_Boolean1"
        },
        {
            "trigger": "CSmActionEvent[] CSmAction.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "Boolean CSmAction.IsJumping",
            "contents": "IsJumping"
        },
        {
            "trigger": "Boolean CSmAction.IsGliding",
            "contents": "IsGliding"
        },
        {
            "trigger": "Boolean CSmAction.IsAttractor",
            "contents": "IsAttractor"
        },
        {
            "trigger": "Boolean CSmAction.IsFlying",
            "contents": "IsFlying"
        },
        {
            "trigger": "Boolean CSmAction.IsSliding",
            "contents": "IsSliding"
        },
        {
            "trigger": "Boolean CSmAction.IsRunning",
            "contents": "IsRunning"
        },
        {
            "trigger": "Boolean CSmAction.IsFrozen",
            "contents": "IsFrozen"
        },
        {
            "trigger": "Boolean CSmAction.IsSneaking",
            "contents": "IsSneaking"
        },
        {
            "trigger": "Boolean CSmAction.IsFreeLooking",
            "contents": "IsFreeLooking"
        },
        {
            "trigger": "Boolean CSmAction.HasNoPlayerCollision",
            "contents": "HasNoPlayerCollision"
        },
        {
            "trigger": "Integer CSmAction.Cooldown",
            "contents": "Cooldown"
        },
        {
            "trigger": "Void SendRulesEvent(Text Param1, Text[] Param2, CSmPlayer Shooter, CSmPlayer Victim)",
            "contents": "SendRulesEvent(${1:Text Param1}, ${2:Text[] Param2}, ${3:CSmPlayer Shooter}, ${4:CSmPlayer Victim})"
        },
        {
            "trigger": "Void SendRulesEvent(Text Param1, Text[] Param2, CSmPlayer Shooter, CSmPlayer Victim, CSmObject Object)",
            "contents": "SendRulesEvent(${1:Text Param1}, ${2:Text[] Param2}, ${3:CSmPlayer Shooter}, ${4:CSmPlayer Victim}, ${5:CSmObject Object})"
        },
        {
            "trigger": "Void SendRulesEvent(Text Param1, Text[] Param2, CSmPlayer Shooter, CSmPlayer Victim, CSmObject Object, CModeTurret Turret)",
            "contents": "SendRulesEvent(${1:Text Param1}, ${2:Text[] Param2}, ${3:CSmPlayer Shooter}, ${4:CSmPlayer Victim}, ${5:CSmObject Object}, ${6:CModeTurret Turret})"
        },
        {
            "trigger": "Ident Anim_GetModelId(Text ModelName)",
            "contents": "Anim_GetModelId(${1:Text ModelName})"
        },
        {
            "trigger": "Ident Anim_PlayAtLocation(Ident AnimModelId, Vec3 Position, Vec3 Direction)",
            "contents": "Anim_PlayAtLocation(${1:Ident AnimModelId}, ${2:Vec3 Position}, ${3:Vec3 Direction})"
        },
        {
            "trigger": "Ident Anim_PlayOnPlayer(Ident AnimModelId, CSmPlayer Player)",
            "contents": "Anim_PlayOnPlayer(${1:Ident AnimModelId}, ${2:CSmPlayer Player})"
        },
        {
            "trigger": "Void Anim_Stop(Ident AnimId)",
            "contents": "Anim_Stop(${1:Ident AnimId})"
        },
        {
            "trigger": "Ident Projectile_GetModelId(Text ModelName)",
            "contents": "Projectile_GetModelId(${1:Text ModelName})"
        },
        {
            "trigger": "Ident Projectile_CreateAtLocation(Ident ProjectileModelId, CSmPlayer PlayerToIgnore, Vec3 InitialPosition, Vec3 InitialDirection, Vec3 InitialVelocity)",
            "contents": "Projectile_CreateAtLocation(${1:Ident ProjectileModelId}, ${2:CSmPlayer PlayerToIgnore}, ${3:Vec3 InitialPosition}, ${4:Vec3 InitialDirection}, ${5:Vec3 InitialVelocity})"
        },
        {
            "trigger": "Ident Projectile_CreateOnPlayer(Ident ProjectileModelId, CSmPlayer Shooter)",
            "contents": "Projectile_CreateOnPlayer(${1:Ident ProjectileModelId}, ${2:CSmPlayer Shooter})"
        },
        {
            "trigger": "Boolean Cooldown_IsReady()",
            "contents": "Cooldown_IsReady()"
        },
        {
            "trigger": "Void Cooldown_Start()",
            "contents": "Cooldown_Start()"
        },
        {
            "trigger": "Ident Shield_CreateAtLocation(Vec3 Position, Vec3 Direction)",
            "contents": "Shield_CreateAtLocation(${1:Vec3 Position}, ${2:Vec3 Direction})"
        },
        {
            "trigger": "Ident Shield_CreateOnPlayer(CSmPlayer ShieldOwner)",
            "contents": "Shield_CreateOnPlayer(${1:CSmPlayer ShieldOwner})"
        },
        {
            "trigger": "Void Shield_Destroy(Ident ShieldId)",
            "contents": "Shield_Destroy(${1:Ident ShieldId})"
        },
        {
            "trigger": "Boolean Shield_Exists(Ident ShieldId)",
            "contents": "Shield_Exists(${1:Ident ShieldId})"
        },
        {
            "trigger": "Integer Shield_GetArmor(Ident ShieldId)",
            "contents": "Shield_GetArmor(${1:Ident ShieldId})"
        },
        {
            "trigger": "Void Shield_SetArmor(Ident ShieldId, Integer ShieldArmor)",
            "contents": "Shield_SetArmor(${1:Ident ShieldId}, ${2:Integer ShieldArmor})"
        },
        {
            "trigger": "Boolean Shield_GetIsActive(Ident ShieldId)",
            "contents": "Shield_GetIsActive(${1:Ident ShieldId})"
        },
        {
            "trigger": "Void Shield_SetIsActive(Ident ShieldId, Boolean ShieldIsActive)",
            "contents": "Shield_SetIsActive(${1:Ident ShieldId}, ${2:Boolean ShieldIsActive})"
        },
        {
            "trigger": "Integer Shield_GetArmorMax(Ident ShieldId)",
            "contents": "Shield_GetArmorMax(${1:Ident ShieldId})"
        },
        {
            "trigger": "Integer Shield_GetTickReload(Ident ShieldId)",
            "contents": "Shield_GetTickReload(${1:Ident ShieldId})"
        },
        {
            "trigger": "Integer Shield_GetCooldown(Ident ShieldId)",
            "contents": "Shield_GetCooldown(${1:Ident ShieldId})"
        },
        {
            "trigger": "Integer GetPlayerAmmo(CSmPlayer Player)",
            "contents": "GetPlayerAmmo(${1:CSmPlayer Player})"
        },
        {
            "trigger": "Integer GetPlayerAmmoMax(CSmPlayer Player)",
            "contents": "GetPlayerAmmoMax(${1:CSmPlayer Player})"
        },
        {
            "trigger": "CImage",
            "contents": "CImage"
        },
        {
            "trigger": "CImage::ERenderTech::Unknown",
            "contents": "CImage::ERenderTech::Unknown"
        },
        {
            "trigger": "CImage::ERenderTech::Tech3",
            "contents": "CImage::ERenderTech::Tech3"
        },
        {
            "trigger": "CImage::ETexFilter::Point",
            "contents": "CImage::ETexFilter::Point"
        },
        {
            "trigger": "CImage::ETexFilter::Bilinear",
            "contents": "CImage::ETexFilter::Bilinear"
        },
        {
            "trigger": "CImage::ETexFilter::Trilinear",
            "contents": "CImage::ETexFilter::Trilinear"
        },
        {
            "trigger": "CImage::ETexFilter::Anisotropic",
            "contents": "CImage::ETexFilter::Anisotropic"
        },
        {
            "trigger": "CImage::ETexFilter::AnisoPoint",
            "contents": "CImage::ETexFilter::AnisoPoint"
        },
        {
            "trigger": "CImage::ETexAddress::Wrap",
            "contents": "CImage::ETexAddress::Wrap"
        },
        {
            "trigger": "CImage::ETexAddress::Mirror",
            "contents": "CImage::ETexAddress::Mirror"
        },
        {
            "trigger": "CImage::ETexAddress::Clamp",
            "contents": "CImage::ETexAddress::Clamp"
        },
        {
            "trigger": "CImage::ETexAddress::BorderSM3",
            "contents": "CImage::ETexAddress::BorderSM3"
        },
        {
            "trigger": "CImage::EColorSpace::Linear",
            "contents": "CImage::EColorSpace::Linear"
        },
        {
            "trigger": "CImage::EColorSpace::sRGB",
            "contents": "CImage::EColorSpace::sRGB"
        },
        {
            "trigger": "CImage::EVideoTimer::Game",
            "contents": "CImage::EVideoTimer::Game"
        },
        {
            "trigger": "CImage::EVideoTimer::Human",
            "contents": "CImage::EVideoTimer::Human"
        },
        {
            "trigger": "CImage::EVideoTimer::Scene",
            "contents": "CImage::EVideoTimer::Scene"
        },
        {
            "trigger": "CImage::EVideoTimer::Default",
            "contents": "CImage::EVideoTimer::Default"
        },
        {
            "trigger": "CImage::EGenerateUV::NoGenerate",
            "contents": "CImage::EGenerateUV::NoGenerate"
        },
        {
            "trigger": "CImage::EGenerateUV::CameraVertex",
            "contents": "CImage::EGenerateUV::CameraVertex"
        },
        {
            "trigger": "CImage::EGenerateUV::WorldVertex",
            "contents": "CImage::EGenerateUV::WorldVertex"
        },
        {
            "trigger": "CImage::EGenerateUV::WorldVertexXY",
            "contents": "CImage::EGenerateUV::WorldVertexXY"
        },
        {
            "trigger": "CImage::EGenerateUV::WorldVertexXZ",
            "contents": "CImage::EGenerateUV::WorldVertexXZ"
        },
        {
            "trigger": "CImage::EGenerateUV::WorldVertexYZ",
            "contents": "CImage::EGenerateUV::WorldVertexYZ"
        },
        {
            "trigger": "CImage::EGenerateUV::CameraNormal",
            "contents": "CImage::EGenerateUV::CameraNormal"
        },
        {
            "trigger": "CImage::EGenerateUV::WorldNormal",
            "contents": "CImage::EGenerateUV::WorldNormal"
        },
        {
            "trigger": "CImage::EGenerateUV::CameraReflectionVector",
            "contents": "CImage::EGenerateUV::CameraReflectionVector"
        },
        {
            "trigger": "CImage::EGenerateUV::WorldReflectionVector",
            "contents": "CImage::EGenerateUV::WorldReflectionVector"
        },
        {
            "trigger": "CImage::EGenerateUV::WorldNormalNeg",
            "contents": "CImage::EGenerateUV::WorldNormalNeg"
        },
        {
            "trigger": "CImage::EGenerateUV::WaterReflectionVector",
            "contents": "CImage::EGenerateUV::WaterReflectionVector"
        },
        {
            "trigger": "CImage::EGenerateUV::Hack1Vertex",
            "contents": "CImage::EGenerateUV::Hack1Vertex"
        },
        {
            "trigger": "CImage::EGenerateUV::DEPRECATED",
            "contents": "CImage::EGenerateUV::DEPRECATED"
        },
        {
            "trigger": "CImage::EGenerateUV::FogPlane0",
            "contents": "CImage::EGenerateUV::FogPlane0"
        },
        {
            "trigger": "CImage::EGenerateUV::Vsk3SeaFoam",
            "contents": "CImage::EGenerateUV::Vsk3SeaFoam"
        },
        {
            "trigger": "CImage::EGenerateUV::ImageSpace",
            "contents": "CImage::EGenerateUV::ImageSpace"
        },
        {
            "trigger": "CImage::EGenerateUV::LightDir0Reflect",
            "contents": "CImage::EGenerateUV::LightDir0Reflect"
        },
        {
            "trigger": "CImage::EGenerateUV::EyeNormal",
            "contents": "CImage::EGenerateUV::EyeNormal"
        },
        {
            "trigger": "CImage::EGenerateUV::ShadowB1Pw01",
            "contents": "CImage::EGenerateUV::ShadowB1Pw01"
        },
        {
            "trigger": "CImage::EGenerateUV::Tex3AsPosPrCamera",
            "contents": "CImage::EGenerateUV::Tex3AsPosPrCamera"
        },
        {
            "trigger": "CImage::EGenerateUV::FlatWaterReflect",
            "contents": "CImage::EGenerateUV::FlatWaterReflect"
        },
        {
            "trigger": "CImage::EGenerateUV::FlatWaterRefract",
            "contents": "CImage::EGenerateUV::FlatWaterRefract"
        },
        {
            "trigger": "CImage::EGenerateUV::FlatWaterFresnel",
            "contents": "CImage::EGenerateUV::FlatWaterFresnel"
        },
        {
            "trigger": "CImage::EGenerateUV::WorldPosXYblendZY",
            "contents": "CImage::EGenerateUV::WorldPosXYblendZY"
        },
        {
            "trigger": "CImage::EGenerateUV::DisableVshOutput",
            "contents": "CImage::EGenerateUV::DisableVshOutput"
        },
        {
            "trigger": "CImage::EUsage::Color",
            "contents": "CImage::EUsage::Color"
        },
        {
            "trigger": "CImage::EUsage::Light",
            "contents": "CImage::EUsage::Light"
        },
        {
            "trigger": "CImage::EUsage::DuDv",
            "contents": "CImage::EUsage::DuDv"
        },
        {
            "trigger": "CImage::EUsage::Render",
            "contents": "CImage::EUsage::Render"
        },
        {
            "trigger": "CImage::EUsage::DuDvLumi",
            "contents": "CImage::EUsage::DuDvLumi"
        },
        {
            "trigger": "CImage::EUsage::NormXYZ",
            "contents": "CImage::EUsage::NormXYZ"
        },
        {
            "trigger": "CImage::EUsage::NormXY",
            "contents": "CImage::EUsage::NormXY"
        },
        {
            "trigger": "CImage::EUsage::DepthCmp",
            "contents": "CImage::EUsage::DepthCmp"
        },
        {
            "trigger": "CImage::EUsage::DispH01",
            "contents": "CImage::EUsage::DispH01"
        },
        {
            "trigger": "CImage::EUsage::NormPal8b",
            "contents": "CImage::EUsage::NormPal8b"
        },
        {
            "trigger": "CImage::EUsage::NormXYZ",
            "contents": "CImage::EUsage::NormXYZ"
        },
        {
            "trigger": "CImage::EUsage::NormXY",
            "contents": "CImage::EUsage::NormXY"
        },
        {
            "trigger": "CImage::EUsage::NormPal8b",
            "contents": "CImage::EUsage::NormPal8b"
        },
        {
            "trigger": "CImage::EUsage::NormPal16b",
            "contents": "CImage::EUsage::NormPal16b"
        },
        {
            "trigger": "CImage::EUsage::ColorFloat",
            "contents": "CImage::EUsage::ColorFloat"
        },
        {
            "trigger": "CImage::EUsage::RenderFloat",
            "contents": "CImage::EUsage::RenderFloat"
        },
        {
            "trigger": "CImage::EUsage::DuDv1",
            "contents": "CImage::EUsage::DuDv1"
        },
        {
            "trigger": "CImage::EUsage::Alpha",
            "contents": "CImage::EUsage::Alpha"
        },
        {
            "trigger": "CImage::EUsage::LightAlpha",
            "contents": "CImage::EUsage::LightAlpha"
        },
        {
            "trigger": "CImage::EUsage::NormX0ZY",
            "contents": "CImage::EUsage::NormX0ZY"
        },
        {
            "trigger": "CImage::EUsage::NormX0ZY",
            "contents": "CImage::EUsage::NormX0ZY"
        },
        {
            "trigger": "CImage::EUsage::TexCoord",
            "contents": "CImage::EUsage::TexCoord"
        },
        {
            "trigger": "CImage::EUsage::Render16b",
            "contents": "CImage::EUsage::Render16b"
        },
        {
            "trigger": "CImage::EUsage::Vertex",
            "contents": "CImage::EUsage::Vertex"
        },
        {
            "trigger": "CImage::EUsage::BumpTxTy",
            "contents": "CImage::EUsage::BumpTxTy"
        },
        {
            "trigger": "CImage::EUsage::BumpTxTy",
            "contents": "CImage::EUsage::BumpTxTy"
        },
        {
            "trigger": "CImage::EUsage::Norm0YZX",
            "contents": "CImage::EUsage::Norm0YZX"
        },
        {
            "trigger": "CImage::EUsage::Norm0YZX",
            "contents": "CImage::EUsage::Norm0YZX"
        },
        {
            "trigger": "CImage::EUsage::YZX",
            "contents": "CImage::EUsage::YZX"
        },
        {
            "trigger": "CImage::EUsage::Depth",
            "contents": "CImage::EUsage::Depth"
        },
        {
            "trigger": "CImage::EUsage::LinearL16",
            "contents": "CImage::EUsage::LinearL16"
        },
        {
            "trigger": "CImage::EUsage::NormATI2N",
            "contents": "CImage::EUsage::NormATI2N"
        },
        {
            "trigger": "CImage::EUsage::ATI2N",
            "contents": "CImage::EUsage::ATI2N"
        },
        {
            "trigger": "CImage::EUsage::Color16b",
            "contents": "CImage::EUsage::Color16b"
        },
        {
            "trigger": "CImage::EUsage::FI0E",
            "contents": "CImage::EUsage::FI0E"
        },
        {
            "trigger": "CImage::EUsage::SpecFI0E",
            "contents": "CImage::EUsage::SpecFI0E"
        },
        {
            "trigger": "CImage::EColorDepth::DefaultColorDepth",
            "contents": "CImage::EColorDepth::DefaultColorDepth"
        },
        {
            "trigger": "CImage::EColorDepth::Color16b",
            "contents": "CImage::EColorDepth::Color16b"
        },
        {
            "trigger": "CImage::EColorDepth::Color32b",
            "contents": "CImage::EColorDepth::Color32b"
        },
        {
            "trigger": "CImage::ECubeMapFace::None",
            "contents": "CImage::ECubeMapFace::None"
        },
        {
            "trigger": "CImage::ECubeMapFace::XPos",
            "contents": "CImage::ECubeMapFace::XPos"
        },
        {
            "trigger": "CImage::ECubeMapFace::XNeg",
            "contents": "CImage::ECubeMapFace::XNeg"
        },
        {
            "trigger": "CImage::ECubeMapFace::YPos",
            "contents": "CImage::ECubeMapFace::YPos"
        },
        {
            "trigger": "CImage::ECubeMapFace::YNeg",
            "contents": "CImage::ECubeMapFace::YNeg"
        },
        {
            "trigger": "CImage::ECubeMapFace::ZPos",
            "contents": "CImage::ECubeMapFace::ZPos"
        },
        {
            "trigger": "CImage::ECubeMapFace::ZNeg",
            "contents": "CImage::ECubeMapFace::ZNeg"
        },
        {
            "trigger": "CImage::EBumpCompressMode::None",
            "contents": "CImage::EBumpCompressMode::None"
        },
        {
            "trigger": "CImage::EBumpCompressMode::Pal8b",
            "contents": "CImage::EBumpCompressMode::Pal8b"
        },
        {
            "trigger": "CImage::EBumpCompressMode::DXT1",
            "contents": "CImage::EBumpCompressMode::DXT1"
        },
        {
            "trigger": "CImage::EBumpCompressMode::Pal16b",
            "contents": "CImage::EBumpCompressMode::Pal16b"
        },
        {
            "trigger": "CImage::EPixelUpdate::None",
            "contents": "CImage::EPixelUpdate::None"
        },
        {
            "trigger": "CImage::EPixelUpdate::Render",
            "contents": "CImage::EPixelUpdate::Render"
        },
        {
            "trigger": "CImage::EPixelUpdate::Shader",
            "contents": "CImage::EPixelUpdate::Shader"
        },
        {
            "trigger": "CImage::EPixelUpdate::DynaSpecular",
            "contents": "CImage::EPixelUpdate::DynaSpecular"
        },
        {
            "trigger": "CImage::EPixelUpdate::Clear",
            "contents": "CImage::EPixelUpdate::Clear"
        },
        {
            "trigger": "CImage::EPixelUpdate::RenderVideo",
            "contents": "CImage::EPixelUpdate::RenderVideo"
        },
        {
            "trigger": "CImage::EDynamic::Off",
            "contents": "CImage::EDynamic::Off"
        },
        {
            "trigger": "CImage::EDynamic::On",
            "contents": "CImage::EDynamic::On"
        },
        {
            "trigger": "CImage::EDynamic::Buffers",
            "contents": "CImage::EDynamic::Buffers"
        },
        {
            "trigger": "CImage::ENormalRotate::None",
            "contents": "CImage::ENormalRotate::None"
        },
        {
            "trigger": "CImage::ENormalRotate::y",
            "contents": "CImage::ENormalRotate::y"
        },
        {
            "trigger": "CImage::EEdCustomSaveOp::None",
            "contents": "CImage::EEdCustomSaveOp::None"
        },
        {
            "trigger": "CImage::EEdCustomSaveOp::Diffuse",
            "contents": "CImage::EEdCustomSaveOp::Diffuse"
        },
        {
            "trigger": "CImage::EEdCustomSaveOp::DXT5",
            "contents": "CImage::EEdCustomSaveOp::DXT5"
        },
        {
            "trigger": "CImage::EEdCustomSaveOp::ShootCubeHdr",
            "contents": "CImage::EEdCustomSaveOp::ShootCubeHdr"
        },
        {
            "trigger": "CImage::ECompressor::NVidia",
            "contents": "CImage::ECompressor::NVidia"
        },
        {
            "trigger": "CImage::ECompressor::DirectX",
            "contents": "CImage::ECompressor::DirectX"
        },
        {
            "trigger": "CImage::EForceBorderSize::texel",
            "contents": "CImage::EForceBorderSize::texel"
        },
        {
            "trigger": "CImage::EForceBorderSize::texels",
            "contents": "CImage::EForceBorderSize::texels"
        },
        {
            "trigger": "CImage::EForceBorderSize::texels",
            "contents": "CImage::EForceBorderSize::texels"
        },
        {
            "trigger": "CImage::EForceBorderSize::texels",
            "contents": "CImage::EForceBorderSize::texels"
        },
        {
            "trigger": "CImage::EMipMapAlpha01::HalfBinary",
            "contents": "CImage::EMipMapAlpha01::HalfBinary"
        },
        {
            "trigger": "CImage::EMipMapAlpha01::ForceBinary",
            "contents": "CImage::EMipMapAlpha01::ForceBinary"
        },
        {
            "trigger": "CImage::EMipMapAlpha01::ShadeOfGray",
            "contents": "CImage::EMipMapAlpha01::ShadeOfGray"
        },
        {
            "trigger": "CUser",
            "contents": "CUser"
        },
        {
            "trigger": "CUser::EEchelon::None",
            "contents": "CUser::EEchelon::None"
        },
        {
            "trigger": "CUser::EEchelon::Bronze1",
            "contents": "CUser::EEchelon::Bronze1"
        },
        {
            "trigger": "CUser::EEchelon::Bronze2",
            "contents": "CUser::EEchelon::Bronze2"
        },
        {
            "trigger": "CUser::EEchelon::Bronze3",
            "contents": "CUser::EEchelon::Bronze3"
        },
        {
            "trigger": "CUser::EEchelon::Silver1",
            "contents": "CUser::EEchelon::Silver1"
        },
        {
            "trigger": "CUser::EEchelon::Silver2",
            "contents": "CUser::EEchelon::Silver2"
        },
        {
            "trigger": "CUser::EEchelon::Silver3",
            "contents": "CUser::EEchelon::Silver3"
        },
        {
            "trigger": "CUser::EEchelon::Gold1",
            "contents": "CUser::EEchelon::Gold1"
        },
        {
            "trigger": "CUser::EEchelon::Gold2",
            "contents": "CUser::EEchelon::Gold2"
        },
        {
            "trigger": "CUser::EEchelon::Gold3",
            "contents": "CUser::EEchelon::Gold3"
        },
        {
            "trigger": "CUser::ETagType::Bronze",
            "contents": "CUser::ETagType::Bronze"
        },
        {
            "trigger": "CUser::ETagType::Silver",
            "contents": "CUser::ETagType::Silver"
        },
        {
            "trigger": "CUser::ETagType::Gold",
            "contents": "CUser::ETagType::Gold"
        },
        {
            "trigger": "CUser::ETagType::Nadeo",
            "contents": "CUser::ETagType::Nadeo"
        },
        {
            "trigger": "CUser::EStereoDisplayMode::None",
            "contents": "CUser::EStereoDisplayMode::None"
        },
        {
            "trigger": "CUser::EStereoDisplayMode::Stereo",
            "contents": "CUser::EStereoDisplayMode::Stereo"
        },
        {
            "trigger": "CUser::EStereoDisplayMode::HMD",
            "contents": "CUser::EStereoDisplayMode::HMD"
        },
        {
            "trigger": "CUser::EMuteSetting::Auto",
            "contents": "CUser::EMuteSetting::Auto"
        },
        {
            "trigger": "CUser::EMuteSetting::Muted",
            "contents": "CUser::EMuteSetting::Muted"
        },
        {
            "trigger": "CUser::EMuteSetting::NotMuted",
            "contents": "CUser::EMuteSetting::NotMuted"
        },
        {
            "trigger": "CUser::PlayerType::Human",
            "contents": "CUser::PlayerType::Human"
        },
        {
            "trigger": "CUser::PlayerType::Fake",
            "contents": "CUser::PlayerType::Fake"
        },
        {
            "trigger": "CUser::PlayerType::Net",
            "contents": "CUser::PlayerType::Net"
        },
        {
            "trigger": "CUser::PlayerType::Replay",
            "contents": "CUser::PlayerType::Replay"
        },
        {
            "trigger": "CUser::SpectatorMode::Void",
            "contents": "CUser::SpectatorMode::Void"
        },
        {
            "trigger": "CUser::SpectatorMode::Watcher",
            "contents": "CUser::SpectatorMode::Watcher"
        },
        {
            "trigger": "CUser::SpectatorMode::LocalWatcher",
            "contents": "CUser::SpectatorMode::LocalWatcher"
        },
        {
            "trigger": "CUser::SpectatorMode::Target",
            "contents": "CUser::SpectatorMode::Target"
        },
        {
            "trigger": "Text CUser.Login",
            "contents": "Login"
        },
        {
            "trigger": "Text CUser.Name",
            "contents": "Name"
        },
        {
            "trigger": "Text CUser.AvatarUrl",
            "contents": "AvatarUrl"
        },
        {
            "trigger": "Text CUser.ZonePath",
            "contents": "ZonePath"
        },
        {
            "trigger": "Text CUser.ZoneFlagUrl",
            "contents": "ZoneFlagUrl"
        },
        {
            "trigger": "Text CUser.CountryFlagUrl",
            "contents": "CountryFlagUrl"
        },
        {
            "trigger": "Text CUser.Language",
            "contents": "Language"
        },
        {
            "trigger": "Text CUser.Description",
            "contents": "Description"
        },
        {
            "trigger": "Vec3 CUser.Color",
            "contents": "Color"
        },
        {
            "trigger": "Text CUser.ClubLink",
            "contents": "ClubLink"
        },
        {
            "trigger": "Text CUser.BroadcastTVLogin",
            "contents": "BroadcastTVLogin"
        },
        {
            "trigger": "Text CUser.SteamUserId",
            "contents": "SteamUserId"
        },
        {
            "trigger": "Integer CUser.FameStars",
            "contents": "FameStars"
        },
        {
            "trigger": "EEchelon CUser.Echelon",
            "contents": "Echelon"
        },
        {
            "trigger": "Integer CUser.NextEchelonPercent",
            "contents": "NextEchelonPercent"
        },
        {
            "trigger": "Boolean CUser.IsBeginner",
            "contents": "IsBeginner"
        },
        {
            "trigger": "Integer CUser.LadderRank",
            "contents": "LadderRank"
        },
        {
            "trigger": "Integer CUser.LadderTotal",
            "contents": "LadderTotal"
        },
        {
            "trigger": "Real CUser.LadderPoints",
            "contents": "LadderPoints"
        },
        {
            "trigger": "Text CUser.LadderZoneName",
            "contents": "LadderZoneName"
        },
        {
            "trigger": "Text CUser.LadderZoneFlagUrl",
            "contents": "LadderZoneFlagUrl"
        },
        {
            "trigger": "Boolean CUser.IsFakeUser",
            "contents": "IsFakeUser"
        },
        {
            "trigger": "Integer[] CUser.Tags_Favored_Indices",
            "contents": "Tags_Favored_Indices"
        },
        {
            "trigger": "Text[] CUser.Tags_Id",
            "contents": "Tags_Id"
        },
        {
            "trigger": "ETagType[] CUser.Tags_Type",
            "contents": "Tags_Type"
        },
        {
            "trigger": "Text[] CUser.Tags_Comments",
            "contents": "Tags_Comments"
        },
        {
            "trigger": "Text[] CUser.Tags_Deliverer",
            "contents": "Tags_Deliverer"
        },
        {
            "trigger": "Boolean CUser.VoiceChat_Supported",
            "contents": "VoiceChat_Supported"
        },
        {
            "trigger": "EMuteSetting CUser.VoiceChat_MuteSetting",
            "contents": "VoiceChat_MuteSetting"
        },
        {
            "trigger": "Boolean CUser.VoiceChat_IsSpeaking",
            "contents": "VoiceChat_IsSpeaking"
        },
        {
            "trigger": "Boolean CUser.VoiceChat_IsMuted",
            "contents": "VoiceChat_IsMuted"
        },
        {
            "trigger": "Boolean CUser.IsConnectedToMasterServer",
            "contents": "IsConnectedToMasterServer"
        },
        {
            "trigger": "Text[] CUser.AlliesConnected",
            "contents": "AlliesConnected"
        },
        {
            "trigger": "EStereoDisplayMode CUser.StereoDisplayMode",
            "contents": "StereoDisplayMode"
        },
        {
            "trigger": "Boolean CUser.HackCamHmdDisabled",
            "contents": "HackCamHmdDisabled"
        },
        {
            "trigger": "CXmlDocument",
            "contents": "CXmlDocument"
        },
        {
            "trigger": "Text CXmlDocument.TextContents",
            "contents": "TextContents"
        },
        {
            "trigger": "CXmlNode CXmlDocument.Root",
            "contents": "Root"
        },
        {
            "trigger": "CXmlNode[] CXmlDocument.Nodes",
            "contents": "Nodes"
        },
        {
            "trigger": "CXmlNode GetFirstChild(Text Name)",
            "contents": "GetFirstChild(${1:Text Name})"
        },
        {
            "trigger": "CMapInfo",
            "contents": "CMapInfo"
        },
        {
            "trigger": "Text CMapInfo.MapUid",
            "contents": "MapUid"
        },
        {
            "trigger": "Text CMapInfo.Comments",
            "contents": "Comments"
        },
        {
            "trigger": "Integer CMapInfo.CopperPrice",
            "contents": "CopperPrice"
        },
        {
            "trigger": "Text CMapInfo.CollectionName",
            "contents": "CollectionName"
        },
        {
            "trigger": "Text CMapInfo.AuthorLogin",
            "contents": "AuthorLogin"
        },
        {
            "trigger": "Text CMapInfo.AuthorNickName",
            "contents": "AuthorNickName"
        },
        {
            "trigger": "Text CMapInfo.AuthorZonePath",
            "contents": "AuthorZonePath"
        },
        {
            "trigger": "Text CMapInfo.MapType",
            "contents": "MapType"
        },
        {
            "trigger": "Text CMapInfo.MapStyle",
            "contents": "MapStyle"
        },
        {
            "trigger": "Boolean CMapInfo.Unlocked",
            "contents": "Unlocked"
        },
        {
            "trigger": "Boolean CMapInfo.IsPlayable",
            "contents": "IsPlayable"
        },
        {
            "trigger": "Boolean CMapInfo.CreatedWithSimpleEditor",
            "contents": "CreatedWithSimpleEditor"
        },
        {
            "trigger": "Integer CMapInfo.TMObjective_AuthorTime",
            "contents": "TMObjective_AuthorTime"
        },
        {
            "trigger": "Integer CMapInfo.TMObjective_GoldTime",
            "contents": "TMObjective_GoldTime"
        },
        {
            "trigger": "Integer CMapInfo.TMObjective_SilverTime",
            "contents": "TMObjective_SilverTime"
        },
        {
            "trigger": "Integer CMapInfo.TMObjective_BronzeTime",
            "contents": "TMObjective_BronzeTime"
        },
        {
            "trigger": "Boolean CMapInfo.TMObjective_IsLapRace",
            "contents": "TMObjective_IsLapRace"
        },
        {
            "trigger": "Text CMapInfo.Name",
            "contents": "Name"
        },
        {
            "trigger": "Text CMapInfo.Path",
            "contents": "Path"
        },
        {
            "trigger": "Text CMapInfo.FileName",
            "contents": "FileName"
        },
        {
            "trigger": "CTaskResult_BuddiesChallengeRecordsComparison",
            "contents": "CTaskResult_BuddiesChallengeRecordsComparison"
        },
        {
            "trigger": "Text CTaskResult_BuddiesChallengeRecordsComparison.Login",
            "contents": "Login"
        },
        {
            "trigger": "CHighScoreComparisonSummary[] CTaskResult_BuddiesChallengeRecordsComparison.BuddiesComparison",
            "contents": "BuddiesComparison"
        },
        {
            "trigger": "Void SortByPlayerCount()",
            "contents": "SortByPlayerCount()"
        },
        {
            "trigger": "Void SortByOpponentLogin()",
            "contents": "SortByOpponentLogin()"
        },
        {
            "trigger": "Void SortByOpponentCount()",
            "contents": "SortByOpponentCount()"
        },
        {
            "trigger": "Void SortByOpponentDate()",
            "contents": "SortByOpponentDate()"
        },
        {
            "trigger": "Void SortByOpponentDisplayName()",
            "contents": "SortByOpponentDisplayName()"
        },
        {
            "trigger": "CTmScore",
            "contents": "CTmScore"
        },
        {
            "trigger": "Integer CTmScore.TeamNum",
            "contents": "TeamNum"
        },
        {
            "trigger": "Integer CTmScore.Points",
            "contents": "Points"
        },
        {
            "trigger": "CTmResult CTmScore.BestRace",
            "contents": "BestRace"
        },
        {
            "trigger": "CTmResult CTmScore.BestLap",
            "contents": "BestLap"
        },
        {
            "trigger": "Integer CTmScore.PrevRaceDeltaPoints",
            "contents": "PrevRaceDeltaPoints"
        },
        {
            "trigger": "CTmResult CTmScore.PrevRace",
            "contents": "PrevRace"
        },
        {
            "trigger": "CTmResult CTmScore.TempResult",
            "contents": "TempResult"
        },
        {
            "trigger": "Void Clear()",
            "contents": "Clear()"
        },
        {
            "trigger": "CSmModeEvent",
            "contents": "CSmModeEvent"
        },
        {
            "trigger": "CSmModeEvent::EType::Unknown",
            "contents": "CSmModeEvent::EType::Unknown"
        },
        {
            "trigger": "CSmModeEvent::EType::OnShoot",
            "contents": "CSmModeEvent::EType::OnShoot"
        },
        {
            "trigger": "CSmModeEvent::EType::OnHit",
            "contents": "CSmModeEvent::EType::OnHit"
        },
        {
            "trigger": "CSmModeEvent::EType::OnNearMiss",
            "contents": "CSmModeEvent::EType::OnNearMiss"
        },
        {
            "trigger": "CSmModeEvent::EType::OnArmorEmpty",
            "contents": "CSmModeEvent::EType::OnArmorEmpty"
        },
        {
            "trigger": "CSmModeEvent::EType::OnCapture",
            "contents": "CSmModeEvent::EType::OnCapture"
        },
        {
            "trigger": "CSmModeEvent::EType::OnShotDeny",
            "contents": "CSmModeEvent::EType::OnShotDeny"
        },
        {
            "trigger": "CSmModeEvent::EType::OnFallDamage",
            "contents": "CSmModeEvent::EType::OnFallDamage"
        },
        {
            "trigger": "CSmModeEvent::EType::OnCommand",
            "contents": "CSmModeEvent::EType::OnCommand"
        },
        {
            "trigger": "CSmModeEvent::EType::OnPlayerAdded",
            "contents": "CSmModeEvent::EType::OnPlayerAdded"
        },
        {
            "trigger": "CSmModeEvent::EType::OnPlayerRemoved",
            "contents": "CSmModeEvent::EType::OnPlayerRemoved"
        },
        {
            "trigger": "CSmModeEvent::EType::OnPlayerRequestRespawn",
            "contents": "CSmModeEvent::EType::OnPlayerRequestRespawn"
        },
        {
            "trigger": "CSmModeEvent::EType::OnActionCustomEvent",
            "contents": "CSmModeEvent::EType::OnActionCustomEvent"
        },
        {
            "trigger": "CSmModeEvent::EType::OnActionEvent",
            "contents": "CSmModeEvent::EType::OnActionEvent"
        },
        {
            "trigger": "CSmModeEvent::EType::OnPlayerTouchesObject",
            "contents": "CSmModeEvent::EType::OnPlayerTouchesObject"
        },
        {
            "trigger": "CSmModeEvent::EType::OnPlayerTriggersSector",
            "contents": "CSmModeEvent::EType::OnPlayerTriggersSector"
        },
        {
            "trigger": "CSmModeEvent::EType::OnPlayerThrowsObject",
            "contents": "CSmModeEvent::EType::OnPlayerThrowsObject"
        },
        {
            "trigger": "CSmModeEvent::EType::OnPlayerRequestActionChange",
            "contents": "CSmModeEvent::EType::OnPlayerRequestActionChange"
        },
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_A",
            "contents": "CSmModeEvent::EActionSlot::Slot_A"
        },
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_B",
            "contents": "CSmModeEvent::EActionSlot::Slot_B"
        },
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_C",
            "contents": "CSmModeEvent::EActionSlot::Slot_C"
        },
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_D",
            "contents": "CSmModeEvent::EActionSlot::Slot_D"
        },
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_E",
            "contents": "CSmModeEvent::EActionSlot::Slot_E"
        },
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_F",
            "contents": "CSmModeEvent::EActionSlot::Slot_F"
        },
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_G",
            "contents": "CSmModeEvent::EActionSlot::Slot_G"
        },
        {
            "trigger": "CSmModeEvent::EActionSlot::Slot_H",
            "contents": "CSmModeEvent::EActionSlot::Slot_H"
        },
        {
            "trigger": "CSmModeEvent::EActionInput::Weapon",
            "contents": "CSmModeEvent::EActionInput::Weapon"
        },
        {
            "trigger": "CSmModeEvent::EActionInput::Movement",
            "contents": "CSmModeEvent::EActionInput::Movement"
        },
        {
            "trigger": "CSmModeEvent::EActionInput::Activable1",
            "contents": "CSmModeEvent::EActionInput::Activable1"
        },
        {
            "trigger": "CSmModeEvent::EActionInput::Activable2",
            "contents": "CSmModeEvent::EActionInput::Activable2"
        },
        {
            "trigger": "CSmModeEvent::EActionInput::Activable3",
            "contents": "CSmModeEvent::EActionInput::Activable3"
        },
        {
            "trigger": "CSmModeEvent::EActionInput::Activable4",
            "contents": "CSmModeEvent::EActionInput::Activable4"
        },
        {
            "trigger": "CSmModeEvent::EActionInput::Consumable1",
            "contents": "CSmModeEvent::EActionInput::Consumable1"
        },
        {
            "trigger": "CSmModeEvent::EActionInput::Consumable2",
            "contents": "CSmModeEvent::EActionInput::Consumable2"
        },
        {
            "trigger": "CSmModeEvent::EActionInput::None",
            "contents": "CSmModeEvent::EActionInput::None"
        },
        {
            "trigger": "CSmModeEvent::EActionSlots::Weapon",
            "contents": "CSmModeEvent::EActionSlots::Weapon"
        },
        {
            "trigger": "CSmModeEvent::EActionSlots::Movement",
            "contents": "CSmModeEvent::EActionSlots::Movement"
        },
        {
            "trigger": "CSmModeEvent::EActionSlots::Activable1",
            "contents": "CSmModeEvent::EActionSlots::Activable1"
        },
        {
            "trigger": "CSmModeEvent::EActionSlots::Activable2",
            "contents": "CSmModeEvent::EActionSlots::Activable2"
        },
        {
            "trigger": "CSmModeEvent::EActionSlots::Activable3",
            "contents": "CSmModeEvent::EActionSlots::Activable3"
        },
        {
            "trigger": "CSmModeEvent::EActionSlots::Activable4",
            "contents": "CSmModeEvent::EActionSlots::Activable4"
        },
        {
            "trigger": "CSmModeEvent::EActionSlots::None",
            "contents": "CSmModeEvent::EActionSlots::None"
        },
        {
            "trigger": "EType CSmModeEvent.Type",
            "contents": "Type"
        },
        {
            "trigger": "CSmPlayer CSmModeEvent.Player",
            "contents": "Player"
        },
        {
            "trigger": "Integer CSmModeEvent.Damage",
            "contents": "Damage"
        },
        {
            "trigger": "CSmObject CSmModeEvent.VictimObject",
            "contents": "VictimObject"
        },
        {
            "trigger": "Integer CSmModeEvent.VictimShield",
            "contents": "VictimShield"
        },
        {
            "trigger": "CModeTurret CSmModeEvent.VictimTurret",
            "contents": "VictimTurret"
        },
        {
            "trigger": "Integer CSmModeEvent.ShooterPoints",
            "contents": "ShooterPoints"
        },
        {
            "trigger": "CSmPlayer CSmModeEvent.Shooter",
            "contents": "Shooter"
        },
        {
            "trigger": "CModeTurret CSmModeEvent.ShooterTurret",
            "contents": "ShooterTurret"
        },
        {
            "trigger": "Integer CSmModeEvent.ShooterClan",
            "contents": "ShooterClan"
        },
        {
            "trigger": "CSmPlayer CSmModeEvent.Victim",
            "contents": "Victim"
        },
        {
            "trigger": "Real CSmModeEvent.Height",
            "contents": "Height"
        },
        {
            "trigger": "Real CSmModeEvent.MissDist",
            "contents": "MissDist"
        },
        {
            "trigger": "Integer CSmModeEvent.WeaponNum",
            "contents": "WeaponNum"
        },
        {
            "trigger": "Boolean CSmModeEvent.ShooterUsedAction",
            "contents": "ShooterUsedAction"
        },
        {
            "trigger": "Integer CSmModeEvent.ShooterWeaponNum",
            "contents": "ShooterWeaponNum"
        },
        {
            "trigger": "EActionSlot CSmModeEvent.ShooterActionSlot",
            "contents": "ShooterActionSlot"
        },
        {
            "trigger": "Text CSmModeEvent.ShooterActionId",
            "contents": "ShooterActionId"
        },
        {
            "trigger": "Boolean CSmModeEvent.VictimUsedAction",
            "contents": "VictimUsedAction"
        },
        {
            "trigger": "Integer CSmModeEvent.VictimWeaponNum",
            "contents": "VictimWeaponNum"
        },
        {
            "trigger": "EActionSlot CSmModeEvent.VictimActionSlot",
            "contents": "VictimActionSlot"
        },
        {
            "trigger": "Text CSmModeEvent.VictimActionId",
            "contents": "VictimActionId"
        },
        {
            "trigger": "EActionSlot CSmModeEvent.Action_Slot",
            "contents": "Action_Slot"
        },
        {
            "trigger": "EActionInput CSmModeEvent.ActionInput",
            "contents": "ActionInput"
        },
        {
            "trigger": "Text CSmModeEvent.ActionId",
            "contents": "ActionId"
        },
        {
            "trigger": "Text CSmModeEvent.Param1",
            "contents": "Param1"
        },
        {
            "trigger": "Text[] CSmModeEvent.Param2",
            "contents": "Param2"
        },
        {
            "trigger": "CSmObject CSmModeEvent.Object",
            "contents": "Object"
        },
        {
            "trigger": "CSmMapSector CSmModeEvent.Sector",
            "contents": "Sector"
        },
        {
            "trigger": "CSmBlockPole CSmModeEvent.BlockPole",
            "contents": "BlockPole"
        },
        {
            "trigger": "CSmMapLandmark CSmModeEvent.Landmark",
            "contents": "Landmark"
        },
        {
            "trigger": "CUser CSmModeEvent.User",
            "contents": "User"
        },
        {
            "trigger": "Boolean CSmModeEvent.PlayerWasSpawned",
            "contents": "PlayerWasSpawned"
        },
        {
            "trigger": "Boolean CSmModeEvent.PlayerWasInLadderMatch",
            "contents": "PlayerWasInLadderMatch"
        },
        {
            "trigger": "Vec3 CSmModeEvent.PlayerLastPosition",
            "contents": "PlayerLastPosition"
        },
        {
            "trigger": "Vec3 CSmModeEvent.PlayerLastAimDirection",
            "contents": "PlayerLastAimDirection"
        },
        {
            "trigger": "Boolean CSmModeEvent.GiveUp",
            "contents": "GiveUp"
        },
        {
            "trigger": "Text CSmModeEvent.CommandName",
            "contents": "CommandName"
        },
        {
            "trigger": "Boolean CSmModeEvent.CommandValueBoolean",
            "contents": "CommandValueBoolean"
        },
        {
            "trigger": "Integer CSmModeEvent.CommandValueInteger",
            "contents": "CommandValueInteger"
        },
        {
            "trigger": "Real CSmModeEvent.CommandValueReal",
            "contents": "CommandValueReal"
        },
        {
            "trigger": "Text CSmModeEvent.CommandValueText",
            "contents": "CommandValueText"
        },
        {
            "trigger": "Integer CSmModeEvent.ActionChange",
            "contents": "ActionChange"
        },
        {
            "trigger": "CPresenceMgr",
            "contents": "CPresenceMgr"
        },
        {
            "trigger": "CPresenceMgr::ERichPresence::Undefined",
            "contents": "CPresenceMgr::ERichPresence::Undefined"
        },
        {
            "trigger": "CPresenceMgr::ERichPresence::MainMenu",
            "contents": "CPresenceMgr::ERichPresence::MainMenu"
        },
        {
            "trigger": "CPresenceMgr::ERichPresence::Solo",
            "contents": "CPresenceMgr::ERichPresence::Solo"
        },
        {
            "trigger": "CPresenceMgr::ERichPresence::Multi",
            "contents": "CPresenceMgr::ERichPresence::Multi"
        },
        {
            "trigger": "CPresenceMgr::ERichPresence::Party",
            "contents": "CPresenceMgr::ERichPresence::Party"
        },
        {
            "trigger": "CPresenceMgr::ERichPresence::Create",
            "contents": "CPresenceMgr::ERichPresence::Create"
        },
        {
            "trigger": "CTaskResult[] CPresenceMgr.TaskResults",
            "contents": "TaskResults"
        },
        {
            "trigger": "Void ReleaseTaskResult(Ident TaskId)",
            "contents": "ReleaseTaskResult(${1:Ident TaskId})"
        },
        {
            "trigger": "Void SetPresence(Ident UserId, ERichPresence UplayFlow)",
            "contents": "SetPresence(${1:Ident UserId}, ${2:ERichPresence UplayFlow})"
        },
        {
            "trigger": "CTaskResult_GetOnlinePresence GetOnlinePresenceForPlayers(Ident UserId)",
            "contents": "GetOnlinePresenceForPlayers(${1:Ident UserId})"
        },
        {
            "trigger": "CBlockModelVariantGround",
            "contents": "CBlockModelVariantGround"
        },
        {
            "trigger": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::Auto",
            "contents": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::Auto"
        },
        {
            "trigger": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::Force",
            "contents": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::Force"
        },
        {
            "trigger": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::DoNotPlace",
            "contents": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::DoNotPlace"
        },
        {
            "trigger": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::DoNotDestroy",
            "contents": "CBlockModelVariantGround::EnumAutoTerrainPlaceType::DoNotDestroy"
        },
        {
            "trigger": "CMlQuad",
            "contents": "CMlQuad"
        },
        {
            "trigger": "CMlQuad::EKeepRatioMode::Inactive",
            "contents": "CMlQuad::EKeepRatioMode::Inactive"
        },
        {
            "trigger": "CMlQuad::EKeepRatioMode::Clip",
            "contents": "CMlQuad::EKeepRatioMode::Clip"
        },
        {
            "trigger": "CMlQuad::EKeepRatioMode::Fit",
            "contents": "CMlQuad::EKeepRatioMode::Fit"
        },
        {
            "trigger": "CMlQuad::EBlendMode::Default",
            "contents": "CMlQuad::EBlendMode::Default"
        },
        {
            "trigger": "CMlQuad::EBlendMode::Add",
            "contents": "CMlQuad::EBlendMode::Add"
        },
        {
            "trigger": "CImage CMlQuad.Image",
            "contents": "Image"
        },
        {
            "trigger": "Text CMlQuad.ImageUrl",
            "contents": "ImageUrl"
        },
        {
            "trigger": "Text CMlQuad.ImageUrlFocus",
            "contents": "ImageUrlFocus"
        },
        {
            "trigger": "Text CMlQuad.Style",
            "contents": "Style"
        },
        {
            "trigger": "Text CMlQuad.Substyle",
            "contents": "Substyle"
        },
        {
            "trigger": "Boolean CMlQuad.StyleSelected",
            "contents": "StyleSelected"
        },
        {
            "trigger": "Boolean CMlQuad.DownloadInProgress",
            "contents": "DownloadInProgress"
        },
        {
            "trigger": "Vec3 CMlQuad.Colorize",
            "contents": "Colorize"
        },
        {
            "trigger": "Vec3 CMlQuad.ModulateColor",
            "contents": "ModulateColor"
        },
        {
            "trigger": "Vec3 CMlQuad.BgColor",
            "contents": "BgColor"
        },
        {
            "trigger": "Vec3 CMlQuad.BgColorFocus",
            "contents": "BgColorFocus"
        },
        {
            "trigger": "Real CMlQuad.Opacity",
            "contents": "Opacity"
        },
        {
            "trigger": "EKeepRatioMode CMlQuad.KeepRatio",
            "contents": "KeepRatio"
        },
        {
            "trigger": "EBlendMode CMlQuad.Blend",
            "contents": "Blend"
        },
        {
            "trigger": "Void ChangeImageUrl(Text fieldName)",
            "contents": "ChangeImageUrl(${1:Text fieldName})"
        },
        {
            "trigger": "CEditorMesh",
            "contents": "CEditorMesh"
        },
        {
            "trigger": "CEditorMesh::EEdgesDisplay::Any",
            "contents": "CEditorMesh::EEdgesDisplay::Any"
        },
        {
            "trigger": "CEditorMesh::EEdgesDisplay::Borders",
            "contents": "CEditorMesh::EEdgesDisplay::Borders"
        },
        {
            "trigger": "CEditorMesh::EEdgesDisplay::None",
            "contents": "CEditorMesh::EEdgesDisplay::None"
        },
        {
            "trigger": "CEditorMesh::EEdgesConstraint::Any",
            "contents": "CEditorMesh::EEdgesConstraint::Any"
        },
        {
            "trigger": "CEditorMesh::EEdgesConstraint::Adjacent",
            "contents": "CEditorMesh::EEdgesConstraint::Adjacent"
        },
        {
            "trigger": "CEditorMesh::EEdgesConstraint::Closed",
            "contents": "CEditorMesh::EEdgesConstraint::Closed"
        },
        {
            "trigger": "CEditorMesh::EElemType::Vertex",
            "contents": "CEditorMesh::EElemType::Vertex"
        },
        {
            "trigger": "CEditorMesh::EElemType::Edge",
            "contents": "CEditorMesh::EElemType::Edge"
        },
        {
            "trigger": "CEditorMesh::EElemType::Face",
            "contents": "CEditorMesh::EElemType::Face"
        },
        {
            "trigger": "CEditorMesh::EElemType::Any",
            "contents": "CEditorMesh::EElemType::Any"
        },
        {
            "trigger": "CEditorMesh::EInteraction::Creation",
            "contents": "CEditorMesh::EInteraction::Creation"
        },
        {
            "trigger": "CEditorMesh::EInteraction::Pick",
            "contents": "CEditorMesh::EInteraction::Pick"
        },
        {
            "trigger": "CEditorMesh::EInteraction::Selection",
            "contents": "CEditorMesh::EInteraction::Selection"
        },
        {
            "trigger": "CEditorMesh::EInteraction::Translation",
            "contents": "CEditorMesh::EInteraction::Translation"
        },
        {
            "trigger": "CEditorMesh::EInteraction::PickTranslation",
            "contents": "CEditorMesh::EInteraction::PickTranslation"
        },
        {
            "trigger": "CEditorMesh::EInteraction::Rotation",
            "contents": "CEditorMesh::EInteraction::Rotation"
        },
        {
            "trigger": "CEditorMesh::EInteraction::PickRotation",
            "contents": "CEditorMesh::EInteraction::PickRotation"
        },
        {
            "trigger": "CEditorMesh::EInteraction::Scale",
            "contents": "CEditorMesh::EInteraction::Scale"
        },
        {
            "trigger": "CEditorMesh::EInteraction::Split",
            "contents": "CEditorMesh::EInteraction::Split"
        },
        {
            "trigger": "CEditorMesh::EInteraction::Paste",
            "contents": "CEditorMesh::EInteraction::Paste"
        },
        {
            "trigger": "CEditorMesh::EInteraction::None",
            "contents": "CEditorMesh::EInteraction::None"
        },
        {
            "trigger": "CEditorMesh::ESelectionDragMode::Rect",
            "contents": "CEditorMesh::ESelectionDragMode::Rect"
        },
        {
            "trigger": "CEditorMesh::ESelectionDragMode::Spray",
            "contents": "CEditorMesh::ESelectionDragMode::Spray"
        },
        {
            "trigger": "CEditorMesh::ESelectionDragMode::Smart",
            "contents": "CEditorMesh::ESelectionDragMode::Smart"
        },
        {
            "trigger": "CEditorMesh::ESelectionDragMode::None",
            "contents": "CEditorMesh::ESelectionDragMode::None"
        },
        {
            "trigger": "CEditorMesh::ETexCoordLayer::Lightmap",
            "contents": "CEditorMesh::ETexCoordLayer::Lightmap"
        },
        {
            "trigger": "CEditorMesh::EMaterialFilterCriterion::IsAutomatic",
            "contents": "CEditorMesh::EMaterialFilterCriterion::IsAutomatic"
        },
        {
            "trigger": "CEditorMesh::EMaterialFilterCriterion::IsBadForHorizontalFaces",
            "contents": "CEditorMesh::EMaterialFilterCriterion::IsBadForHorizontalFaces"
        },
        {
            "trigger": "CEditorMesh::EMaterialFilterCriterion::IsBadForVerticalFaces",
            "contents": "CEditorMesh::EMaterialFilterCriterion::IsBadForVerticalFaces"
        },
        {
            "trigger": "CEditorMesh::EFilterKind::NoFilter",
            "contents": "CEditorMesh::EFilterKind::NoFilter"
        },
        {
            "trigger": "CEditorMesh::EFilterKind::PassIfMatches",
            "contents": "CEditorMesh::EFilterKind::PassIfMatches"
        },
        {
            "trigger": "CEditorMesh::EFilterKind::CutIfMatches",
            "contents": "CEditorMesh::EFilterKind::CutIfMatches"
        },
        {
            "trigger": "CEditorMesh::EUVEditorMode::UV",
            "contents": "CEditorMesh::EUVEditorMode::UV"
        },
        {
            "trigger": "CEditorMesh::EUVEditorMode::Atlas_ApplyOnClic",
            "contents": "CEditorMesh::EUVEditorMode::Atlas_ApplyOnClic"
        },
        {
            "trigger": "CEditorMesh::EUVEditorMode::Atlas_SelectOnClic",
            "contents": "CEditorMesh::EUVEditorMode::Atlas_SelectOnClic"
        },
        {
            "trigger": "Integer CEditorMesh.VertexCount",
            "contents": "VertexCount"
        },
        {
            "trigger": "Integer CEditorMesh.EdgeCount",
            "contents": "EdgeCount"
        },
        {
            "trigger": "Integer CEditorMesh.FaceCount",
            "contents": "FaceCount"
        },
        {
            "trigger": "Boolean CEditorMesh.EditionBox_IsPlaneOriented",
            "contents": "EditionBox_IsPlaneOriented"
        },
        {
            "trigger": "Real CEditorMesh.Scale",
            "contents": "Scale"
        },
        {
            "trigger": "Real CEditorMesh.Step",
            "contents": "Step"
        },
        {
            "trigger": "Real CEditorMesh.Size",
            "contents": "Size"
        },
        {
            "trigger": "Boolean CEditorMesh.DisplayVertices",
            "contents": "DisplayVertices"
        },
        {
            "trigger": "Boolean CEditorMesh.DisplayFaces",
            "contents": "DisplayFaces"
        },
        {
            "trigger": "EEdgesDisplay CEditorMesh.DisplayEdges",
            "contents": "DisplayEdges"
        },
        {
            "trigger": "Boolean CEditorMesh.GridSnap_IsActive",
            "contents": "GridSnap_IsActive"
        },
        {
            "trigger": "Ident[] CEditorMesh.MaterialIds",
            "contents": "MaterialIds"
        },
        {
            "trigger": "Integer CEditorMesh.Material_Atlas_SelectedSubTexIndex",
            "contents": "Material_Atlas_SelectedSubTexIndex"
        },
        {
            "trigger": "EInteraction CEditorMesh.CurrentInteraction",
            "contents": "CurrentInteraction"
        },
        {
            "trigger": "Integer CEditorMesh.CreationElemsCount",
            "contents": "CreationElemsCount"
        },
        {
            "trigger": "Boolean CEditorMesh.Display_HideElemsByDistance_IsActive",
            "contents": "Display_HideElemsByDistance_IsActive"
        },
        {
            "trigger": "Integer CEditorMesh.Display_HideElemsByDistance_Distance",
            "contents": "Display_HideElemsByDistance_Distance"
        },
        {
            "trigger": "Real CEditorMesh.Display_HideElemsByDistance_Opacity",
            "contents": "Display_HideElemsByDistance_Opacity"
        },
        {
            "trigger": "Ident CEditorMesh.SelectionSet",
            "contents": "SelectionSet"
        },
        {
            "trigger": "Text[] CEditorMesh.PrefabNames",
            "contents": "PrefabNames"
        },
        {
            "trigger": "Integer CEditorMesh.PrefabNamesUpdateId",
            "contents": "PrefabNamesUpdateId"
        },
        {
            "trigger": "CEditorEvent[] CEditorMesh.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "Void EditionBox_SetScale(Real Scale)",
            "contents": "EditionBox_SetScale(${1:Real Scale})"
        },
        {
            "trigger": "Void EditionBox_OrientPlane(Ident SetHandle)",
            "contents": "EditionBox_OrientPlane(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void EditedMesh_Clear()",
            "contents": "EditedMesh_Clear()"
        },
        {
            "trigger": "Void UVUnwrap(Ident SetHandle, ETexCoordLayer ETexCoordLayer)",
            "contents": "UVUnwrap(${1:Ident SetHandle}, ${2:ETexCoordLayer ETexCoordLayer})"
        },
        {
            "trigger": "Void Undo()",
            "contents": "Undo()"
        },
        {
            "trigger": "Void Redo()",
            "contents": "Redo()"
        },
        {
            "trigger": "Void SwitchPlane()",
            "contents": "SwitchPlane()"
        },
        {
            "trigger": "Void GridSnap_SetActive(Boolean IsActive)",
            "contents": "GridSnap_SetActive(${1:Boolean IsActive})"
        },
        {
            "trigger": "Vec3 PickInfo_GetNormal()",
            "contents": "PickInfo_GetNormal()"
        },
        {
            "trigger": "Vec3 PickInfo_GetPosition()",
            "contents": "PickInfo_GetPosition()"
        },
        {
            "trigger": "Vec3 PickInfo_GetNextVertexPosition()",
            "contents": "PickInfo_GetNextVertexPosition()"
        },
        {
            "trigger": "Ident PickInfo_GetMaterial()",
            "contents": "PickInfo_GetMaterial()"
        },
        {
            "trigger": "Text PickInfo_GetError()",
            "contents": "PickInfo_GetError()"
        },
        {
            "trigger": "Ident Material_GetMaterialIdSelected()",
            "contents": "Material_GetMaterialIdSelected()"
        },
        {
            "trigger": "Void Material_SetMaterialIdSelected(Ident MaterialEditorId)",
            "contents": "Material_SetMaterialIdSelected(${1:Ident MaterialEditorId})"
        },
        {
            "trigger": "Integer Material_GetSubTexIndexSelected()",
            "contents": "Material_GetSubTexIndexSelected()"
        },
        {
            "trigger": "Void Material_SetDefault(Ident MaterialId)",
            "contents": "Material_SetDefault(${1:Ident MaterialId})"
        },
        {
            "trigger": "Ident Material_GetDefault()",
            "contents": "Material_GetDefault()"
        },
        {
            "trigger": "CImage Material_GetBitmapBase(Ident MaterialId)",
            "contents": "Material_GetBitmapBase(${1:Ident MaterialId})"
        },
        {
            "trigger": "CImage Material_GetBitmap(Ident MaterialId)",
            "contents": "Material_GetBitmap(${1:Ident MaterialId})"
        },
        {
            "trigger": "Boolean Material_MatchesCriterion(Ident MaterialId, EMaterialFilterCriterion ResultSetHandle)",
            "contents": "Material_MatchesCriterion(${1:Ident MaterialId}, ${2:EMaterialFilterCriterion ResultSetHandle})"
        },
        {
            "trigger": "Void Material_SetFilter(EMaterialFilterCriterion Criterion, EFilterKind FilterKind)",
            "contents": "Material_SetFilter(${1:EMaterialFilterCriterion Criterion}, ${2:EFilterKind FilterKind})"
        },
        {
            "trigger": "EFilterKind Material_GetFilter(EMaterialFilterCriterion Criterion)",
            "contents": "Material_GetFilter(${1:EMaterialFilterCriterion Criterion})"
        },
        {
            "trigger": "Void Material_ClearFilters()",
            "contents": "Material_ClearFilters()"
        },
        {
            "trigger": "Void Material_UVEditor_SetIsRotation(Boolean IsRotation)",
            "contents": "Material_UVEditor_SetIsRotation(${1:Boolean IsRotation})"
        },
        {
            "trigger": "Void Material_UVEditor_SetIsScale(Boolean IsScale)",
            "contents": "Material_UVEditor_SetIsScale(${1:Boolean IsScale})"
        },
        {
            "trigger": "Void Material_UVEditor_Open(Ident MaterialId, CMlQuad LocationQuad)",
            "contents": "Material_UVEditor_Open(${1:Ident MaterialId}, ${2:CMlQuad LocationQuad})"
        },
        {
            "trigger": "Void Material_UVEditor_Close()",
            "contents": "Material_UVEditor_Close()"
        },
        {
            "trigger": "Void Material_UVEditor_SetMode(EUVEditorMode Mode)",
            "contents": "Material_UVEditor_SetMode(${1:EUVEditorMode Mode})"
        },
        {
            "trigger": "EUVEditorMode Material_UVEditor_GetMode()",
            "contents": "Material_UVEditor_GetMode()"
        },
        {
            "trigger": "Void Interaction_Abort()",
            "contents": "Interaction_Abort()"
        },
        {
            "trigger": "Void Interaction_SetPreview(Ident SetToPreview)",
            "contents": "Interaction_SetPreview(${1:Ident SetToPreview})"
        },
        {
            "trigger": "Void Interaction_StartCreation(EEdgesConstraint EdgesConstraint, Boolean UseGrid, Ident CreationSetHandle, EElemType ElemType, Boolean RightClickClose, Ident SetToPickFromHandle)",
            "contents": "Interaction_StartCreation(${1:EEdgesConstraint EdgesConstraint}, ${2:Boolean UseGrid}, ${3:Ident CreationSetHandle}, ${4:EElemType ElemType}, ${5:Boolean RightClickClose}, ${6:Ident SetToPickFromHandle})"
        },
        {
            "trigger": "Void Interaction_Creation_GetElems(Ident ResultSetHandle)",
            "contents": "Interaction_Creation_GetElems(${1:Ident ResultSetHandle})"
        },
        {
            "trigger": "Void Interaction_CloseCreation()",
            "contents": "Interaction_CloseCreation()"
        },
        {
            "trigger": "Void Interaction_StartPaste()",
            "contents": "Interaction_StartPaste()"
        },
        {
            "trigger": "Void Interaction_StartPick(EElemType ElemType)",
            "contents": "Interaction_StartPick(${1:EElemType ElemType})"
        },
        {
            "trigger": "Void Interaction_StartSelection(Ident SelectionSetHandle, EElemType ElemType, Boolean UseDoubleClickToSelectConnected, ESelectionDragMode DragMode, Ident SelectionSetToPickFrom)",
            "contents": "Interaction_StartSelection(${1:Ident SelectionSetHandle}, ${2:EElemType ElemType}, ${3:Boolean UseDoubleClickToSelectConnected}, ${4:ESelectionDragMode DragMode}, ${5:Ident SelectionSetToPickFrom})"
        },
        {
            "trigger": "Void Interaction_CloseSelection()",
            "contents": "Interaction_CloseSelection()"
        },
        {
            "trigger": "Void Display_HighlightSet(Ident SetHandle)",
            "contents": "Display_HighlightSet(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void Display_ClearHighlighting()",
            "contents": "Display_ClearHighlighting()"
        },
        {
            "trigger": "Void Display_AtlasSelectionsSet(Boolean DisplayAtlasSelection)",
            "contents": "Display_AtlasSelectionsSet(${1:Boolean DisplayAtlasSelection})"
        },
        {
            "trigger": "Boolean Display_AtlasSelectionsGet()",
            "contents": "Display_AtlasSelectionsGet()"
        },
        {
            "trigger": "Void Display_HideElemsByDistance_Start(Ident SetHandle)",
            "contents": "Display_HideElemsByDistance_Start(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void Display_HideElemsByDistance_Stop()",
            "contents": "Display_HideElemsByDistance_Stop()"
        },
        {
            "trigger": "Void MergeAllSuperposedElements(Ident SetHandle)",
            "contents": "MergeAllSuperposedElements(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void Interaction_StartTranslation(Ident TranslationSetHandle)",
            "contents": "Interaction_StartTranslation(${1:Ident TranslationSetHandle})"
        },
        {
            "trigger": "Void Interaction_StartPickTranslation(Ident TranslationSetHandle)",
            "contents": "Interaction_StartPickTranslation(${1:Ident TranslationSetHandle})"
        },
        {
            "trigger": "Void Interaction_StartRotation(Ident RotationSetHandle)",
            "contents": "Interaction_StartRotation(${1:Ident RotationSetHandle})"
        },
        {
            "trigger": "Void Interaction_StartPickRotation(Ident RotationSetHandle)",
            "contents": "Interaction_StartPickRotation(${1:Ident RotationSetHandle})"
        },
        {
            "trigger": "Void Interaction_StartPickScale(Ident ScalingSetHandle, Boolean IsScaling1D)",
            "contents": "Interaction_StartPickScale(${1:Ident ScalingSetHandle}, ${2:Boolean IsScaling1D})"
        },
        {
            "trigger": "Void Interaction_StartSplit()",
            "contents": "Interaction_StartSplit()"
        },
        {
            "trigger": "Void Selection_Undo()",
            "contents": "Selection_Undo()"
        },
        {
            "trigger": "Void Selection_Redo()",
            "contents": "Selection_Redo()"
        },
        {
            "trigger": "Ident SetOfElements_Create()",
            "contents": "SetOfElements_Create()"
        },
        {
            "trigger": "Void SetOfElements_CopyFrom(Ident DestinationSet, Ident SourceSet)",
            "contents": "SetOfElements_CopyFrom(${1:Ident DestinationSet}, ${2:Ident SourceSet})"
        },
        {
            "trigger": "Void SetOfElements_Append(Ident DestinationSet, Ident SourceSet)",
            "contents": "SetOfElements_Append(${1:Ident DestinationSet}, ${2:Ident SourceSet})"
        },
        {
            "trigger": "Void SetOfElements_Destroy(Ident SetHandle)",
            "contents": "SetOfElements_Destroy(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void SetOfElements_Empty(Ident SetHandle)",
            "contents": "SetOfElements_Empty(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void SetOfElements_SetAllElements(Ident SetHandle)",
            "contents": "SetOfElements_SetAllElements(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void SetOfElements_SetAllFaces(Ident SetHandle)",
            "contents": "SetOfElements_SetAllFaces(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void SetOfElements_DeleteElements(Ident SetHandle)",
            "contents": "SetOfElements_DeleteElements(${1:Ident SetHandle})"
        },
        {
            "trigger": "Boolean SetOfElements_HasHorizontalFaces(Ident SetHandle)",
            "contents": "SetOfElements_HasHorizontalFaces(${1:Ident SetHandle})"
        },
        {
            "trigger": "Boolean SetOfElements_HasVerticalFaces(Ident SetHandle)",
            "contents": "SetOfElements_HasVerticalFaces(${1:Ident SetHandle})"
        },
        {
            "trigger": "Integer SetOfElements_GetElemsCount(Ident SetHandle)",
            "contents": "SetOfElements_GetElemsCount(${1:Ident SetHandle})"
        },
        {
            "trigger": "Integer SetOfElements_GetVerticesCount(Ident SetHandle)",
            "contents": "SetOfElements_GetVerticesCount(${1:Ident SetHandle})"
        },
        {
            "trigger": "Integer SetOfElements_GetEdgesCount(Ident SetHandle)",
            "contents": "SetOfElements_GetEdgesCount(${1:Ident SetHandle})"
        },
        {
            "trigger": "Integer SetOfElements_GetFacesCount(Ident SetHandle)",
            "contents": "SetOfElements_GetFacesCount(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void ExtendSelectedSet(Ident SetHandle)",
            "contents": "ExtendSelectedSet(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void GetBordersVertexs(Ident SetHandle, Ident SetVertexHandle)",
            "contents": "GetBordersVertexs(${1:Ident SetHandle}, ${2:Ident SetVertexHandle})"
        },
        {
            "trigger": "Void Curve2DPolygon(Ident FourVertexSetHandle, Ident Sethandle, Integer SubTexIndex)",
            "contents": "Curve2DPolygon(${1:Ident FourVertexSetHandle}, ${2:Ident Sethandle}, ${3:Integer SubTexIndex})"
        },
        {
            "trigger": "Ident AtlasSelection_Create()",
            "contents": "AtlasSelection_Create()"
        },
        {
            "trigger": "Void AtlasSelection_GetAtlasSelectionHandleFromSet(Ident SetHandle)",
            "contents": "AtlasSelection_GetAtlasSelectionHandleFromSet(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void AtlasSelections_AddAtlasSelectionFromSet(Ident SetHandle, Ident FourPointsHandle)",
            "contents": "AtlasSelections_AddAtlasSelectionFromSet(${1:Ident SetHandle}, ${2:Ident FourPointsHandle})"
        },
        {
            "trigger": "Void AtlasSelections_SubAtlasSelection(Ident SetHandle)",
            "contents": "AtlasSelections_SubAtlasSelection(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void AtlasSelections_TextureAtlasSelection(Ident SetHandle, Integer SubTexIndex)",
            "contents": "AtlasSelections_TextureAtlasSelection(${1:Ident SetHandle}, ${2:Integer SubTexIndex})"
        },
        {
            "trigger": "Void AtlasSelections_GetAtlasSelectionAfterSelection(Ident Sethandle)",
            "contents": "AtlasSelections_GetAtlasSelectionAfterSelection(${1:Ident Sethandle})"
        },
        {
            "trigger": "Void Preview_Clear()",
            "contents": "Preview_Clear()"
        },
        {
            "trigger": "Boolean BlocTransformation_Start(Ident SetHandle)",
            "contents": "BlocTransformation_Start(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void BlocTransformation_Translate(Vec3 Translation)",
            "contents": "BlocTransformation_Translate(${1:Vec3 Translation})"
        },
        {
            "trigger": "Void BlocTransformation_Twist(Real Angle)",
            "contents": "BlocTransformation_Twist(${1:Real Angle})"
        },
        {
            "trigger": "Void BlocTransformation_Bend(Integer Axis, Real Radius, Real Angle, Boolean Direction)",
            "contents": "BlocTransformation_Bend(${1:Integer Axis}, ${2:Real Radius}, ${3:Real Angle}, ${4:Boolean Direction})"
        },
        {
            "trigger": "Void BlocTransformation_Abort()",
            "contents": "BlocTransformation_Abort()"
        },
        {
            "trigger": "Void BlocTransformation_Close()",
            "contents": "BlocTransformation_Close()"
        },
        {
            "trigger": "Void VoxelSpace_Init(Integer Size, Boolean UseColors)",
            "contents": "VoxelSpace_Init(${1:Integer Size}, ${2:Boolean UseColors})"
        },
        {
            "trigger": "Void VoxelSpace_Destroy()",
            "contents": "VoxelSpace_Destroy()"
        },
        {
            "trigger": "Boolean VoxelSpace_Get(Int3 Pos)",
            "contents": "VoxelSpace_Get(${1:Int3 Pos})"
        },
        {
            "trigger": "Void VoxelSpace_Set(Int3 Pos)",
            "contents": "VoxelSpace_Set(${1:Int3 Pos})"
        },
        {
            "trigger": "Void VoxelSpace_Set(Int3 Pos, Vec3 Color)",
            "contents": "VoxelSpace_Set(${1:Int3 Pos}, ${2:Vec3 Color})"
        },
        {
            "trigger": "Void VoxelSpace_Unset(Int3 Pos)",
            "contents": "VoxelSpace_Unset(${1:Int3 Pos})"
        },
        {
            "trigger": "Void VoxelSpace_GenerateMesh()",
            "contents": "VoxelSpace_GenerateMesh()"
        },
        {
            "trigger": "Void SetOfElements_ProjectOnPlane(Ident SetHandle)",
            "contents": "SetOfElements_ProjectOnPlane(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void SetOfVertices_DrawCircle(Ident InputSetHandle, Ident ResultSetHandle)",
            "contents": "SetOfVertices_DrawCircle(${1:Ident InputSetHandle}, ${2:Ident ResultSetHandle})"
        },
        {
            "trigger": "Void SetOfVertices_DrawDisc(Ident InputSetHandle, Ident ResultSetHandle)",
            "contents": "SetOfVertices_DrawDisc(${1:Ident InputSetHandle}, ${2:Ident ResultSetHandle})"
        },
        {
            "trigger": "Void SetOfVertices_DrawCircle(Ident CenterSetHandle, Vec3 PointOnCircle, Ident ResultSetHandle)",
            "contents": "SetOfVertices_DrawCircle(${1:Ident CenterSetHandle}, ${2:Vec3 PointOnCircle}, ${3:Ident ResultSetHandle})"
        },
        {
            "trigger": "Void SetOfVertices_DrawSpline(Ident ControlSetHandle, Ident ResultSetHandle)",
            "contents": "SetOfVertices_DrawSpline(${1:Ident ControlSetHandle}, ${2:Ident ResultSetHandle})"
        },
        {
            "trigger": "Void SetOfVertices_Weld(Ident VerticesSetHandle)",
            "contents": "SetOfVertices_Weld(${1:Ident VerticesSetHandle})"
        },
        {
            "trigger": "Void SetOfVertices_DrawBox(Ident ControlSetHandle, Ident ResultSetHandle)",
            "contents": "SetOfVertices_DrawBox(${1:Ident ControlSetHandle}, ${2:Ident ResultSetHandle})"
        },
        {
            "trigger": "Void SetOfEdges_Fill(Ident SetHandle)",
            "contents": "SetOfEdges_Fill(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void SetOfEdges_BorderExpand(Ident SetHandle)",
            "contents": "SetOfEdges_BorderExpand(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void SetOfOneEdge_FaceLoopExpand(Ident SetHandle)",
            "contents": "SetOfOneEdge_FaceLoopExpand(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void SetOfOneEdge_EdgeLoopExpand(Ident SetHandle)",
            "contents": "SetOfOneEdge_EdgeLoopExpand(${1:Ident SetHandle})"
        },
        {
            "trigger": "Void SetOfOneFace_CutHole(Ident FaceSetHandle, Ident EdgesSetHandle)",
            "contents": "SetOfOneFace_CutHole(${1:Ident FaceSetHandle}, ${2:Ident EdgesSetHandle})"
        },
        {
            "trigger": "Void SetOfFaces_Extrude(Ident SetHandle, Ident ResultSetHandle)",
            "contents": "SetOfFaces_Extrude(${1:Ident SetHandle}, ${2:Ident ResultSetHandle})"
        },
        {
            "trigger": "Void SetOfFaces_ApplyMaterial(Ident SetHandle, Ident MaterialId)",
            "contents": "SetOfFaces_ApplyMaterial(${1:Ident SetHandle}, ${2:Ident MaterialId})"
        },
        {
            "trigger": "Void SetOfFaces_PlanarExpand(Ident FacesSetHandle)",
            "contents": "SetOfFaces_PlanarExpand(${1:Ident FacesSetHandle})"
        },
        {
            "trigger": "Void SetOfFaces_ChangeOrientation(Ident FacesSetHandle)",
            "contents": "SetOfFaces_ChangeOrientation(${1:Ident FacesSetHandle})"
        },
        {
            "trigger": "Void Prefab_Export()",
            "contents": "Prefab_Export()"
        },
        {
            "trigger": "Void Prefab_Import(Integer PrefabIndex)",
            "contents": "Prefab_Import(${1:Integer PrefabIndex})"
        },
        {
            "trigger": "Void Cut()",
            "contents": "Cut()"
        },
        {
            "trigger": "Void Copy()",
            "contents": "Copy()"
        },
        {
            "trigger": "Void SetBaseUndoState()",
            "contents": "SetBaseUndoState()"
        },
        {
            "trigger": "Void AddUndoState()",
            "contents": "AddUndoState()"
        },
        {
            "trigger": "CInputManager",
            "contents": "CInputManager"
        },
        {
            "trigger": "CInputManager::EButton::Left",
            "contents": "CInputManager::EButton::Left"
        },
        {
            "trigger": "CInputManager::EButton::Right",
            "contents": "CInputManager::EButton::Right"
        },
        {
            "trigger": "CInputManager::EButton::Up",
            "contents": "CInputManager::EButton::Up"
        },
        {
            "trigger": "CInputManager::EButton::Down",
            "contents": "CInputManager::EButton::Down"
        },
        {
            "trigger": "CInputManager::EButton::A",
            "contents": "CInputManager::EButton::A"
        },
        {
            "trigger": "CInputManager::EButton::B",
            "contents": "CInputManager::EButton::B"
        },
        {
            "trigger": "CInputManager::EButton::X",
            "contents": "CInputManager::EButton::X"
        },
        {
            "trigger": "CInputManager::EButton::Y",
            "contents": "CInputManager::EButton::Y"
        },
        {
            "trigger": "CInputManager::EButton::L1",
            "contents": "CInputManager::EButton::L1"
        },
        {
            "trigger": "CInputManager::EButton::R1",
            "contents": "CInputManager::EButton::R1"
        },
        {
            "trigger": "CInputManager::EButton::LeftStick",
            "contents": "CInputManager::EButton::LeftStick"
        },
        {
            "trigger": "CInputManager::EButton::RightStick",
            "contents": "CInputManager::EButton::RightStick"
        },
        {
            "trigger": "CInputManager::EButton::Menu",
            "contents": "CInputManager::EButton::Menu"
        },
        {
            "trigger": "CInputManager::EButton::View",
            "contents": "CInputManager::EButton::View"
        },
        {
            "trigger": "CInputManager::EButton::LeftStick_Left",
            "contents": "CInputManager::EButton::LeftStick_Left"
        },
        {
            "trigger": "CInputManager::EButton::LeftStick_Right",
            "contents": "CInputManager::EButton::LeftStick_Right"
        },
        {
            "trigger": "CInputManager::EButton::LeftStick_Up",
            "contents": "CInputManager::EButton::LeftStick_Up"
        },
        {
            "trigger": "CInputManager::EButton::LeftStick_Down",
            "contents": "CInputManager::EButton::LeftStick_Down"
        },
        {
            "trigger": "CInputManager::EButton::RightStick_Left",
            "contents": "CInputManager::EButton::RightStick_Left"
        },
        {
            "trigger": "CInputManager::EButton::RightStick_Right",
            "contents": "CInputManager::EButton::RightStick_Right"
        },
        {
            "trigger": "CInputManager::EButton::RightStick_Up",
            "contents": "CInputManager::EButton::RightStick_Up"
        },
        {
            "trigger": "CInputManager::EButton::RightStick_Down",
            "contents": "CInputManager::EButton::RightStick_Down"
        },
        {
            "trigger": "CInputManager::EButton::L2",
            "contents": "CInputManager::EButton::L2"
        },
        {
            "trigger": "CInputManager::EButton::R2",
            "contents": "CInputManager::EButton::R2"
        },
        {
            "trigger": "CInputManager::EButton::None",
            "contents": "CInputManager::EButton::None"
        },
        {
            "trigger": "CInputEvent[] CInputManager.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "Integer CInputManager.Now",
            "contents": "Now"
        },
        {
            "trigger": "Integer CInputManager.Period",
            "contents": "Period"
        },
        {
            "trigger": "CInputPad[] CInputManager.Pads",
            "contents": "Pads"
        },
        {
            "trigger": "Vec2 CInputManager.MousePos",
            "contents": "MousePos"
        },
        {
            "trigger": "Boolean CInputManager.MouseLeftButton",
            "contents": "MouseLeftButton"
        },
        {
            "trigger": "Boolean CInputManager.MouseRightButton",
            "contents": "MouseRightButton"
        },
        {
            "trigger": "Boolean CInputManager.MouseMiddleButton",
            "contents": "MouseMiddleButton"
        },
        {
            "trigger": "Boolean CInputManager.ExclusiveMode",
            "contents": "ExclusiveMode"
        },
        {
            "trigger": "Integer CInputManager.Dbg_AutoRepeat_InitialDelay",
            "contents": "Dbg_AutoRepeat_InitialDelay"
        },
        {
            "trigger": "Integer CInputManager.Dbg_AutoRepeat_Period",
            "contents": "Dbg_AutoRepeat_Period"
        },
        {
            "trigger": "Text GetPadButtonPlaygroundBinding(CInputPad Pad, EButton Button)",
            "contents": "GetPadButtonPlaygroundBinding(${1:CInputPad Pad}, ${2:EButton Button})"
        },
        {
            "trigger": "Text GetPadButtonCurrentBinding(CInputPad Pad, EButton Button)",
            "contents": "GetPadButtonCurrentBinding(${1:CInputPad Pad}, ${2:EButton Button})"
        },
        {
            "trigger": "Text GetPadButtonBinding(CInputPad Pad, EButton Button)",
            "contents": "GetPadButtonBinding(${1:CInputPad Pad}, ${2:EButton Button})"
        },
        {
            "trigger": "Boolean IsKeyPressed(Integer KeyCode)",
            "contents": "IsKeyPressed(${1:Integer KeyCode})"
        },
        {
            "trigger": "CBlockModelVariantAir",
            "contents": "CBlockModelVariantAir"
        },
        {
            "trigger": "CTmPlayer",
            "contents": "CTmPlayer"
        },
        {
            "trigger": "CTmPlayer::ETmRacePlayerCoopMode::None",
            "contents": "CTmPlayer::ETmRacePlayerCoopMode::None"
        },
        {
            "trigger": "CTmPlayer::ETmRacePlayerCoopMode::Symbiosys",
            "contents": "CTmPlayer::ETmRacePlayerCoopMode::Symbiosys"
        },
        {
            "trigger": "CTmPlayer::ETmRacePlayerCoopMode::Checkpoint",
            "contents": "CTmPlayer::ETmRacePlayerCoopMode::Checkpoint"
        },
        {
            "trigger": "CTmPlayer::ETmJumpMode::Disabled",
            "contents": "CTmPlayer::ETmJumpMode::Disabled"
        },
        {
            "trigger": "CTmPlayer::ETmJumpMode::Simple",
            "contents": "CTmPlayer::ETmJumpMode::Simple"
        },
        {
            "trigger": "CTmPlayer::ETmJumpMode::Double",
            "contents": "CTmPlayer::ETmJumpMode::Double"
        },
        {
            "trigger": "CTmPlayer::ETmJumpMode::Infinite",
            "contents": "CTmPlayer::ETmJumpMode::Infinite"
        },
        {
            "trigger": "Integer CTmPlayer.CurrentClan",
            "contents": "CurrentClan"
        },
        {
            "trigger": "CTmScore CTmPlayer.Score",
            "contents": "Score"
        },
        {
            "trigger": "Integer CTmPlayer.RaceStartTime",
            "contents": "RaceStartTime"
        },
        {
            "trigger": "Boolean CTmPlayer.IsSpawned",
            "contents": "IsSpawned"
        },
        {
            "trigger": "CTmResult CTmPlayer.CurRace",
            "contents": "CurRace"
        },
        {
            "trigger": "CTmResult CTmPlayer.CurLap",
            "contents": "CurLap"
        },
        {
            "trigger": "Integer CTmPlayer.CurrentNbLaps",
            "contents": "CurrentNbLaps"
        },
        {
            "trigger": "Integer CTmPlayer.CurTriggerIndex",
            "contents": "CurTriggerIndex"
        },
        {
            "trigger": "Vec3 CTmPlayer.Position",
            "contents": "Position"
        },
        {
            "trigger": "Real CTmPlayer.AimYaw",
            "contents": "AimYaw"
        },
        {
            "trigger": "Real CTmPlayer.AimPitch",
            "contents": "AimPitch"
        },
        {
            "trigger": "Vec3 CTmPlayer.AimDirection",
            "contents": "AimDirection"
        },
        {
            "trigger": "Ident CTmPlayer.ForceModelId",
            "contents": "ForceModelId"
        },
        {
            "trigger": "Real CTmPlayer.AccelCoef",
            "contents": "AccelCoef"
        },
        {
            "trigger": "Real CTmPlayer.ControlCoef",
            "contents": "ControlCoef"
        },
        {
            "trigger": "Real CTmPlayer.GravityCoef",
            "contents": "GravityCoef"
        },
        {
            "trigger": "ETmRacePlayerCoopMode CTmPlayer.CoopMode",
            "contents": "CoopMode"
        },
        {
            "trigger": "Integer CTmPlayer.ControllerCount",
            "contents": "ControllerCount"
        },
        {
            "trigger": "Integer CTmPlayer.ControllerId0",
            "contents": "ControllerId0"
        },
        {
            "trigger": "Integer CTmPlayer.ControllerId1",
            "contents": "ControllerId1"
        },
        {
            "trigger": "Integer CTmPlayer.ControllerId2",
            "contents": "ControllerId2"
        },
        {
            "trigger": "Integer CTmPlayer.ControllerId3",
            "contents": "ControllerId3"
        },
        {
            "trigger": "Boolean CTmPlayer.ForcedAerialCamera",
            "contents": "ForcedAerialCamera"
        },
        {
            "trigger": "Boolean CTmPlayer.ButtonSmashFrenzy",
            "contents": "ButtonSmashFrenzy"
        },
        {
            "trigger": "Boolean CTmPlayer.EnableTurboButton",
            "contents": "EnableTurboButton"
        },
        {
            "trigger": "Boolean CTmPlayer.MaxiAirControl",
            "contents": "MaxiAirControl"
        },
        {
            "trigger": "Boolean CTmPlayer.EnableEmptyCars",
            "contents": "EnableEmptyCars"
        },
        {
            "trigger": "ETmJumpMode CTmPlayer.JumpMode",
            "contents": "JumpMode"
        },
        {
            "trigger": "Boolean CTmPlayer.TinyCar",
            "contents": "TinyCar"
        },
        {
            "trigger": "Boolean CTmPlayer.EnableCatchUpSpeed",
            "contents": "EnableCatchUpSpeed"
        },
        {
            "trigger": "Boolean CTmPlayer.EnableStuntMode",
            "contents": "EnableStuntMode"
        },
        {
            "trigger": "Boolean CTmPlayer.EnableOnlineMode",
            "contents": "EnableOnlineMode"
        },
        {
            "trigger": "CTaskResult_Ghost",
            "contents": "CTaskResult_Ghost"
        },
        {
            "trigger": "CGhost CTaskResult_Ghost.Ghost",
            "contents": "Ghost"
        },
        {
            "trigger": "CPackCreatorRecipient",
            "contents": "CPackCreatorRecipient"
        },
        {
            "trigger": "Text CPackCreatorRecipient.Login",
            "contents": "Login"
        },
        {
            "trigger": "Integer CPackCreatorRecipient.GetCost",
            "contents": "GetCost"
        },
        {
            "trigger": "Integer CPackCreatorRecipient.UseCost",
            "contents": "UseCost"
        },
        {
            "trigger": "CTmMapType",
            "contents": "CTmMapType"
        },
        {
            "trigger": "CTmMode CTmMapType.Mode",
            "contents": "Mode"
        },
        {
            "trigger": "CTmPlayer[] CTmMapType.AllPlayers",
            "contents": "AllPlayers"
        },
        {
            "trigger": "CTmPlayer[] CTmMapType.Players",
            "contents": "Players"
        },
        {
            "trigger": "Void TMObjective_SetFromBestRace(CTmScore Score)",
            "contents": "TMObjective_SetFromBestRace(${1:CTmScore Score})"
        },
        {
            "trigger": "CSmActionEvent",
            "contents": "CSmActionEvent"
        },
        {
            "trigger": "CSmActionEvent::EType::OnHitPlayer",
            "contents": "CSmActionEvent::EType::OnHitPlayer"
        },
        {
            "trigger": "CSmActionEvent::EType::OnProjectileEnd",
            "contents": "CSmActionEvent::EType::OnProjectileEnd"
        },
        {
            "trigger": "CSmActionEvent::EType::OnActiveChange",
            "contents": "CSmActionEvent::EType::OnActiveChange"
        },
        {
            "trigger": "CSmActionEvent::EType::OnHitObject",
            "contents": "CSmActionEvent::EType::OnHitObject"
        },
        {
            "trigger": "CSmActionEvent::EType::OnHitShield",
            "contents": "CSmActionEvent::EType::OnHitShield"
        },
        {
            "trigger": "CSmActionEvent::EType::OnShieldEnd",
            "contents": "CSmActionEvent::EType::OnShieldEnd"
        },
        {
            "trigger": "EType CSmActionEvent.Type",
            "contents": "Type"
        },
        {
            "trigger": "CSmPlayer CSmActionEvent.Player",
            "contents": "Player"
        },
        {
            "trigger": "CSmObject CSmActionEvent.Object",
            "contents": "Object"
        },
        {
            "trigger": "Integer CSmActionEvent.Damage",
            "contents": "Damage"
        },
        {
            "trigger": "Ident CSmActionEvent.ProjectileModelId",
            "contents": "ProjectileModelId"
        },
        {
            "trigger": "Integer CSmActionEvent.ContextId",
            "contents": "ContextId"
        },
        {
            "trigger": "Vec3 CSmActionEvent.Position",
            "contents": "Position"
        },
        {
            "trigger": "Vec3 CSmActionEvent.Direction",
            "contents": "Direction"
        },
        {
            "trigger": "Vec3 CSmActionEvent.Normal",
            "contents": "Normal"
        },
        {
            "trigger": "Integer CSmActionEvent.Shield",
            "contents": "Shield"
        },
        {
            "trigger": "CAchievementsEvent",
            "contents": "CAchievementsEvent"
        },
        {
            "trigger": "CAchievementsEvent::EType::NewAchievement",
            "contents": "CAchievementsEvent::EType::NewAchievement"
        },
        {
            "trigger": "EType CAchievementsEvent.Type",
            "contents": "Type"
        },
        {
            "trigger": "CAchievementsAchievement CAchievementsEvent.Achievement",
            "contents": "Achievement"
        },
        {
            "trigger": "CBadge",
            "contents": "CBadge"
        },
        {
            "trigger": "Vec3 CBadge.PrimaryColor",
            "contents": "PrimaryColor"
        },
        {
            "trigger": "Text CBadge.SkinName",
            "contents": "SkinName"
        },
        {
            "trigger": "Text[] CBadge.Layers",
            "contents": "Layers"
        },
        {
            "trigger": "Text StickerSlot_Get(Text Slot)",
            "contents": "StickerSlot_Get(${1:Text Slot})"
        },
        {
            "trigger": "Void StickerSlot_Set(Text Slot, Text Sticker)",
            "contents": "StickerSlot_Set(${1:Text Slot}, ${2:Text Sticker})"
        },
        {
            "trigger": "Void StickerSlot_Clear()",
            "contents": "StickerSlot_Clear()"
        },
        {
            "trigger": "CTaskResult_FileList",
            "contents": "CTaskResult_FileList"
        },
        {
            "trigger": "Text CTaskResult_FileList.ParentPath",
            "contents": "ParentPath"
        },
        {
            "trigger": "Text CTaskResult_FileList.Path",
            "contents": "Path"
        },
        {
            "trigger": "Text[] CTaskResult_FileList.Files",
            "contents": "Files"
        },
        {
            "trigger": "Text[] CTaskResult_FileList.SubFolders",
            "contents": "SubFolders"
        },
        {
            "trigger": "CTaskResult_CheckTargetedPrivilege",
            "contents": "CTaskResult_CheckTargetedPrivilege"
        },
        {
            "trigger": "Void AddLogin(Text Login)",
            "contents": "AddLogin(${1:Text Login})"
        },
        {
            "trigger": "Void StartTask()",
            "contents": "StartTask()"
        },
        {
            "trigger": "Boolean HasPrivilege(Text Login)",
            "contents": "HasPrivilege(${1:Text Login})"
        },
        {
            "trigger": "Text GetDenyReason(Text Login)",
            "contents": "GetDenyReason(${1:Text Login})"
        },
        {
            "trigger": "CModuleMenu",
            "contents": "CModuleMenu"
        },
        {
            "trigger": "Void Menu_Goto(Text PageId)",
            "contents": "Menu_Goto(${1:Text PageId})"
        },
        {
            "trigger": "Void Menu_Back()",
            "contents": "Menu_Back()"
        },
        {
            "trigger": "Void Menu_Previous()",
            "contents": "Menu_Previous()"
        },
        {
            "trigger": "Void Menu_Quit()",
            "contents": "Menu_Quit()"
        },
        {
            "trigger": "CMapEditorPluginEvent",
            "contents": "CMapEditorPluginEvent"
        },
        {
            "trigger": "CMapEditorPluginEvent::Type::LayerCustomEvent",
            "contents": "CMapEditorPluginEvent::Type::LayerCustomEvent"
        },
        {
            "trigger": "CMapEditorPluginEvent::Type::KeyPress",
            "contents": "CMapEditorPluginEvent::Type::KeyPress"
        },
        {
            "trigger": "CMapEditorPluginEvent::Type::MenuNavigation",
            "contents": "CMapEditorPluginEvent::Type::MenuNavigation"
        },
        {
            "trigger": "CMapEditorPluginEvent::Type::CursorSelectionBegin",
            "contents": "CMapEditorPluginEvent::Type::CursorSelectionBegin"
        },
        {
            "trigger": "CMapEditorPluginEvent::Type::CursorSelectionEnd",
            "contents": "CMapEditorPluginEvent::Type::CursorSelectionEnd"
        },
        {
            "trigger": "CMapEditorPluginEvent::Type::CursorChange",
            "contents": "CMapEditorPluginEvent::Type::CursorChange"
        },
        {
            "trigger": "CMapEditorPluginEvent::Type::MapModified",
            "contents": "CMapEditorPluginEvent::Type::MapModified"
        },
        {
            "trigger": "CMapEditorPluginEvent::Type::EditorInput",
            "contents": "CMapEditorPluginEvent::Type::EditorInput"
        },
        {
            "trigger": "CMapEditorPluginEvent::Type::EditAnchor",
            "contents": "CMapEditorPluginEvent::Type::EditAnchor"
        },
        {
            "trigger": "CMapEditorPluginEvent::Type::EditObjectives",
            "contents": "CMapEditorPluginEvent::Type::EditObjectives"
        },
        {
            "trigger": "CMapEditorPluginEvent::Type::StartValidation",
            "contents": "CMapEditorPluginEvent::Type::StartValidation"
        },
        {
            "trigger": "CMapEditorPluginEvent::Type::StartTest",
            "contents": "CMapEditorPluginEvent::Type::StartTest"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::Unknown",
            "contents": "CMapEditorPluginEvent::EInput::Unknown"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::Menu",
            "contents": "CMapEditorPluginEvent::EInput::Menu"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::SwitchToRace",
            "contents": "CMapEditorPluginEvent::EInput::SwitchToRace"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::Undo",
            "contents": "CMapEditorPluginEvent::EInput::Undo"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::Redo",
            "contents": "CMapEditorPluginEvent::EInput::Redo"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CursorUp",
            "contents": "CMapEditorPluginEvent::EInput::CursorUp"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CursorRight",
            "contents": "CMapEditorPluginEvent::EInput::CursorRight"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CursorDown",
            "contents": "CMapEditorPluginEvent::EInput::CursorDown"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CursorLeft",
            "contents": "CMapEditorPluginEvent::EInput::CursorLeft"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CursorRaise",
            "contents": "CMapEditorPluginEvent::EInput::CursorRaise"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CursorLower",
            "contents": "CMapEditorPluginEvent::EInput::CursorLower"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CursorTurn",
            "contents": "CMapEditorPluginEvent::EInput::CursorTurn"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CursorPick",
            "contents": "CMapEditorPluginEvent::EInput::CursorPick"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CursorPlace",
            "contents": "CMapEditorPluginEvent::EInput::CursorPlace"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CursorDelete",
            "contents": "CMapEditorPluginEvent::EInput::CursorDelete"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CameraUp",
            "contents": "CMapEditorPluginEvent::EInput::CameraUp"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CameraRight",
            "contents": "CMapEditorPluginEvent::EInput::CameraRight"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CameraDown",
            "contents": "CMapEditorPluginEvent::EInput::CameraDown"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CameraLeft",
            "contents": "CMapEditorPluginEvent::EInput::CameraLeft"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CameraZoomNext",
            "contents": "CMapEditorPluginEvent::EInput::CameraZoomNext"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::Camera0",
            "contents": "CMapEditorPluginEvent::EInput::Camera0"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::Camera1",
            "contents": "CMapEditorPluginEvent::EInput::Camera1"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::Camera3",
            "contents": "CMapEditorPluginEvent::EInput::Camera3"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::Camera7",
            "contents": "CMapEditorPluginEvent::EInput::Camera7"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::Camera9",
            "contents": "CMapEditorPluginEvent::EInput::Camera9"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::PivotChange",
            "contents": "CMapEditorPluginEvent::EInput::PivotChange"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CursorTurnSlightly",
            "contents": "CMapEditorPluginEvent::EInput::CursorTurnSlightly"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::CursorTurnSlightlyAntiClockwise",
            "contents": "CMapEditorPluginEvent::EInput::CursorTurnSlightlyAntiClockwise"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::IconUp",
            "contents": "CMapEditorPluginEvent::EInput::IconUp"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::IconRight",
            "contents": "CMapEditorPluginEvent::EInput::IconRight"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::IconDown",
            "contents": "CMapEditorPluginEvent::EInput::IconDown"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::IconLeft",
            "contents": "CMapEditorPluginEvent::EInput::IconLeft"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::RemoveAll",
            "contents": "CMapEditorPluginEvent::EInput::RemoveAll"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::Save",
            "contents": "CMapEditorPluginEvent::EInput::Save"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::SaveAs",
            "contents": "CMapEditorPluginEvent::EInput::SaveAs"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::MapStyle",
            "contents": "CMapEditorPluginEvent::EInput::MapStyle"
        },
        {
            "trigger": "CMapEditorPluginEvent::EInput::ClassicMapEditor",
            "contents": "CMapEditorPluginEvent::EInput::ClassicMapEditor"
        },
        {
            "trigger": "Type CMapEditorPluginEvent.Type",
            "contents": "Type"
        },
        {
            "trigger": "EInput CMapEditorPluginEvent.Input",
            "contents": "Input"
        },
        {
            "trigger": "Ident CMapEditorPluginEvent.EditedAnchorDataId",
            "contents": "EditedAnchorDataId"
        },
        {
            "trigger": "Boolean CMapEditorPluginEvent.IsFromPad",
            "contents": "IsFromPad"
        },
        {
            "trigger": "Boolean CMapEditorPluginEvent.IsFromMouse",
            "contents": "IsFromMouse"
        },
        {
            "trigger": "Boolean CMapEditorPluginEvent.IsFromKeyboard",
            "contents": "IsFromKeyboard"
        },
        {
            "trigger": "CPackCreator",
            "contents": "CPackCreator"
        },
        {
            "trigger": "Boolean CPackCreator.RegisterPack_IsInProgess",
            "contents": "RegisterPack_IsInProgess"
        },
        {
            "trigger": "CPackCreatorPack CPackCreator.CurrentPack",
            "contents": "CurrentPack"
        },
        {
            "trigger": "Void RegisterPackForEditedTitle()",
            "contents": "RegisterPackForEditedTitle()"
        },
        {
            "trigger": "Ident Build_Begin(CPackCreatorPack Pack, CPackCreatorTitleInfo TitleInfo)",
            "contents": "Build_Begin(${1:CPackCreatorPack Pack}, ${2:CPackCreatorTitleInfo TitleInfo})"
        },
        {
            "trigger": "Void Build_AddFile(Ident BuildId, Text FileName)",
            "contents": "Build_AddFile(${1:Ident BuildId}, ${2:Text FileName})"
        },
        {
            "trigger": "Void Build_AddFolder(Ident BuildId, Text FolderName)",
            "contents": "Build_AddFolder(${1:Ident BuildId}, ${2:Text FolderName})"
        },
        {
            "trigger": "Void Build_AddFile(Ident BuildId, Text FileName, Boolean IsPublic, Boolean IsInternal, Boolean NoAutomaticDeps)",
            "contents": "Build_AddFile(${1:Ident BuildId}, ${2:Text FileName}, ${3:Boolean IsPublic}, ${4:Boolean IsInternal}, ${5:Boolean NoAutomaticDeps})"
        },
        {
            "trigger": "Void Build_AddFolder(Ident BuildId, Text FolderName, Boolean IsPublic, Boolean IsInternal, Boolean NoRecursion, Boolean NoAutomaticDeps)",
            "contents": "Build_AddFolder(${1:Ident BuildId}, ${2:Text FolderName}, ${3:Boolean IsPublic}, ${4:Boolean IsInternal}, ${5:Boolean NoRecursion}, ${6:Boolean NoAutomaticDeps})"
        },
        {
            "trigger": "Void Build_Generate(Ident BuildId, Boolean Upload)",
            "contents": "Build_Generate(${1:Ident BuildId}, ${2:Boolean Upload})"
        },
        {
            "trigger": "Boolean Build_IsGenerated(Ident BuildId)",
            "contents": "Build_IsGenerated(${1:Ident BuildId})"
        },
        {
            "trigger": "Text Build_ErrorMessage(Ident BuildId)",
            "contents": "Build_ErrorMessage(${1:Ident BuildId})"
        },
        {
            "trigger": "Void Build_End(Ident BuildId)",
            "contents": "Build_End(${1:Ident BuildId})"
        },
        {
            "trigger": "CUserV2Manager",
            "contents": "CUserV2Manager"
        },
        {
            "trigger": "CUserV2[] CUserV2Manager.Users",
            "contents": "Users"
        },
        {
            "trigger": "CInputPad CUserV2Manager.MainUserPad",
            "contents": "MainUserPad"
        },
        {
            "trigger": "Boolean CUserV2Manager.MainUserLogged",
            "contents": "MainUserLogged"
        },
        {
            "trigger": "CUserV2 CUserV2Manager.MainUser",
            "contents": "MainUser"
        },
        {
            "trigger": "Void RequestMainUserChange()",
            "contents": "RequestMainUserChange()"
        },
        {
            "trigger": "CMlEntry",
            "contents": "CMlEntry"
        },
        {
            "trigger": "CMlEntry::ETextFormat::Basic",
            "contents": "CMlEntry::ETextFormat::Basic"
        },
        {
            "trigger": "CMlEntry::ETextFormat::Script",
            "contents": "CMlEntry::ETextFormat::Script"
        },
        {
            "trigger": "CMlEntry::ETextFormat::Password",
            "contents": "CMlEntry::ETextFormat::Password"
        },
        {
            "trigger": "CMlEntry::ETextFormat::Newpassword",
            "contents": "CMlEntry::ETextFormat::Newpassword"
        },
        {
            "trigger": "Text CMlEntry.Value",
            "contents": "Value"
        },
        {
            "trigger": "ETextFormat CMlEntry.TextFormat",
            "contents": "TextFormat"
        },
        {
            "trigger": "Real CMlEntry.Opacity",
            "contents": "Opacity"
        },
        {
            "trigger": "Vec3 CMlEntry.TextColor",
            "contents": "TextColor"
        },
        {
            "trigger": "Real CMlEntry.TextSizeReal",
            "contents": "TextSizeReal"
        },
        {
            "trigger": "Integer CMlEntry.MaxLine",
            "contents": "MaxLine"
        },
        {
            "trigger": "Boolean CMlEntry.AutoNewLine",
            "contents": "AutoNewLine"
        },
        {
            "trigger": "Void StartEdition()",
            "contents": "StartEdition()"
        },
        {
            "trigger": "Void SetText(Text NewText, Boolean SendSubmitEvent)",
            "contents": "SetText(${1:Text NewText}, ${2:Boolean SendSubmitEvent})"
        },
        {
            "trigger": "CModuleMenuModel",
            "contents": "CModuleMenuModel"
        },
        {
            "trigger": "CModuleMenuPageModel[] CModuleMenuModel.Pages",
            "contents": "Pages"
        },
        {
            "trigger": "Text CModuleMenuModel.MenuScript",
            "contents": "MenuScript"
        },
        {
            "trigger": "CModuleMenuPageModel AddPage(Text PageUrl)",
            "contents": "AddPage(${1:Text PageUrl})"
        },
        {
            "trigger": "Void AddLink(CModuleMenuPageModel ParentPage, CModuleMenuPageModel ChildPage)",
            "contents": "AddLink(${1:CModuleMenuPageModel ParentPage}, ${2:CModuleMenuPageModel ChildPage})"
        },
        {
            "trigger": "CVideo",
            "contents": "CVideo"
        },
        {
            "trigger": "CVideo::ETextureFilter::Default",
            "contents": "CVideo::ETextureFilter::Default"
        },
        {
            "trigger": "CVideo::ETextureFilter::Point",
            "contents": "CVideo::ETextureFilter::Point"
        },
        {
            "trigger": "CImage CVideo.Image",
            "contents": "Image"
        },
        {
            "trigger": "Boolean CVideo.IsLooping",
            "contents": "IsLooping"
        },
        {
            "trigger": "Boolean CVideo.DownloadInProgress",
            "contents": "DownloadInProgress"
        },
        {
            "trigger": "Real CVideo.PlayLength",
            "contents": "PlayLength"
        },
        {
            "trigger": "Boolean CVideo.IsProcessing",
            "contents": "IsProcessing"
        },
        {
            "trigger": "Boolean CVideo.AutoProcessing",
            "contents": "AutoProcessing"
        },
        {
            "trigger": "Boolean CVideo.IsPlaying",
            "contents": "IsPlaying"
        },
        {
            "trigger": "Real CVideo.PlayCursor",
            "contents": "PlayCursor"
        },
        {
            "trigger": "ETextureFilter CVideo.TextureFilter",
            "contents": "TextureFilter"
        },
        {
            "trigger": "Void BeginProcessing()",
            "contents": "BeginProcessing()"
        },
        {
            "trigger": "Void EndProcessing()",
            "contents": "EndProcessing()"
        },
        {
            "trigger": "Void Play()",
            "contents": "Play()"
        },
        {
            "trigger": "Void Pause()",
            "contents": "Pause()"
        },
        {
            "trigger": "Void Stop()",
            "contents": "Stop()"
        },
        {
            "trigger": "CMacroblockModel",
            "contents": "CMacroblockModel"
        },
        {
            "trigger": "Boolean CMacroblockModel.IsGround",
            "contents": "IsGround"
        },
        {
            "trigger": "Boolean CMacroblockModel.HasStart",
            "contents": "HasStart"
        },
        {
            "trigger": "Boolean CMacroblockModel.HasFinish",
            "contents": "HasFinish"
        },
        {
            "trigger": "Boolean CMacroblockModel.HasCheckpoint",
            "contents": "HasCheckpoint"
        },
        {
            "trigger": "Boolean CMacroblockModel.HasMultilap",
            "contents": "HasMultilap"
        },
        {
            "trigger": "CBlockModel CMacroblockModel.GeneratedBlockModel",
            "contents": "GeneratedBlockModel"
        },
        {
            "trigger": "Text CMacroblockModel.Name",
            "contents": "Name"
        },
        {
            "trigger": "Void ClearScriptMetadata()",
            "contents": "ClearScriptMetadata()"
        },
        {
            "trigger": "CManiaAppStation",
            "contents": "CManiaAppStation"
        },
        {
            "trigger": "CStation CManiaAppStation.Station",
            "contents": "Station"
        },
        {
            "trigger": "CPackCreatorTitleInfo[] CManiaAppStation.Maker_EditedTitles",
            "contents": "Maker_EditedTitles"
        },
        {
            "trigger": "Void EnterStation()",
            "contents": "EnterStation()"
        },
        {
            "trigger": "Void Maker_EditTitle(Text EditedTitleId)",
            "contents": "Maker_EditTitle(${1:Text EditedTitleId})"
        },
        {
            "trigger": "Void Maker_EditNewTitle(Text EditedTitleName)",
            "contents": "Maker_EditNewTitle(${1:Text EditedTitleName})"
        },
        {
            "trigger": "CUIConfigMgr",
            "contents": "CUIConfigMgr"
        },
        {
            "trigger": "CUIConfig CUIConfigMgr.UIAll",
            "contents": "UIAll"
        },
        {
            "trigger": "CUIConfig[] CUIConfigMgr.UI",
            "contents": "UI"
        },
        {
            "trigger": "CUILayer[] CUIConfigMgr.UILayers",
            "contents": "UILayers"
        },
        {
            "trigger": "CUILayer[] CUIConfigMgr.UIReplayLayers",
            "contents": "UIReplayLayers"
        },
        {
            "trigger": "Integer CUIConfigMgr.UISequenceMaxDuration",
            "contents": "UISequenceMaxDuration"
        },
        {
            "trigger": "Boolean CUIConfigMgr.HoldLoadingScreen",
            "contents": "HoldLoadingScreen"
        },
        {
            "trigger": "CUIConfigEvent[] CUIConfigMgr.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "Void ResetAll()",
            "contents": "ResetAll()"
        },
        {
            "trigger": "CUIConfig GetUI(CPlayer Player)",
            "contents": "GetUI(${1:CPlayer Player})"
        },
        {
            "trigger": "CUIConfig GetUI(CUser User)",
            "contents": "GetUI(${1:CUser User})"
        },
        {
            "trigger": "CUILayer UILayerCreate()",
            "contents": "UILayerCreate()"
        },
        {
            "trigger": "Void UILayerDestroy(CUILayer Layer)",
            "contents": "UILayerDestroy(${1:CUILayer Layer})"
        },
        {
            "trigger": "Void UILayerDestroyAll()",
            "contents": "UILayerDestroyAll()"
        },
        {
            "trigger": "CDataFileMgr",
            "contents": "CDataFileMgr"
        },
        {
            "trigger": "CDataFileMgr::EMediaType::Image",
            "contents": "CDataFileMgr::EMediaType::Image"
        },
        {
            "trigger": "CDataFileMgr::EMediaType::Sound",
            "contents": "CDataFileMgr::EMediaType::Sound"
        },
        {
            "trigger": "CDataFileMgr::EMediaType::Script",
            "contents": "CDataFileMgr::EMediaType::Script"
        },
        {
            "trigger": "CDataFileMgr::EMediaType::MatchSettings",
            "contents": "CDataFileMgr::EMediaType::MatchSettings"
        },
        {
            "trigger": "CDataFileMgr::EMediaType::Module",
            "contents": "CDataFileMgr::EMediaType::Module"
        },
        {
            "trigger": "CTaskResult[] CDataFileMgr.TaskResults",
            "contents": "TaskResults"
        },
        {
            "trigger": "CCampaign[] CDataFileMgr.Campaigns",
            "contents": "Campaigns"
        },
        {
            "trigger": "CGhost[] CDataFileMgr.Ghosts",
            "contents": "Ghosts"
        },
        {
            "trigger": "Void TaskResult_Release(Ident TaskId)",
            "contents": "TaskResult_Release(${1:Ident TaskId})"
        },
        {
            "trigger": "CCampaign Campaign_Get(Text CampaignId)",
            "contents": "Campaign_Get(${1:Text CampaignId})"
        },
        {
            "trigger": "CTaskResult_MapList Map_GetUserList(Ident UserId)",
            "contents": "Map_GetUserList(${1:Ident UserId})"
        },
        {
            "trigger": "CTaskResult_MapList Map_GetGameList(Text Path, Boolean Flatten)",
            "contents": "Map_GetGameList(${1:Text Path}, ${2:Boolean Flatten})"
        },
        {
            "trigger": "CTaskResult_MapList Map_GetFilteredGameList(Integer Scope, Text Path, Boolean Flatten)",
            "contents": "Map_GetFilteredGameList(${1:Integer Scope}, ${2:Text Path}, ${3:Boolean Flatten})"
        },
        {
            "trigger": "Void Ghost_Release(Ident GhostId)",
            "contents": "Ghost_Release(${1:Ident GhostId})"
        },
        {
            "trigger": "CTaskResult_ReplayList Replay_GetGameList(Text Path, Boolean Flatten)",
            "contents": "Replay_GetGameList(${1:Text Path}, ${2:Boolean Flatten})"
        },
        {
            "trigger": "CTaskResult_ReplayList Replay_GetFilteredGameList(Integer Scope, Text Path, Boolean Flatten)",
            "contents": "Replay_GetFilteredGameList(${1:Integer Scope}, ${2:Text Path}, ${3:Boolean Flatten})"
        },
        {
            "trigger": "CTaskResult_GhostList Replay_Load(Text Path)",
            "contents": "Replay_Load(${1:Text Path})"
        },
        {
            "trigger": "CTaskResult Replay_Save(Text Path, CMap Map, CGhost Ghost)",
            "contents": "Replay_Save(${1:Text Path}, ${2:CMap Map}, ${3:CGhost Ghost})"
        },
        {
            "trigger": "CTaskResult_FileList Media_GetGameList(EMediaType Type, Text Path, Boolean Flatten)",
            "contents": "Media_GetGameList(${1:EMediaType Type}, ${2:Text Path}, ${3:Boolean Flatten})"
        },
        {
            "trigger": "CTaskResult_FileList Media_GetFilteredGameList(EMediaType Type, Integer Scope, Text Path, Boolean Flatten)",
            "contents": "Media_GetFilteredGameList(${1:EMediaType Type}, ${2:Integer Scope}, ${3:Text Path}, ${4:Boolean Flatten})"
        },
        {
            "trigger": "CMlScript",
            "contents": "CMlScript"
        },
        {
            "trigger": "CMlScript::LinkType::ExternalBrowser",
            "contents": "CMlScript::LinkType::ExternalBrowser"
        },
        {
            "trigger": "CMlScript::LinkType::ManialinkBrowser",
            "contents": "CMlScript::LinkType::ManialinkBrowser"
        },
        {
            "trigger": "CMlScript::LinkType::Goto",
            "contents": "CMlScript::LinkType::Goto"
        },
        {
            "trigger": "CMlScript::LinkType::ExternalFromId",
            "contents": "CMlScript::LinkType::ExternalFromId"
        },
        {
            "trigger": "CMlScript::LinkType::ManialinkFromId",
            "contents": "CMlScript::LinkType::ManialinkFromId"
        },
        {
            "trigger": "CMlScript::LinkType::GotoFromId",
            "contents": "CMlScript::LinkType::GotoFromId"
        },
        {
            "trigger": "CMlScript::ESystemPlatform::None",
            "contents": "CMlScript::ESystemPlatform::None"
        },
        {
            "trigger": "CMlScript::ESystemPlatform::Steam",
            "contents": "CMlScript::ESystemPlatform::Steam"
        },
        {
            "trigger": "CMlScript::ESystemPlatform::UPlay",
            "contents": "CMlScript::ESystemPlatform::UPlay"
        },
        {
            "trigger": "CMlScript::ESystemPlatform::PS4",
            "contents": "CMlScript::ESystemPlatform::PS4"
        },
        {
            "trigger": "CMlScript::ESystemPlatform::XBoxOne",
            "contents": "CMlScript::ESystemPlatform::XBoxOne"
        },
        {
            "trigger": "CMlScript::ESystemSkuIdentifier::Unknown",
            "contents": "CMlScript::ESystemSkuIdentifier::Unknown"
        },
        {
            "trigger": "CMlScript::ESystemSkuIdentifier::EU",
            "contents": "CMlScript::ESystemSkuIdentifier::EU"
        },
        {
            "trigger": "CMlScript::ESystemSkuIdentifier::US",
            "contents": "CMlScript::ESystemSkuIdentifier::US"
        },
        {
            "trigger": "CMlScript::ESystemSkuIdentifier::JP",
            "contents": "CMlScript::ESystemSkuIdentifier::JP"
        },
        {
            "trigger": "CMlPage CMlScript.Page",
            "contents": "Page"
        },
        {
            "trigger": "Boolean CMlScript.PageIsVisible",
            "contents": "PageIsVisible"
        },
        {
            "trigger": "Integer CMlScript.Now",
            "contents": "Now"
        },
        {
            "trigger": "Integer CMlScript.Period",
            "contents": "Period"
        },
        {
            "trigger": "Integer CMlScript.CurrentTime",
            "contents": "CurrentTime"
        },
        {
            "trigger": "Text CMlScript.CurrentTimeText",
            "contents": "CurrentTimeText"
        },
        {
            "trigger": "Text CMlScript.CurrentLocalDateText",
            "contents": "CurrentLocalDateText"
        },
        {
            "trigger": "Text CMlScript.CurrentTimezone",
            "contents": "CurrentTimezone"
        },
        {
            "trigger": "CUser CMlScript.LocalUser",
            "contents": "LocalUser"
        },
        {
            "trigger": "CTitle CMlScript.LoadedTitle",
            "contents": "LoadedTitle"
        },
        {
            "trigger": "ESystemPlatform CMlScript.SystemPlatform",
            "contents": "SystemPlatform"
        },
        {
            "trigger": "ESystemSkuIdentifier CMlScript.SystemSkuIdentifier",
            "contents": "SystemSkuIdentifier"
        },
        {
            "trigger": "CMlScriptEvent[] CMlScript.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "Boolean CMlScript.Dbg_WarnOnDroppedEvents",
            "contents": "Dbg_WarnOnDroppedEvents"
        },
        {
            "trigger": "Real CMlScript.MouseX",
            "contents": "MouseX"
        },
        {
            "trigger": "Real CMlScript.MouseY",
            "contents": "MouseY"
        },
        {
            "trigger": "Boolean CMlScript.MouseLeftButton",
            "contents": "MouseLeftButton"
        },
        {
            "trigger": "Boolean CMlScript.MouseRightButton",
            "contents": "MouseRightButton"
        },
        {
            "trigger": "Boolean CMlScript.MouseMiddleButton",
            "contents": "MouseMiddleButton"
        },
        {
            "trigger": "Boolean CMlScript.KeyUp",
            "contents": "KeyUp"
        },
        {
            "trigger": "Boolean CMlScript.KeyDown",
            "contents": "KeyDown"
        },
        {
            "trigger": "Boolean CMlScript.KeyLeft",
            "contents": "KeyLeft"
        },
        {
            "trigger": "Boolean CMlScript.KeyRight",
            "contents": "KeyRight"
        },
        {
            "trigger": "Boolean CMlScript.KeyReturn",
            "contents": "KeyReturn"
        },
        {
            "trigger": "Boolean CMlScript.KeySpace",
            "contents": "KeySpace"
        },
        {
            "trigger": "Boolean CMlScript.KeyDelete",
            "contents": "KeyDelete"
        },
        {
            "trigger": "Boolean CMlScript.EnableMenuNavigationInputs",
            "contents": "EnableMenuNavigationInputs"
        },
        {
            "trigger": "Boolean CMlScript.IsMenuNavigationForeground",
            "contents": "IsMenuNavigationForeground"
        },
        {
            "trigger": "CXmlManager CMlScript.Xml",
            "contents": "Xml"
        },
        {
            "trigger": "CHttpManager CMlScript.Http",
            "contents": "Http"
        },
        {
            "trigger": "CVideoManager CMlScript.Video",
            "contents": "Video"
        },
        {
            "trigger": "CAudioManager CMlScript.Audio",
            "contents": "Audio"
        },
        {
            "trigger": "CInputManager CMlScript.Input",
            "contents": "Input"
        },
        {
            "trigger": "CDataFileMgr CMlScript.DataFileMgr",
            "contents": "DataFileMgr"
        },
        {
            "trigger": "CScoreMgr CMlScript.ScoreMgr",
            "contents": "ScoreMgr"
        },
        {
            "trigger": "CPrivilegeMgr CMlScript.PrivilegeMgr",
            "contents": "PrivilegeMgr"
        },
        {
            "trigger": "CPresenceMgr CMlScript.PresenceMgr",
            "contents": "PresenceMgr"
        },
        {
            "trigger": "CAnimManager CMlScript.AnimMgr",
            "contents": "AnimMgr"
        },
        {
            "trigger": "Void Dbg_SetProcessed(CMlScriptEvent Event)",
            "contents": "Dbg_SetProcessed(${1:CMlScriptEvent Event})"
        },
        {
            "trigger": "Boolean IsKeyPressed(Integer KeyCode)",
            "contents": "IsKeyPressed(${1:Integer KeyCode})"
        },
        {
            "trigger": "Void EnableMenuNavigation(Boolean EnableInputs, Boolean WithAutoFocus, CMlControl AutoBackControl, Integer InputPriority)",
            "contents": "EnableMenuNavigation(${1:Boolean EnableInputs}, ${2:Boolean WithAutoFocus}, ${3:CMlControl AutoBackControl}, ${4:Integer InputPriority})"
        },
        {
            "trigger": "Void OpenLink(Text Url, LinkType LinkType)",
            "contents": "OpenLink(${1:Text Url}, ${2:LinkType LinkType})"
        },
        {
            "trigger": "Void TriggerPageAction(Text ActionString)",
            "contents": "TriggerPageAction(${1:Text ActionString})"
        },
        {
            "trigger": "Void SendCustomEvent(Text Type, Text[] Data)",
            "contents": "SendCustomEvent(${1:Text Type}, ${2:Text[] Data})"
        },
        {
            "trigger": "Void PreloadImage(Text ImageUrl)",
            "contents": "PreloadImage(${1:Text ImageUrl})"
        },
        {
            "trigger": "Void PreloadAll()",
            "contents": "PreloadAll()"
        },
        {
            "trigger": "Text Dbg_DumpDeclareForVariables(CNod Nod, Boolean StatsOnly)",
            "contents": "Dbg_DumpDeclareForVariables(${1:CNod Nod}, ${2:Boolean StatsOnly})"
        },
        {
            "trigger": "CManiaAppTitleLayer",
            "contents": "CManiaAppTitleLayer"
        },
        {
            "trigger": "CManiaAppTitle CManiaAppTitleLayer.ParentApp",
            "contents": "ParentApp"
        },
        {
            "trigger": "CTitleFlow CManiaAppTitleLayer.TitleControl",
            "contents": "TitleControl"
        },
        {
            "trigger": "CTitleFlow CManiaAppTitleLayer.TitleFlow",
            "contents": "TitleFlow"
        },
        {
            "trigger": "CMlLabel",
            "contents": "CMlLabel"
        },
        {
            "trigger": "CMlLabel::EBlendMode::Default",
            "contents": "CMlLabel::EBlendMode::Default"
        },
        {
            "trigger": "CMlLabel::EBlendMode::Add",
            "contents": "CMlLabel::EBlendMode::Add"
        },
        {
            "trigger": "Text CMlLabel.Style",
            "contents": "Style"
        },
        {
            "trigger": "Text CMlLabel.Substyle",
            "contents": "Substyle"
        },
        {
            "trigger": "Text CMlLabel.TextFont",
            "contents": "TextFont"
        },
        {
            "trigger": "Text CMlLabel.Value",
            "contents": "Value"
        },
        {
            "trigger": "Integer CMlLabel.ValueLineCount",
            "contents": "ValueLineCount"
        },
        {
            "trigger": "Integer CMlLabel.MaxLine",
            "contents": "MaxLine"
        },
        {
            "trigger": "Real CMlLabel.LineSpacing",
            "contents": "LineSpacing"
        },
        {
            "trigger": "Boolean CMlLabel.AppendEllipsis",
            "contents": "AppendEllipsis"
        },
        {
            "trigger": "Boolean CMlLabel.AutoNewLine",
            "contents": "AutoNewLine"
        },
        {
            "trigger": "Real CMlLabel.Opacity",
            "contents": "Opacity"
        },
        {
            "trigger": "Vec3 CMlLabel.TextColor",
            "contents": "TextColor"
        },
        {
            "trigger": "Real CMlLabel.TextSizeReal",
            "contents": "TextSizeReal"
        },
        {
            "trigger": "EBlendMode CMlLabel.Blend",
            "contents": "Blend"
        },
        {
            "trigger": "Void SetText(Text NewText)",
            "contents": "SetText(${1:Text NewText})"
        },
        {
            "trigger": "Real ComputeWidth(Text Text)",
            "contents": "ComputeWidth(${1:Text Text})"
        },
        {
            "trigger": "Real ComputeWidth(Text Text, Boolean Translated)",
            "contents": "ComputeWidth(${1:Text Text}, ${2:Boolean Translated})"
        },
        {
            "trigger": "Real ComputeHeight(Text Text)",
            "contents": "ComputeHeight(${1:Text Text})"
        },
        {
            "trigger": "CModulePlayground",
            "contents": "CModulePlayground"
        },
        {
            "trigger": "Void Hide()",
            "contents": "Hide()"
        },
        {
            "trigger": "Void Hide(CUIConfig UIConfig)",
            "contents": "Hide(${1:CUIConfig UIConfig})"
        },
        {
            "trigger": "Void Show()",
            "contents": "Show()"
        },
        {
            "trigger": "Void Show(CUIConfig UIConfig)",
            "contents": "Show(${1:CUIConfig UIConfig})"
        },
        {
            "trigger": "Boolean IsVisible(CUIConfig UIConfig)",
            "contents": "IsVisible(${1:CUIConfig UIConfig})"
        },
        {
            "trigger": "CSmMapType",
            "contents": "CSmMapType"
        },
        {
            "trigger": "CSmMode CSmMapType.Mode",
            "contents": "Mode"
        },
        {
            "trigger": "CSmPlayer[] CSmMapType.AllPlayers",
            "contents": "AllPlayers"
        },
        {
            "trigger": "CSmPlayer[] CSmMapType.Players",
            "contents": "Players"
        },
        {
            "trigger": "CBlockModelVariant",
            "contents": "CBlockModelVariant"
        },
        {
            "trigger": "CBlockModelVariant::CardinalDirEnum::North",
            "contents": "CBlockModelVariant::CardinalDirEnum::North"
        },
        {
            "trigger": "CBlockModelVariant::CardinalDirEnum::East",
            "contents": "CBlockModelVariant::CardinalDirEnum::East"
        },
        {
            "trigger": "CBlockModelVariant::CardinalDirEnum::South",
            "contents": "CBlockModelVariant::CardinalDirEnum::South"
        },
        {
            "trigger": "CBlockModelVariant::CardinalDirEnum::West",
            "contents": "CBlockModelVariant::CardinalDirEnum::West"
        },
        {
            "trigger": "CBlockModelVariant::MultiDirEnum::SameDir",
            "contents": "CBlockModelVariant::MultiDirEnum::SameDir"
        },
        {
            "trigger": "CBlockModelVariant::MultiDirEnum::SymmetricalDirs",
            "contents": "CBlockModelVariant::MultiDirEnum::SymmetricalDirs"
        },
        {
            "trigger": "CBlockModelVariant::MultiDirEnum::AllDir",
            "contents": "CBlockModelVariant::MultiDirEnum::AllDir"
        },
        {
            "trigger": "CBlockModelVariant::MultiDirEnum::OpposedDirOnly",
            "contents": "CBlockModelVariant::MultiDirEnum::OpposedDirOnly"
        },
        {
            "trigger": "CBlockModelVariant::MultiDirEnum::PerpendicularDirsOnly",
            "contents": "CBlockModelVariant::MultiDirEnum::PerpendicularDirsOnly"
        },
        {
            "trigger": "CBlockModelVariant::MultiDirEnum::NextDirOnly",
            "contents": "CBlockModelVariant::MultiDirEnum::NextDirOnly"
        },
        {
            "trigger": "CBlockModelVariant::MultiDirEnum::PreviousDirOnly",
            "contents": "CBlockModelVariant::MultiDirEnum::PreviousDirOnly"
        },
        {
            "trigger": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Z",
            "contents": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Z"
        },
        {
            "trigger": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Y",
            "contents": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Y"
        },
        {
            "trigger": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_X",
            "contents": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_X"
        },
        {
            "trigger": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Z",
            "contents": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Z"
        },
        {
            "trigger": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Y",
            "contents": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_Y"
        },
        {
            "trigger": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_X",
            "contents": "CBlockModelVariant::PhysicsModTriggerTypeEnum::InsideToOutside_X"
        },
        {
            "trigger": "CBlockModelVariant::VariantBaseTypeEnum::Inherit",
            "contents": "CBlockModelVariant::VariantBaseTypeEnum::Inherit"
        },
        {
            "trigger": "CBlockModelVariant::VariantBaseTypeEnum::None",
            "contents": "CBlockModelVariant::VariantBaseTypeEnum::None"
        },
        {
            "trigger": "CBlockModelVariant::VariantBaseTypeEnum::Conductor",
            "contents": "CBlockModelVariant::VariantBaseTypeEnum::Conductor"
        },
        {
            "trigger": "CBlockModelVariant::VariantBaseTypeEnum::Generator",
            "contents": "CBlockModelVariant::VariantBaseTypeEnum::Generator"
        },
        {
            "trigger": "Text CBlockModelVariant.Name",
            "contents": "Name"
        },
        {
            "trigger": "Boolean CBlockModelVariant.IsAllUnderground",
            "contents": "IsAllUnderground"
        },
        {
            "trigger": "Boolean CBlockModelVariant.IsPartUnderground",
            "contents": "IsPartUnderground"
        },
        {
            "trigger": "Int3 CBlockModelVariant.Size",
            "contents": "Size"
        },
        {
            "trigger": "Int3 CBlockModelVariant.OffsetBoundingBoxMin",
            "contents": "OffsetBoundingBoxMin"
        },
        {
            "trigger": "Int3 CBlockModelVariant.OffsetBoundingBoxMax",
            "contents": "OffsetBoundingBoxMax"
        },
        {
            "trigger": "CBlockUnitModel[] CBlockModelVariant.BlockUnitModels",
            "contents": "BlockUnitModels"
        },
        {
            "trigger": "CBadgeManager",
            "contents": "CBadgeManager"
        },
        {
            "trigger": "CBadge[] CBadgeManager.Badges",
            "contents": "Badges"
        },
        {
            "trigger": "CBadge BadgeCreate()",
            "contents": "BadgeCreate()"
        },
        {
            "trigger": "Void BadgeDestroy(CBadge Badge)",
            "contents": "BadgeDestroy(${1:CBadge Badge})"
        },
        {
            "trigger": "Void BadgeCopy(CBadge Source, CBadge Destination)",
            "contents": "BadgeCopy(${1:CBadge Source}, ${2:CBadge Destination})"
        },
        {
            "trigger": "Void BadgeReadFromProfile(CBadge Badge, Ident UserId)",
            "contents": "BadgeReadFromProfile(${1:CBadge Badge}, ${2:Ident UserId})"
        },
        {
            "trigger": "Void BadgeWriteToProfile(CBadge Badge, Ident UserId)",
            "contents": "BadgeWriteToProfile(${1:CBadge Badge}, ${2:Ident UserId})"
        },
        {
            "trigger": "Boolean ProfileIsReady(Ident UserId)",
            "contents": "ProfileIsReady(${1:Ident UserId})"
        },
        {
            "trigger": "CMlGraph",
            "contents": "CMlGraph"
        },
        {
            "trigger": "Vec2 CMlGraph.CoordsMin",
            "contents": "CoordsMin"
        },
        {
            "trigger": "Vec2 CMlGraph.CoordsMax",
            "contents": "CoordsMax"
        },
        {
            "trigger": "CMlGraphCurve[] CMlGraph.Curves",
            "contents": "Curves"
        },
        {
            "trigger": "CMlGraphCurve AddCurve()",
            "contents": "AddCurve()"
        },
        {
            "trigger": "Void RemoveCurve(CMlGraphCurve Curve)",
            "contents": "RemoveCurve(${1:CMlGraphCurve Curve})"
        },
        {
            "trigger": "CMode",
            "contents": "CMode"
        },
        {
            "trigger": "CMode::EMedal::None",
            "contents": "CMode::EMedal::None"
        },
        {
            "trigger": "CMode::EMedal::Finished",
            "contents": "CMode::EMedal::Finished"
        },
        {
            "trigger": "CMode::EMedal::Bronze",
            "contents": "CMode::EMedal::Bronze"
        },
        {
            "trigger": "CMode::EMedal::Silver",
            "contents": "CMode::EMedal::Silver"
        },
        {
            "trigger": "CMode::EMedal::Gold",
            "contents": "CMode::EMedal::Gold"
        },
        {
            "trigger": "CMode::EMedal::Author",
            "contents": "CMode::EMedal::Author"
        },
        {
            "trigger": "CMode::ESystemPlatform::None",
            "contents": "CMode::ESystemPlatform::None"
        },
        {
            "trigger": "CMode::ESystemPlatform::Steam",
            "contents": "CMode::ESystemPlatform::Steam"
        },
        {
            "trigger": "CMode::ESystemPlatform::UPlay",
            "contents": "CMode::ESystemPlatform::UPlay"
        },
        {
            "trigger": "CMode::ESystemPlatform::PS4",
            "contents": "CMode::ESystemPlatform::PS4"
        },
        {
            "trigger": "CMode::ESystemPlatform::XBoxOne",
            "contents": "CMode::ESystemPlatform::XBoxOne"
        },
        {
            "trigger": "CMode::ESystemSkuIdentifier::Unknown",
            "contents": "CMode::ESystemSkuIdentifier::Unknown"
        },
        {
            "trigger": "CMode::ESystemSkuIdentifier::EU",
            "contents": "CMode::ESystemSkuIdentifier::EU"
        },
        {
            "trigger": "CMode::ESystemSkuIdentifier::US",
            "contents": "CMode::ESystemSkuIdentifier::US"
        },
        {
            "trigger": "CMode::ESystemSkuIdentifier::JP",
            "contents": "CMode::ESystemSkuIdentifier::JP"
        },
        {
            "trigger": "Text CMode.ModeStatusMessage",
            "contents": "ModeStatusMessage"
        },
        {
            "trigger": "CTitle CMode.LoadedTitle",
            "contents": "LoadedTitle"
        },
        {
            "trigger": "Text CMode.ServerLogin",
            "contents": "ServerLogin"
        },
        {
            "trigger": "Text CMode.ServerName",
            "contents": "ServerName"
        },
        {
            "trigger": "Text CMode.ServerModeName",
            "contents": "ServerModeName"
        },
        {
            "trigger": "Text CMode.MapName",
            "contents": "MapName"
        },
        {
            "trigger": "CMap CMode.Map",
            "contents": "Map"
        },
        {
            "trigger": "Text CMode.MapPlayerModelName",
            "contents": "MapPlayerModelName"
        },
        {
            "trigger": "CUser[] CMode.Users",
            "contents": "Users"
        },
        {
            "trigger": "CTeam[] CMode.Teams",
            "contents": "Teams"
        },
        {
            "trigger": "Text CMode.NeutralEmblemUrl",
            "contents": "NeutralEmblemUrl"
        },
        {
            "trigger": "Text CMode.ForcedClubLinkUrl1",
            "contents": "ForcedClubLinkUrl1"
        },
        {
            "trigger": "Text CMode.ForcedClubLinkUrl2",
            "contents": "ForcedClubLinkUrl2"
        },
        {
            "trigger": "Text CMode.ClientManiaAppUrl",
            "contents": "ClientManiaAppUrl"
        },
        {
            "trigger": "Integer CMode.Now",
            "contents": "Now"
        },
        {
            "trigger": "Integer CMode.Period",
            "contents": "Period"
        },
        {
            "trigger": "Boolean CMode.MatchEndRequested",
            "contents": "MatchEndRequested"
        },
        {
            "trigger": "Boolean CMode.ServerShutdownRequested",
            "contents": "ServerShutdownRequested"
        },
        {
            "trigger": "Boolean CMode.MapLoaded",
            "contents": "MapLoaded"
        },
        {
            "trigger": "CMapInfo[] CMode.MapList",
            "contents": "MapList"
        },
        {
            "trigger": "Integer CMode.NextMapIndex",
            "contents": "NextMapIndex"
        },
        {
            "trigger": "CUIConfigMgr CMode.UIManager",
            "contents": "UIManager"
        },
        {
            "trigger": "CModulePlaygroundHud CMode.Hud",
            "contents": "Hud"
        },
        {
            "trigger": "Boolean CMode.Ladder_RequestInProgress",
            "contents": "Ladder_RequestInProgress"
        },
        {
            "trigger": "Boolean CMode.Solo_NewRecordSequenceInProgress",
            "contents": "Solo_NewRecordSequenceInProgress"
        },
        {
            "trigger": "CXmlRpc CMode.XmlRpc",
            "contents": "XmlRpc"
        },
        {
            "trigger": "CXmlManager CMode.Xml",
            "contents": "Xml"
        },
        {
            "trigger": "CHttpManager CMode.Http",
            "contents": "Http"
        },
        {
            "trigger": "CInputManager CMode.Input",
            "contents": "Input"
        },
        {
            "trigger": "CDataFileMgr CMode.DataFileMgr",
            "contents": "DataFileMgr"
        },
        {
            "trigger": "CScoreMgr CMode.ScoreMgr",
            "contents": "ScoreMgr"
        },
        {
            "trigger": "ESystemPlatform CMode.SystemPlatform",
            "contents": "SystemPlatform"
        },
        {
            "trigger": "ESystemSkuIdentifier CMode.SystemSkuIdentifier",
            "contents": "SystemSkuIdentifier"
        },
        {
            "trigger": "Boolean CMode.UseMinimap",
            "contents": "UseMinimap"
        },
        {
            "trigger": "Boolean CMode.Replay_AutoStart",
            "contents": "Replay_AutoStart"
        },
        {
            "trigger": "CAchievementsManager CMode.AchievementsManager",
            "contents": "AchievementsManager"
        },
        {
            "trigger": "CModeTurretManager CMode.TurretsManager",
            "contents": "TurretsManager"
        },
        {
            "trigger": "Void TweakTeamColorsToAvoidHueOverlap()",
            "contents": "TweakTeamColorsToAvoidHueOverlap()"
        },
        {
            "trigger": "Void RequestLoadMap()",
            "contents": "RequestLoadMap()"
        },
        {
            "trigger": "Void RequestUnloadMap()",
            "contents": "RequestUnloadMap()"
        },
        {
            "trigger": "Void Hud_Load(Text ModuleName)",
            "contents": "Hud_Load(${1:Text ModuleName})"
        },
        {
            "trigger": "Void PassOn(CUIConfigEvent EventToPassOn)",
            "contents": "PassOn(${1:CUIConfigEvent EventToPassOn})"
        },
        {
            "trigger": "Void Discard(CUIConfigEvent EventToDiscard)",
            "contents": "Discard(${1:CUIConfigEvent EventToDiscard})"
        },
        {
            "trigger": "Void Ladder_OpenMatch_Request()",
            "contents": "Ladder_OpenMatch_Request()"
        },
        {
            "trigger": "Void Ladder_AddPlayer(CScore PlayerScore)",
            "contents": "Ladder_AddPlayer(${1:CScore PlayerScore})"
        },
        {
            "trigger": "Void Ladder_OpenMatch_BeginRequest()",
            "contents": "Ladder_OpenMatch_BeginRequest()"
        },
        {
            "trigger": "Void Ladder_OpenMatch_AddPlayer(CScore PlayerScore)",
            "contents": "Ladder_OpenMatch_AddPlayer(${1:CScore PlayerScore})"
        },
        {
            "trigger": "Void Ladder_OpenMatch_EndRequest()",
            "contents": "Ladder_OpenMatch_EndRequest()"
        },
        {
            "trigger": "Void Ladder_CloseMatchRequest()",
            "contents": "Ladder_CloseMatchRequest()"
        },
        {
            "trigger": "Void Ladder_CancelMatchRequest()",
            "contents": "Ladder_CancelMatchRequest()"
        },
        {
            "trigger": "Void Ladder_SetResultsVersion(Integer Version)",
            "contents": "Ladder_SetResultsVersion(${1:Integer Version})"
        },
        {
            "trigger": "Void Ladder_SetMatchMakingMatchId(Integer MatchId)",
            "contents": "Ladder_SetMatchMakingMatchId(${1:Integer MatchId})"
        },
        {
            "trigger": "Void Ladder_EnableChallengeMode(Boolean Enable)",
            "contents": "Ladder_EnableChallengeMode(${1:Boolean Enable})"
        },
        {
            "trigger": "Boolean Admin_KickUser(CUser User, Text Reason)",
            "contents": "Admin_KickUser(${1:CUser User}, ${2:Text Reason})"
        },
        {
            "trigger": "Void Admin_SetLobbyInfo(Boolean IsLobby, Integer LobbyPlayerCount, Integer LobbyMaxPlayerCount, Real LobbyPlayersLevel)",
            "contents": "Admin_SetLobbyInfo(${1:Boolean IsLobby}, ${2:Integer LobbyPlayerCount}, ${3:Integer LobbyMaxPlayerCount}, ${4:Real LobbyPlayersLevel})"
        },
        {
            "trigger": "Void AutoTeamBalance()",
            "contents": "AutoTeamBalance()"
        },
        {
            "trigger": "Void Solo_SetNewRecord(CScore PlayerScore, EMedal PlayerScore)",
            "contents": "Solo_SetNewRecord(${1:CScore PlayerScore}, ${2:EMedal PlayerScore})"
        },
        {
            "trigger": "Integer Synchro_AddBarrier()",
            "contents": "Synchro_AddBarrier()"
        },
        {
            "trigger": "Boolean Synchro_BarrierReached(Integer Barrier)",
            "contents": "Synchro_BarrierReached(${1:Integer Barrier})"
        },
        {
            "trigger": "Boolean Users_AreAllies(CUser User1, CUser User2)",
            "contents": "Users_AreAllies(${1:CUser User1}, ${2:CUser User2})"
        },
        {
            "trigger": "Void Users_RequestSwitchToSpectator(CUser User)",
            "contents": "Users_RequestSwitchToSpectator(${1:CUser User})"
        },
        {
            "trigger": "CUser Users_CreateFake(Text NickName, Integer RequestedTeam)",
            "contents": "Users_CreateFake(${1:Text NickName}, ${2:Integer RequestedTeam})"
        },
        {
            "trigger": "Void Users_DestroyFake(CUser User)",
            "contents": "Users_DestroyFake(${1:CUser User})"
        },
        {
            "trigger": "Void Users_SetNbFakeUsers(Integer NbTeam1, Integer NbTeam2)",
            "contents": "Users_SetNbFakeUsers(${1:Integer NbTeam1}, ${2:Integer NbTeam2})"
        },
        {
            "trigger": "Void Users_DestroyAllFakes()",
            "contents": "Users_DestroyAllFakes()"
        },
        {
            "trigger": "Void ItemList_Begin()",
            "contents": "ItemList_Begin()"
        },
        {
            "trigger": "Boolean ItemList_Begin()",
            "contents": "ItemList_Begin()"
        },
        {
            "trigger": "Ident ItemList_Add(Text ModelName)",
            "contents": "ItemList_Add(${1:Text ModelName})"
        },
        {
            "trigger": "Ident ItemList_AddWithSkin(Text ModelName, Text SkinName)",
            "contents": "ItemList_AddWithSkin(${1:Text ModelName}, ${2:Text SkinName})"
        },
        {
            "trigger": "Void ItemList_End()",
            "contents": "ItemList_End()"
        },
        {
            "trigger": "Void DemoToken_StartUsingToken()",
            "contents": "DemoToken_StartUsingToken()"
        },
        {
            "trigger": "Void DemoToken_StopUsingToken()",
            "contents": "DemoToken_StopUsingToken()"
        },
        {
            "trigger": "Void DemoToken_GetAndUseToken(CUser User)",
            "contents": "DemoToken_GetAndUseToken(${1:CUser User})"
        },
        {
            "trigger": "Void ActionList_Begin()",
            "contents": "ActionList_Begin()"
        },
        {
            "trigger": "Boolean ActionList_Begin()",
            "contents": "ActionList_Begin()"
        },
        {
            "trigger": "Ident ActionList_Add(Text ActionName)",
            "contents": "ActionList_Add(${1:Text ActionName})"
        },
        {
            "trigger": "Void ActionList_End()",
            "contents": "ActionList_End()"
        },
        {
            "trigger": "Void Replay_Start()",
            "contents": "Replay_Start()"
        },
        {
            "trigger": "Void Replay_Stop()",
            "contents": "Replay_Stop()"
        },
        {
            "trigger": "Text Dbg_DumpDeclareForVariables(CNod Nod, Boolean StatsOnly)",
            "contents": "Dbg_DumpDeclareForVariables(${1:CNod Nod}, ${2:Boolean StatsOnly})"
        },
        {
            "trigger": "CAudioSourceMusic",
            "contents": "CAudioSourceMusic"
        },
        {
            "trigger": "CAudioSourceMusic::EUpdateMode::Cut",
            "contents": "CAudioSourceMusic::EUpdateMode::Cut"
        },
        {
            "trigger": "CAudioSourceMusic::EUpdateMode::OnNextBar",
            "contents": "CAudioSourceMusic::EUpdateMode::OnNextBar"
        },
        {
            "trigger": "CAudioSourceMusic::EUpdateMode::OnNextHalfBar",
            "contents": "CAudioSourceMusic::EUpdateMode::OnNextHalfBar"
        },
        {
            "trigger": "CAudioSourceMusic::EUpdateMode::OnNextBeat",
            "contents": "CAudioSourceMusic::EUpdateMode::OnNextBeat"
        },
        {
            "trigger": "Real[] CAudioSourceMusic.Tracks_Volume",
            "contents": "Tracks_Volume"
        },
        {
            "trigger": "Real[] CAudioSourceMusic.Tracks_VolumedB",
            "contents": "Tracks_VolumedB"
        },
        {
            "trigger": "Text[] CAudioSourceMusic.Tracks_Name",
            "contents": "Tracks_Name"
        },
        {
            "trigger": "Real[] CAudioSourceMusic.Tracks_Length",
            "contents": "Tracks_Length"
        },
        {
            "trigger": "Integer CAudioSourceMusic.Tracks_Count",
            "contents": "Tracks_Count"
        },
        {
            "trigger": "Real CAudioSourceMusic.BeatsPerMinute",
            "contents": "BeatsPerMinute"
        },
        {
            "trigger": "Real CAudioSourceMusic.BeatDuration",
            "contents": "BeatDuration"
        },
        {
            "trigger": "Integer CAudioSourceMusic.BeatsPerBar",
            "contents": "BeatsPerBar"
        },
        {
            "trigger": "EUpdateMode CAudioSourceMusic.UpdateMode",
            "contents": "UpdateMode"
        },
        {
            "trigger": "Boolean CAudioSourceMusic.Dbg_ForceIntensity",
            "contents": "Dbg_ForceIntensity"
        },
        {
            "trigger": "Boolean CAudioSourceMusic.Dbg_ForceSequential",
            "contents": "Dbg_ForceSequential"
        },
        {
            "trigger": "Boolean CAudioSourceMusic.Dbg_ForceRandom",
            "contents": "Dbg_ForceRandom"
        },
        {
            "trigger": "Real CAudioSourceMusic.LPF_CutoffRatio",
            "contents": "LPF_CutoffRatio"
        },
        {
            "trigger": "Real CAudioSourceMusic.LPF_Q",
            "contents": "LPF_Q"
        },
        {
            "trigger": "Real CAudioSourceMusic.HPF_CutoffRatio",
            "contents": "HPF_CutoffRatio"
        },
        {
            "trigger": "Real CAudioSourceMusic.HPF_Q",
            "contents": "HPF_Q"
        },
        {
            "trigger": "Real CAudioSourceMusic.FadeTracksDuration",
            "contents": "FadeTracksDuration"
        },
        {
            "trigger": "Real CAudioSourceMusic.FadeFiltersDuration",
            "contents": "FadeFiltersDuration"
        },
        {
            "trigger": "Boolean CAudioSourceMusic.UseNewImplem",
            "contents": "UseNewImplem"
        },
        {
            "trigger": "Void MuteAllTracks()",
            "contents": "MuteAllTracks()"
        },
        {
            "trigger": "Void UnmuteAllTracks()",
            "contents": "UnmuteAllTracks()"
        },
        {
            "trigger": "Void NextVariant()",
            "contents": "NextVariant()"
        },
        {
            "trigger": "Void NextVariant(Boolean IsIntensityDecreasing)",
            "contents": "NextVariant(${1:Boolean IsIntensityDecreasing})"
        },
        {
            "trigger": "Void EnableSegment(Text SegmentName)",
            "contents": "EnableSegment(${1:Text SegmentName})"
        },
        {
            "trigger": "CSmMapGate",
            "contents": "CSmMapGate"
        },
        {
            "trigger": "Integer CSmMapGate.Clan",
            "contents": "Clan"
        },
        {
            "trigger": "Boolean CSmMapGate.Automatic",
            "contents": "Automatic"
        },
        {
            "trigger": "Boolean CSmMapGate.ManualClosed",
            "contents": "ManualClosed"
        },
        {
            "trigger": "Boolean CSmMapGate.AutoClosed",
            "contents": "AutoClosed"
        },
        {
            "trigger": "Boolean CSmMapGate.AutoIsActive",
            "contents": "AutoIsActive"
        },
        {
            "trigger": "Integer CSmMapGate.AutoCloseDelay",
            "contents": "AutoCloseDelay"
        },
        {
            "trigger": "Integer CSmMapGate.AutoOpenSpeed",
            "contents": "AutoOpenSpeed"
        },
        {
            "trigger": "CCampaign",
            "contents": "CCampaign"
        },
        {
            "trigger": "CCampaign::EType::None",
            "contents": "CCampaign::EType::None"
        },
        {
            "trigger": "CCampaign::EType::Race",
            "contents": "CCampaign::EType::Race"
        },
        {
            "trigger": "CCampaign::EType::Puzzle",
            "contents": "CCampaign::EType::Puzzle"
        },
        {
            "trigger": "CCampaign::EType::Survival",
            "contents": "CCampaign::EType::Survival"
        },
        {
            "trigger": "CCampaign::EType::Platform",
            "contents": "CCampaign::EType::Platform"
        },
        {
            "trigger": "CCampaign::EType::Stunts",
            "contents": "CCampaign::EType::Stunts"
        },
        {
            "trigger": "CCampaign::EType::Training",
            "contents": "CCampaign::EType::Training"
        },
        {
            "trigger": "CCampaign::ERequiredPlayersCount::Only",
            "contents": "CCampaign::ERequiredPlayersCount::Only"
        },
        {
            "trigger": "CCampaign::ERequiredPlayersCount::Only",
            "contents": "CCampaign::ERequiredPlayersCount::Only"
        },
        {
            "trigger": "CCampaign::ERequiredPlayersCount::Only",
            "contents": "CCampaign::ERequiredPlayersCount::Only"
        },
        {
            "trigger": "CCampaign::ERequiredPlayersCount::Only",
            "contents": "CCampaign::ERequiredPlayersCount::Only"
        },
        {
            "trigger": "CCampaign::ERequiredPlayersCount::Only",
            "contents": "CCampaign::ERequiredPlayersCount::Only"
        },
        {
            "trigger": "CCampaign::ERequiredPlayersCount::All",
            "contents": "CCampaign::ERequiredPlayersCount::All"
        },
        {
            "trigger": "CCampaign::EUnlockType::Row",
            "contents": "CCampaign::EUnlockType::Row"
        },
        {
            "trigger": "CCampaign::EUnlockType::Column",
            "contents": "CCampaign::EUnlockType::Column"
        },
        {
            "trigger": "CCampaign::EUnlockType::Custom",
            "contents": "CCampaign::EUnlockType::Custom"
        },
        {
            "trigger": "CCampaign::EMedal::None",
            "contents": "CCampaign::EMedal::None"
        },
        {
            "trigger": "CCampaign::EMedal::Finished",
            "contents": "CCampaign::EMedal::Finished"
        },
        {
            "trigger": "CCampaign::EMedal::Bronze",
            "contents": "CCampaign::EMedal::Bronze"
        },
        {
            "trigger": "CCampaign::EMedal::Silver",
            "contents": "CCampaign::EMedal::Silver"
        },
        {
            "trigger": "CCampaign::EMedal::Gold",
            "contents": "CCampaign::EMedal::Gold"
        },
        {
            "trigger": "CCampaign::EMedal::Author",
            "contents": "CCampaign::EMedal::Author"
        },
        {
            "trigger": "Text CCampaign.CampaignId",
            "contents": "CampaignId"
        },
        {
            "trigger": "CMapGroup[] CCampaign.MapGroups",
            "contents": "MapGroups"
        },
        {
            "trigger": "Text CCampaign.ScoreContext",
            "contents": "ScoreContext"
        },
        {
            "trigger": "Boolean CCampaign.OfficialRecordEnabled",
            "contents": "OfficialRecordEnabled"
        },
        {
            "trigger": "Integer GetMapGroupCount()",
            "contents": "GetMapGroupCount()"
        },
        {
            "trigger": "CMapGroup GetMapGroup(Integer Index)",
            "contents": "GetMapGroup(${1:Integer Index})"
        },
        {
            "trigger": "CMapInfo GetNextMap(CMapInfo CurrentMapInfo)",
            "contents": "GetNextMap(${1:CMapInfo CurrentMapInfo})"
        },
        {
            "trigger": "CBlockUnitModel",
            "contents": "CBlockUnitModel"
        },
        {
            "trigger": "CBlockUnitModel::CardinalDirEnum::North",
            "contents": "CBlockUnitModel::CardinalDirEnum::North"
        },
        {
            "trigger": "CBlockUnitModel::CardinalDirEnum::East",
            "contents": "CBlockUnitModel::CardinalDirEnum::East"
        },
        {
            "trigger": "CBlockUnitModel::CardinalDirEnum::South",
            "contents": "CBlockUnitModel::CardinalDirEnum::South"
        },
        {
            "trigger": "CBlockUnitModel::CardinalDirEnum::West",
            "contents": "CBlockUnitModel::CardinalDirEnum::West"
        },
        {
            "trigger": "Int3 CBlockUnitModel.RelativeOffset",
            "contents": "RelativeOffset"
        },
        {
            "trigger": "CBlockModelClip[] CBlockUnitModel.Clips",
            "contents": "Clips"
        },
        {
            "trigger": "CServerInfo",
            "contents": "CServerInfo"
        },
        {
            "trigger": "Text CServerInfo.ServerName",
            "contents": "ServerName"
        },
        {
            "trigger": "Text CServerInfo.ServerLogin",
            "contents": "ServerLogin"
        },
        {
            "trigger": "Text CServerInfo.JoinLink",
            "contents": "JoinLink"
        },
        {
            "trigger": "Text CServerInfo.Comment",
            "contents": "Comment"
        },
        {
            "trigger": "Text CServerInfo.ServerVersionBuild",
            "contents": "ServerVersionBuild"
        },
        {
            "trigger": "Integer CServerInfo.PlayerCount",
            "contents": "PlayerCount"
        },
        {
            "trigger": "Integer CServerInfo.MaxPlayerCount",
            "contents": "MaxPlayerCount"
        },
        {
            "trigger": "Integer CServerInfo.SpectatorCount",
            "contents": "SpectatorCount"
        },
        {
            "trigger": "Integer CServerInfo.MaxSpectatorCount",
            "contents": "MaxSpectatorCount"
        },
        {
            "trigger": "Real CServerInfo.PlayersLevelMin",
            "contents": "PlayersLevelMin"
        },
        {
            "trigger": "Real CServerInfo.PlayersLevelAvg",
            "contents": "PlayersLevelAvg"
        },
        {
            "trigger": "Real CServerInfo.PlayersLevelMax",
            "contents": "PlayersLevelMax"
        },
        {
            "trigger": "Integer CServerInfo.ServerLevel",
            "contents": "ServerLevel"
        },
        {
            "trigger": "Text CServerInfo.ServerLevelText",
            "contents": "ServerLevelText"
        },
        {
            "trigger": "Text CServerInfo.ModeName",
            "contents": "ModeName"
        },
        {
            "trigger": "Real CServerInfo.LadderServerLimitMax",
            "contents": "LadderServerLimitMax"
        },
        {
            "trigger": "Real CServerInfo.LadderServerLimitMin",
            "contents": "LadderServerLimitMin"
        },
        {
            "trigger": "Text[] CServerInfo.PlayerNames",
            "contents": "PlayerNames"
        },
        {
            "trigger": "Text[] CServerInfo.ChallengeNames",
            "contents": "ChallengeNames"
        },
        {
            "trigger": "Integer CServerInfo.NbChallenges",
            "contents": "NbChallenges"
        },
        {
            "trigger": "Boolean CServerInfo.HasBuddies",
            "contents": "HasBuddies"
        },
        {
            "trigger": "Boolean CServerInfo.IsFavourite",
            "contents": "IsFavourite"
        },
        {
            "trigger": "Boolean CServerInfo.IsLobbyServer",
            "contents": "IsLobbyServer"
        },
        {
            "trigger": "Boolean CServerInfo.IsPrivate",
            "contents": "IsPrivate"
        },
        {
            "trigger": "CMlBrowser",
            "contents": "CMlBrowser"
        },
        {
            "trigger": "CMlBrowser::EBuddyAction::Add",
            "contents": "CMlBrowser::EBuddyAction::Add"
        },
        {
            "trigger": "CMlBrowser::EBuddyAction::Invite",
            "contents": "CMlBrowser::EBuddyAction::Invite"
        },
        {
            "trigger": "CMlBrowser::EBuddyAction::Remove",
            "contents": "CMlBrowser::EBuddyAction::Remove"
        },
        {
            "trigger": "CMlBrowser::EBuddyResult::Ok",
            "contents": "CMlBrowser::EBuddyResult::Ok"
        },
        {
            "trigger": "CMlBrowser::EBuddyResult::Error",
            "contents": "CMlBrowser::EBuddyResult::Error"
        },
        {
            "trigger": "CMlBrowser::EBuddyResult::NotFinished",
            "contents": "CMlBrowser::EBuddyResult::NotFinished"
        },
        {
            "trigger": "CManiaAppBrowser CMlBrowser.ParentApp",
            "contents": "ParentApp"
        },
        {
            "trigger": "CMap CMlBrowser.CurMap",
            "contents": "CurMap"
        },
        {
            "trigger": "EBuddyResult CMlBrowser.BuddyDoResult",
            "contents": "BuddyDoResult"
        },
        {
            "trigger": "Text CMlBrowser.BuddyDoErrorMessage",
            "contents": "BuddyDoErrorMessage"
        },
        {
            "trigger": "Boolean CMlBrowser.IsInBrowser",
            "contents": "IsInBrowser"
        },
        {
            "trigger": "Text CMlBrowser.BrowserFocusedFrameId",
            "contents": "BrowserFocusedFrameId"
        },
        {
            "trigger": "Void ShowCurMapCard()",
            "contents": "ShowCurMapCard()"
        },
        {
            "trigger": "Void BrowserBack()",
            "contents": "BrowserBack()"
        },
        {
            "trigger": "Void BrowserQuit()",
            "contents": "BrowserQuit()"
        },
        {
            "trigger": "Void BrowserHome()",
            "contents": "BrowserHome()"
        },
        {
            "trigger": "Void BrowserReload()",
            "contents": "BrowserReload()"
        },
        {
            "trigger": "Void SetLocalUserClubLink(Text ClubLink)",
            "contents": "SetLocalUserClubLink(${1:Text ClubLink})"
        },
        {
            "trigger": "CMlPage",
            "contents": "CMlPage"
        },
        {
            "trigger": "CMlFrame CMlPage.MainFrame",
            "contents": "MainFrame"
        },
        {
            "trigger": "Boolean CMlPage.LinksInhibited",
            "contents": "LinksInhibited"
        },
        {
            "trigger": "CMlControl[] CMlPage.GetClassChildren_Result",
            "contents": "GetClassChildren_Result"
        },
        {
            "trigger": "CMlControl GetFirstChild(Text ControlId)",
            "contents": "GetFirstChild(${1:Text ControlId})"
        },
        {
            "trigger": "Void GetClassChildren(Text Class, CMlFrame Frame, Boolean Recursive)",
            "contents": "GetClassChildren(${1:Text Class}, ${2:CMlFrame Frame}, ${3:Boolean Recursive})"
        },
        {
            "trigger": "CEditorModule",
            "contents": "CEditorModule"
        },
        {
            "trigger": "CEditorModule::EModuleType::Undefined",
            "contents": "CEditorModule::EModuleType::Undefined"
        },
        {
            "trigger": "CEditorModule::EModuleType::Hud",
            "contents": "CEditorModule::EModuleType::Hud"
        },
        {
            "trigger": "CEditorModule::EModuleType::Inventory",
            "contents": "CEditorModule::EModuleType::Inventory"
        },
        {
            "trigger": "CEditorModule::EModuleType::Store",
            "contents": "CEditorModule::EModuleType::Store"
        },
        {
            "trigger": "CEditorModule::EModuleType::ScoresTable",
            "contents": "CEditorModule::EModuleType::ScoresTable"
        },
        {
            "trigger": "CEditorModule::EModuleType::Equipment",
            "contents": "CEditorModule::EModuleType::Equipment"
        },
        {
            "trigger": "CEditorModule::EModuleType::MenuBase",
            "contents": "CEditorModule::EModuleType::MenuBase"
        },
        {
            "trigger": "CEditorModule::EModuleType::MenuPage",
            "contents": "CEditorModule::EModuleType::MenuPage"
        },
        {
            "trigger": "CModuleMenuModel CEditorModule.EditedMenu",
            "contents": "EditedMenu"
        },
        {
            "trigger": "CModuleMenuPageModel CEditorModule.EditedMenuPage",
            "contents": "EditedMenuPage"
        },
        {
            "trigger": "CEditorPluginModuleEvent[] CEditorModule.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "Void NewModule(EModuleType ModuleType)",
            "contents": "NewModule(${1:EModuleType ModuleType})"
        },
        {
            "trigger": "Void OpenModule(Text Url)",
            "contents": "OpenModule(${1:Text Url})"
        },
        {
            "trigger": "Void Save()",
            "contents": "Save()"
        },
        {
            "trigger": "Void SaveAs(Text Url)",
            "contents": "SaveAs(${1:Text Url})"
        },
        {
            "trigger": "Void SaveCopyAs(Text Url)",
            "contents": "SaveCopyAs(${1:Text Url})"
        },
        {
            "trigger": "Void ForceExit()",
            "contents": "ForceExit()"
        },
        {
            "trigger": "CManiaAppPlaygroundEvent",
            "contents": "CManiaAppPlaygroundEvent"
        },
        {
            "trigger": "CManiaAppPlaygroundEvent::Type::LayerCustomEvent",
            "contents": "CManiaAppPlaygroundEvent::Type::LayerCustomEvent"
        },
        {
            "trigger": "CManiaAppPlaygroundEvent::Type::KeyPress",
            "contents": "CManiaAppPlaygroundEvent::Type::KeyPress"
        },
        {
            "trigger": "CManiaAppPlaygroundEvent::Type::MenuNavigation",
            "contents": "CManiaAppPlaygroundEvent::Type::MenuNavigation"
        },
        {
            "trigger": "CManiaAppPlaygroundEvent::Type::PlaygroundScriptEvent",
            "contents": "CManiaAppPlaygroundEvent::Type::PlaygroundScriptEvent"
        },
        {
            "trigger": "Text CManiaAppPlaygroundEvent.PlaygroundScriptEventType",
            "contents": "PlaygroundScriptEventType"
        },
        {
            "trigger": "Text[] CManiaAppPlaygroundEvent.PlaygroundScriptEventData",
            "contents": "PlaygroundScriptEventData"
        },
        {
            "trigger": "CUserV2Profile",
            "contents": "CUserV2Profile"
        },
        {
            "trigger": "Text CUserV2Profile.SkinName",
            "contents": "SkinName"
        },
        {
            "trigger": "Vec3 CUserV2Profile.PrimaryColor",
            "contents": "PrimaryColor"
        },
        {
            "trigger": "CScore",
            "contents": "CScore"
        },
        {
            "trigger": "CUser CScore.User",
            "contents": "User"
        },
        {
            "trigger": "Boolean CScore.IsRegisteredForLadderMatch",
            "contents": "IsRegisteredForLadderMatch"
        },
        {
            "trigger": "Real CScore.LadderScore",
            "contents": "LadderScore"
        },
        {
            "trigger": "Integer CScore.LadderRankSortValue",
            "contents": "LadderRankSortValue"
        },
        {
            "trigger": "Real CScore.LadderMatchScoreValue",
            "contents": "LadderMatchScoreValue"
        },
        {
            "trigger": "Integer CScore.LadderClan",
            "contents": "LadderClan"
        },
        {
            "trigger": "CPackCreatorTitleInfo",
            "contents": "CPackCreatorTitleInfo"
        },
        {
            "trigger": "Ident CPackCreatorTitleInfo.TitleId",
            "contents": "TitleId"
        },
        {
            "trigger": "Ident CPackCreatorTitleInfo.MakerTitleId",
            "contents": "MakerTitleId"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.DisplayName",
            "contents": "DisplayName"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.Description",
            "contents": "Description"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.InfoUrl",
            "contents": "InfoUrl"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.DownloadUrl",
            "contents": "DownloadUrl"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.TitleVersion",
            "contents": "TitleVersion"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.AllowedClientTitleVersion",
            "contents": "AllowedClientTitleVersion"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.BaseTitleIds",
            "contents": "BaseTitleIds"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.Packaging_ImageFileName",
            "contents": "Packaging_ImageFileName"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.Packaging_LogosFileName",
            "contents": "Packaging_LogosFileName"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.Packaging_Group",
            "contents": "Packaging_Group"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.Station_ManialinkUrl",
            "contents": "Station_ManialinkUrl"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.Menus_BgReplayFileName",
            "contents": "Menus_BgReplayFileName"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.Menus_ManiaAppFileName",
            "contents": "Menus_ManiaAppFileName"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.Menus_MusicFileName",
            "contents": "Menus_MusicFileName"
        },
        {
            "trigger": "Boolean CPackCreatorTitleInfo.Solo_HasCampaign",
            "contents": "Solo_HasCampaign"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.Hud3dFontFileName",
            "contents": "Hud3dFontFileName"
        },
        {
            "trigger": "Text CPackCreatorTitleInfo.MusicFolder",
            "contents": "MusicFolder"
        },
        {
            "trigger": "CTitle",
            "contents": "CTitle"
        },
        {
            "trigger": "Text CTitle.TitleId",
            "contents": "TitleId"
        },
        {
            "trigger": "Text CTitle.AuthorLogin",
            "contents": "AuthorLogin"
        },
        {
            "trigger": "Text CTitle.AuthorName",
            "contents": "AuthorName"
        },
        {
            "trigger": "Text CTitle.Name",
            "contents": "Name"
        },
        {
            "trigger": "Text CTitle.Desc",
            "contents": "Desc"
        },
        {
            "trigger": "Text CTitle.InfoUrl",
            "contents": "InfoUrl"
        },
        {
            "trigger": "Text CTitle.DownloadUrl",
            "contents": "DownloadUrl"
        },
        {
            "trigger": "Text CTitle.TitleVersion",
            "contents": "TitleVersion"
        },
        {
            "trigger": "Text CTitle.MakerTitleId",
            "contents": "MakerTitleId"
        },
        {
            "trigger": "Text CTitle.BaseTitleId",
            "contents": "BaseTitleId"
        },
        {
            "trigger": "CHttpRequest",
            "contents": "CHttpRequest"
        },
        {
            "trigger": "Text CHttpRequest.Url",
            "contents": "Url"
        },
        {
            "trigger": "Text CHttpRequest.Result",
            "contents": "Result"
        },
        {
            "trigger": "Integer CHttpRequest.StatusCode",
            "contents": "StatusCode"
        },
        {
            "trigger": "Boolean CHttpRequest.IsCompleted",
            "contents": "IsCompleted"
        },
        {
            "trigger": "CRealLeaderBoardInfo",
            "contents": "CRealLeaderBoardInfo"
        },
        {
            "trigger": "Integer CRealLeaderBoardInfo.Rank",
            "contents": "Rank"
        },
        {
            "trigger": "Text CRealLeaderBoardInfo.Login",
            "contents": "Login"
        },
        {
            "trigger": "Text CRealLeaderBoardInfo.DisplayName",
            "contents": "DisplayName"
        },
        {
            "trigger": "Real CRealLeaderBoardInfo.Score",
            "contents": "Score"
        },
        {
            "trigger": "CMlScriptIngame",
            "contents": "CMlScriptIngame"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::Default",
            "contents": "CMlScriptIngame::EUISound::Default"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::Silence",
            "contents": "CMlScriptIngame::EUISound::Silence"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::StartMatch",
            "contents": "CMlScriptIngame::EUISound::StartMatch"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::EndMatch",
            "contents": "CMlScriptIngame::EUISound::EndMatch"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::StartRound",
            "contents": "CMlScriptIngame::EUISound::StartRound"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::EndRound",
            "contents": "CMlScriptIngame::EUISound::EndRound"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::PhaseChange",
            "contents": "CMlScriptIngame::EUISound::PhaseChange"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::TieBreakPoint",
            "contents": "CMlScriptIngame::EUISound::TieBreakPoint"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::TiePoint",
            "contents": "CMlScriptIngame::EUISound::TiePoint"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::VictoryPoint",
            "contents": "CMlScriptIngame::EUISound::VictoryPoint"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::Capture",
            "contents": "CMlScriptIngame::EUISound::Capture"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::TimeOut",
            "contents": "CMlScriptIngame::EUISound::TimeOut"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::Notice",
            "contents": "CMlScriptIngame::EUISound::Notice"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::Warning",
            "contents": "CMlScriptIngame::EUISound::Warning"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::PlayerEliminated",
            "contents": "CMlScriptIngame::EUISound::PlayerEliminated"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::PlayerHit",
            "contents": "CMlScriptIngame::EUISound::PlayerHit"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::Checkpoint",
            "contents": "CMlScriptIngame::EUISound::Checkpoint"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::Finish",
            "contents": "CMlScriptIngame::EUISound::Finish"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::Record",
            "contents": "CMlScriptIngame::EUISound::Record"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::ScoreProgress",
            "contents": "CMlScriptIngame::EUISound::ScoreProgress"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::RankChange",
            "contents": "CMlScriptIngame::EUISound::RankChange"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::Bonus",
            "contents": "CMlScriptIngame::EUISound::Bonus"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::FirstHit",
            "contents": "CMlScriptIngame::EUISound::FirstHit"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::Combo",
            "contents": "CMlScriptIngame::EUISound::Combo"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::PlayersRemaining",
            "contents": "CMlScriptIngame::EUISound::PlayersRemaining"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::Custom1",
            "contents": "CMlScriptIngame::EUISound::Custom1"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::Custom2",
            "contents": "CMlScriptIngame::EUISound::Custom2"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::Custom3",
            "contents": "CMlScriptIngame::EUISound::Custom3"
        },
        {
            "trigger": "CMlScriptIngame::EUISound::Custom4",
            "contents": "CMlScriptIngame::EUISound::Custom4"
        },
        {
            "trigger": "CMlScriptIngame::EInGameMenuResult::Resume",
            "contents": "CMlScriptIngame::EInGameMenuResult::Resume"
        },
        {
            "trigger": "CMlScriptIngame::EInGameMenuResult::Quit",
            "contents": "CMlScriptIngame::EInGameMenuResult::Quit"
        },
        {
            "trigger": "CMlScriptIngame::EInGameMenuResult::NormalMenu",
            "contents": "CMlScriptIngame::EInGameMenuResult::NormalMenu"
        },
        {
            "trigger": "CMlScriptIngame::EInGameMenuResult::AdvancedMenu",
            "contents": "CMlScriptIngame::EInGameMenuResult::AdvancedMenu"
        },
        {
            "trigger": "CMlScriptIngame::EInGameMenuResult::ServerSettings",
            "contents": "CMlScriptIngame::EInGameMenuResult::ServerSettings"
        },
        {
            "trigger": "Integer CMlScriptIngame.GameTime",
            "contents": "GameTime"
        },
        {
            "trigger": "CPlaygroundClient CMlScriptIngame.Playground",
            "contents": "Playground"
        },
        {
            "trigger": "CUIConfig CMlScriptIngame.UI",
            "contents": "UI"
        },
        {
            "trigger": "CUIConfig CMlScriptIngame.ClientUI",
            "contents": "ClientUI"
        },
        {
            "trigger": "Boolean CMlScriptIngame.IsSpectator",
            "contents": "IsSpectator"
        },
        {
            "trigger": "Boolean CMlScriptIngame.IsSpectatorClient",
            "contents": "IsSpectatorClient"
        },
        {
            "trigger": "Boolean CMlScriptIngame.UseClans",
            "contents": "UseClans"
        },
        {
            "trigger": "Boolean CMlScriptIngame.UseForcedClans",
            "contents": "UseForcedClans"
        },
        {
            "trigger": "CManiaAppPlaygroundCommon CMlScriptIngame.ParentApp",
            "contents": "ParentApp"
        },
        {
            "trigger": "CMap CMlScriptIngame.Map",
            "contents": "Map"
        },
        {
            "trigger": "CTeam[] CMlScriptIngame.Teams",
            "contents": "Teams"
        },
        {
            "trigger": "Boolean CMlScriptIngame.IsInGameMenuDisplayed",
            "contents": "IsInGameMenuDisplayed"
        },
        {
            "trigger": "Text CMlScriptIngame.CurrentServerLogin",
            "contents": "CurrentServerLogin"
        },
        {
            "trigger": "Text CMlScriptIngame.CurrentServerName",
            "contents": "CurrentServerName"
        },
        {
            "trigger": "Text CMlScriptIngame.CurrentServerDesc",
            "contents": "CurrentServerDesc"
        },
        {
            "trigger": "Text CMlScriptIngame.CurrentServerJoinLink",
            "contents": "CurrentServerJoinLink"
        },
        {
            "trigger": "Text CMlScriptIngame.CurrentServerModeName",
            "contents": "CurrentServerModeName"
        },
        {
            "trigger": "CAchievementsManager CMlScriptIngame.AchievementsManager",
            "contents": "AchievementsManager"
        },
        {
            "trigger": "Void ShowCurChallengeCard()",
            "contents": "ShowCurChallengeCard()"
        },
        {
            "trigger": "Void ShowModeHelp()",
            "contents": "ShowModeHelp()"
        },
        {
            "trigger": "Void CopyServerLinkToClipBoard()",
            "contents": "CopyServerLinkToClipBoard()"
        },
        {
            "trigger": "Void JoinTeam1()",
            "contents": "JoinTeam1()"
        },
        {
            "trigger": "Void JoinTeam2()",
            "contents": "JoinTeam2()"
        },
        {
            "trigger": "Void RequestSpectatorClient(Boolean Spectator)",
            "contents": "RequestSpectatorClient(${1:Boolean Spectator})"
        },
        {
            "trigger": "Void SetSpectateTarget(Text Player)",
            "contents": "SetSpectateTarget(${1:Text Player})"
        },
        {
            "trigger": "Void ShowProfile(Text Player)",
            "contents": "ShowProfile(${1:Text Player})"
        },
        {
            "trigger": "Void ShowInGameMenu()",
            "contents": "ShowInGameMenu()"
        },
        {
            "trigger": "Void CloseInGameMenu(EInGameMenuResult Result)",
            "contents": "CloseInGameMenu(${1:EInGameMenuResult Result})"
        },
        {
            "trigger": "Void CloseScoresTable()",
            "contents": "CloseScoresTable()"
        },
        {
            "trigger": "Void PlayUiSound(EUISound Sound, Integer SoundVariant, Real Volume)",
            "contents": "PlayUiSound(${1:EUISound Sound}, ${2:Integer SoundVariant}, ${3:Real Volume})"
        },
        {
            "trigger": "CBlockUnit",
            "contents": "CBlockUnit"
        },
        {
            "trigger": "Int3 CBlockUnit.AbsoluteOffset",
            "contents": "AbsoluteOffset"
        },
        {
            "trigger": "CBlockUnitModel CBlockUnit.BlockUnitModel",
            "contents": "BlockUnitModel"
        },
        {
            "trigger": "CBlock CBlockUnit.Block",
            "contents": "Block"
        },
        {
            "trigger": "CSmMapBase",
            "contents": "CSmMapBase"
        },
        {
            "trigger": "Integer CSmMapBase.Clan",
            "contents": "Clan"
        },
        {
            "trigger": "Boolean CSmMapBase.IsActive",
            "contents": "IsActive"
        },
        {
            "trigger": "Integer CSmMapBase.NumberOfCollectors",
            "contents": "NumberOfCollectors"
        },
        {
            "trigger": "CUILayer",
            "contents": "CUILayer"
        },
        {
            "trigger": "CUILayer::EUILayerType::Normal",
            "contents": "CUILayer::EUILayerType::Normal"
        },
        {
            "trigger": "CUILayer::EUILayerType::ScoresTable",
            "contents": "CUILayer::EUILayerType::ScoresTable"
        },
        {
            "trigger": "CUILayer::EUILayerType::ScreenIn3d",
            "contents": "CUILayer::EUILayerType::ScreenIn3d"
        },
        {
            "trigger": "CUILayer::EUILayerType::AltMenu",
            "contents": "CUILayer::EUILayerType::AltMenu"
        },
        {
            "trigger": "CUILayer::EUILayerType::Markers",
            "contents": "CUILayer::EUILayerType::Markers"
        },
        {
            "trigger": "CUILayer::EUILayerType::CutScene",
            "contents": "CUILayer::EUILayerType::CutScene"
        },
        {
            "trigger": "CUILayer::EUILayerType::InGameMenu",
            "contents": "CUILayer::EUILayerType::InGameMenu"
        },
        {
            "trigger": "CUILayer::EUILayerType::EditorPlugin",
            "contents": "CUILayer::EUILayerType::EditorPlugin"
        },
        {
            "trigger": "CUILayer::EUILayerType::ManiaplanetPlugin",
            "contents": "CUILayer::EUILayerType::ManiaplanetPlugin"
        },
        {
            "trigger": "CUILayer::EUILayerType::ManiaplanetMenu",
            "contents": "CUILayer::EUILayerType::ManiaplanetMenu"
        },
        {
            "trigger": "CUILayer::EUILayerType::LoadingScreen",
            "contents": "CUILayer::EUILayerType::LoadingScreen"
        },
        {
            "trigger": "CUILayer::EUILayerAnimation::None",
            "contents": "CUILayer::EUILayerAnimation::None"
        },
        {
            "trigger": "CUILayer::EUILayerAnimation::DownFast",
            "contents": "CUILayer::EUILayerAnimation::DownFast"
        },
        {
            "trigger": "CUILayer::EUILayerAnimation::DownSlow",
            "contents": "CUILayer::EUILayerAnimation::DownSlow"
        },
        {
            "trigger": "CUILayer::EUILayerAnimation::LeftFast",
            "contents": "CUILayer::EUILayerAnimation::LeftFast"
        },
        {
            "trigger": "CUILayer::EUILayerAnimation::LeftSlow",
            "contents": "CUILayer::EUILayerAnimation::LeftSlow"
        },
        {
            "trigger": "CUILayer::EUILayerAnimation::RightFast",
            "contents": "CUILayer::EUILayerAnimation::RightFast"
        },
        {
            "trigger": "CUILayer::EUILayerAnimation::RightSlow",
            "contents": "CUILayer::EUILayerAnimation::RightSlow"
        },
        {
            "trigger": "CUILayer::EUILayerAnimation::ScaleFast",
            "contents": "CUILayer::EUILayerAnimation::ScaleFast"
        },
        {
            "trigger": "CUILayer::EUILayerAnimation::ScaleSlow",
            "contents": "CUILayer::EUILayerAnimation::ScaleSlow"
        },
        {
            "trigger": "CUILayer::EUILayerAnimation::UpFast",
            "contents": "CUILayer::EUILayerAnimation::UpFast"
        },
        {
            "trigger": "CUILayer::EUILayerAnimation::UpSlow",
            "contents": "CUILayer::EUILayerAnimation::UpSlow"
        },
        {
            "trigger": "Boolean CUILayer.IsVisible",
            "contents": "IsVisible"
        },
        {
            "trigger": "Boolean CUILayer.AnimInProgress",
            "contents": "AnimInProgress"
        },
        {
            "trigger": "EUILayerType CUILayer.Type",
            "contents": "Type"
        },
        {
            "trigger": "EUILayerAnimation CUILayer.InAnimation",
            "contents": "InAnimation"
        },
        {
            "trigger": "EUILayerAnimation CUILayer.OutAnimation",
            "contents": "OutAnimation"
        },
        {
            "trigger": "EUILayerAnimation CUILayer.InOutAnimation",
            "contents": "InOutAnimation"
        },
        {
            "trigger": "Text CUILayer.AttachId",
            "contents": "AttachId"
        },
        {
            "trigger": "Text CUILayer.ManialinkPage",
            "contents": "ManialinkPage"
        },
        {
            "trigger": "CMlPage CUILayer.LocalPage",
            "contents": "LocalPage"
        },
        {
            "trigger": "Boolean CUILayer.IsLocalPageScriptRunning",
            "contents": "IsLocalPageScriptRunning"
        },
        {
            "trigger": "CEditorPlugin",
            "contents": "CEditorPlugin"
        },
        {
            "trigger": "CEditorPlugin::EInteractionStatus::Active",
            "contents": "CEditorPlugin::EInteractionStatus::Active"
        },
        {
            "trigger": "CEditorPlugin::EInteractionStatus::Closed",
            "contents": "CEditorPlugin::EInteractionStatus::Closed"
        },
        {
            "trigger": "CEditorPlugin::EInteractionStatus::Aborted",
            "contents": "CEditorPlugin::EInteractionStatus::Aborted"
        },
        {
            "trigger": "CManiaAppEvent[] CEditorPlugin.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "CEditorModule CEditorPlugin.ModuleEditor",
            "contents": "ModuleEditor"
        },
        {
            "trigger": "CEditorMesh CEditorPlugin.MeshEditor",
            "contents": "MeshEditor"
        },
        {
            "trigger": "CEditorEditor CEditorPlugin.EditorEditor",
            "contents": "EditorEditor"
        },
        {
            "trigger": "EInteractionStatus CEditorPlugin.InteractionStatus",
            "contents": "InteractionStatus"
        },
        {
            "trigger": "CMapEditorPluginLayer",
            "contents": "CMapEditorPluginLayer"
        },
        {
            "trigger": "CMapEditorPlugin CMapEditorPluginLayer.Editor",
            "contents": "Editor"
        },
        {
            "trigger": "CBlockModel",
            "contents": "CBlockModel"
        },
        {
            "trigger": "CBlockModel::EBaseType::None",
            "contents": "CBlockModel::EBaseType::None"
        },
        {
            "trigger": "CBlockModel::EBaseType::Conductor",
            "contents": "CBlockModel::EBaseType::Conductor"
        },
        {
            "trigger": "CBlockModel::EBaseType::Generator",
            "contents": "CBlockModel::EBaseType::Generator"
        },
        {
            "trigger": "CBlockModel::EBaseType::Collector",
            "contents": "CBlockModel::EBaseType::Collector"
        },
        {
            "trigger": "CBlockModel::EWayPointType::Start",
            "contents": "CBlockModel::EWayPointType::Start"
        },
        {
            "trigger": "CBlockModel::EWayPointType::Finish",
            "contents": "CBlockModel::EWayPointType::Finish"
        },
        {
            "trigger": "CBlockModel::EWayPointType::Checkpoint",
            "contents": "CBlockModel::EWayPointType::Checkpoint"
        },
        {
            "trigger": "CBlockModel::EWayPointType::None",
            "contents": "CBlockModel::EWayPointType::None"
        },
        {
            "trigger": "CBlockModel::EWayPointType::StartFinish",
            "contents": "CBlockModel::EWayPointType::StartFinish"
        },
        {
            "trigger": "CBlockModel::MultiDirEnum::SameDir",
            "contents": "CBlockModel::MultiDirEnum::SameDir"
        },
        {
            "trigger": "CBlockModel::MultiDirEnum::SymmetricalDirs",
            "contents": "CBlockModel::MultiDirEnum::SymmetricalDirs"
        },
        {
            "trigger": "CBlockModel::MultiDirEnum::AllDir",
            "contents": "CBlockModel::MultiDirEnum::AllDir"
        },
        {
            "trigger": "CBlockModel::MultiDirEnum::OpposedDirOnly",
            "contents": "CBlockModel::MultiDirEnum::OpposedDirOnly"
        },
        {
            "trigger": "CBlockModel::MultiDirEnum::PerpendicularDirsOnly",
            "contents": "CBlockModel::MultiDirEnum::PerpendicularDirsOnly"
        },
        {
            "trigger": "CBlockModel::MultiDirEnum::NextDirOnly",
            "contents": "CBlockModel::MultiDirEnum::NextDirOnly"
        },
        {
            "trigger": "CBlockModel::MultiDirEnum::PreviousDirOnly",
            "contents": "CBlockModel::MultiDirEnum::PreviousDirOnly"
        },
        {
            "trigger": "Text CBlockModel.Name",
            "contents": "Name"
        },
        {
            "trigger": "Boolean CBlockModel.IsRoad",
            "contents": "IsRoad"
        },
        {
            "trigger": "Boolean CBlockModel.IsTerrain",
            "contents": "IsTerrain"
        },
        {
            "trigger": "Boolean CBlockModel.IsPodium",
            "contents": "IsPodium"
        },
        {
            "trigger": "EWayPointType CBlockModel.WaypointType",
            "contents": "WaypointType"
        },
        {
            "trigger": "Boolean CBlockModel.NoRespawn",
            "contents": "NoRespawn"
        },
        {
            "trigger": "CBlockModelVariantGround CBlockModel.VariantGround",
            "contents": "VariantGround"
        },
        {
            "trigger": "CBlockModelVariantAir CBlockModel.VariantAir",
            "contents": "VariantAir"
        },
        {
            "trigger": "CSmMapSector",
            "contents": "CSmMapSector"
        },
        {
            "trigger": "Ident[] CSmMapSector.PlayersIds",
            "contents": "PlayersIds"
        },
        {
            "trigger": "Text CSmMapSector.Tag",
            "contents": "Tag"
        },
        {
            "trigger": "CTrackManiaScore",
            "contents": "CTrackManiaScore"
        },
        {
            "trigger": "CSmLandmark",
            "contents": "CSmLandmark"
        },
        {
            "trigger": "Text CSmLandmark.Tag",
            "contents": "Tag"
        },
        {
            "trigger": "Integer CSmLandmark.Order",
            "contents": "Order"
        },
        {
            "trigger": "Vec3 CSmLandmark.Position",
            "contents": "Position"
        },
        {
            "trigger": "Vec3 CSmLandmark.DirFront",
            "contents": "DirFront"
        },
        {
            "trigger": "CTmResult",
            "contents": "CTmResult"
        },
        {
            "trigger": "CTmResult::ETmRaceResultCriteria::Time",
            "contents": "CTmResult::ETmRaceResultCriteria::Time"
        },
        {
            "trigger": "CTmResult::ETmRaceResultCriteria::Stunts",
            "contents": "CTmResult::ETmRaceResultCriteria::Stunts"
        },
        {
            "trigger": "CTmResult::ETmRaceResultCriteria::NbRespawns",
            "contents": "CTmResult::ETmRaceResultCriteria::NbRespawns"
        },
        {
            "trigger": "CTmResult::ETmRaceResultCriteria::CheckpointsProgress",
            "contents": "CTmResult::ETmRaceResultCriteria::CheckpointsProgress"
        },
        {
            "trigger": "CTmResult::ETmRaceResultCriteria::None",
            "contents": "CTmResult::ETmRaceResultCriteria::None"
        },
        {
            "trigger": "Integer CTmResult.Time",
            "contents": "Time"
        },
        {
            "trigger": "Integer CTmResult.Score",
            "contents": "Score"
        },
        {
            "trigger": "Integer CTmResult.NbRespawns",
            "contents": "NbRespawns"
        },
        {
            "trigger": "Integer[] CTmResult.Checkpoints",
            "contents": "Checkpoints"
        },
        {
            "trigger": "Integer Compare(CTmResult Other, ETmRaceResultCriteria Criteria)",
            "contents": "Compare(${1:CTmResult Other}, ${2:ETmRaceResultCriteria Criteria})"
        },
        {
            "trigger": "CSmMlScriptIngame",
            "contents": "CSmMlScriptIngame"
        },
        {
            "trigger": "Integer CSmMlScriptIngame.ArenaNow",
            "contents": "ArenaNow"
        },
        {
            "trigger": "CSmPlayer CSmMlScriptIngame.InputPlayer",
            "contents": "InputPlayer"
        },
        {
            "trigger": "CSmPlayer CSmMlScriptIngame.GUIPlayer",
            "contents": "GUIPlayer"
        },
        {
            "trigger": "CSmPlayer[] CSmMlScriptIngame.Players",
            "contents": "Players"
        },
        {
            "trigger": "CSmScore[] CSmMlScriptIngame.Scores",
            "contents": "Scores"
        },
        {
            "trigger": "Integer[] CSmMlScriptIngame.ClanScores",
            "contents": "ClanScores"
        },
        {
            "trigger": "Boolean CSmMlScriptIngame.HideResumePlayingButton",
            "contents": "HideResumePlayingButton"
        },
        {
            "trigger": "CSmMapBase[] CSmMlScriptIngame.MapBases",
            "contents": "MapBases"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks",
            "contents": "MapLandmarks"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks_PlayerSpawn",
            "contents": "MapLandmarks_PlayerSpawn"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks_Gauge",
            "contents": "MapLandmarks_Gauge"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks_Sector",
            "contents": "MapLandmarks_Sector"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks_BotPath",
            "contents": "MapLandmarks_BotPath"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks_BotSpawn",
            "contents": "MapLandmarks_BotSpawn"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks_ObjectAnchor",
            "contents": "MapLandmarks_ObjectAnchor"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMlScriptIngame.MapLandmarks_Gate",
            "contents": "MapLandmarks_Gate"
        },
        {
            "trigger": "CAchievementsStat",
            "contents": "CAchievementsStat"
        },
        {
            "trigger": "Ident CAchievementsStat.UserId",
            "contents": "UserId"
        },
        {
            "trigger": "CAchievementsStatDesc CAchievementsStat.StatDesc",
            "contents": "StatDesc"
        },
        {
            "trigger": "Integer CAchievementsStat.Value",
            "contents": "Value"
        },
        {
            "trigger": "CManiaAppPlaygroundCommon",
            "contents": "CManiaAppPlaygroundCommon"
        },
        {
            "trigger": "CManiaAppPlaygroundEvent[] CManiaAppPlaygroundCommon.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "CPlaygroundClient CManiaAppPlaygroundCommon.Playground",
            "contents": "Playground"
        },
        {
            "trigger": "CMap CManiaAppPlaygroundCommon.Map",
            "contents": "Map"
        },
        {
            "trigger": "CUIConfig CManiaAppPlaygroundCommon.UI",
            "contents": "UI"
        },
        {
            "trigger": "CUIConfig CManiaAppPlaygroundCommon.ClientUI",
            "contents": "ClientUI"
        },
        {
            "trigger": "CTaskResult",
            "contents": "CTaskResult"
        },
        {
            "trigger": "CTaskResult::ETaskErrorType::Success",
            "contents": "CTaskResult::ETaskErrorType::Success"
        },
        {
            "trigger": "CTaskResult::ETaskErrorType::Canceled",
            "contents": "CTaskResult::ETaskErrorType::Canceled"
        },
        {
            "trigger": "CTaskResult::ETaskErrorType::Unexpected",
            "contents": "CTaskResult::ETaskErrorType::Unexpected"
        },
        {
            "trigger": "CTaskResult::ETaskErrorType::Internal",
            "contents": "CTaskResult::ETaskErrorType::Internal"
        },
        {
            "trigger": "CTaskResult::ETaskErrorType::DataManager",
            "contents": "CTaskResult::ETaskErrorType::DataManager"
        },
        {
            "trigger": "CTaskResult::ETaskErrorType::PrivilegeManager",
            "contents": "CTaskResult::ETaskErrorType::PrivilegeManager"
        },
        {
            "trigger": "CTaskResult::ETaskErrorType::MasterServer",
            "contents": "CTaskResult::ETaskErrorType::MasterServer"
        },
        {
            "trigger": "CTaskResult::ETaskErrorType::UbiServices",
            "contents": "CTaskResult::ETaskErrorType::UbiServices"
        },
        {
            "trigger": "CTaskResult::ETaskErrorType::UplayPC",
            "contents": "CTaskResult::ETaskErrorType::UplayPC"
        },
        {
            "trigger": "CTaskResult::ETaskErrorType::PS4",
            "contents": "CTaskResult::ETaskErrorType::PS4"
        },
        {
            "trigger": "CTaskResult::ETaskErrorType::XboxOne",
            "contents": "CTaskResult::ETaskErrorType::XboxOne"
        },
        {
            "trigger": "Ident CTaskResult.Id",
            "contents": "Id"
        },
        {
            "trigger": "Boolean CTaskResult.IsProcessing",
            "contents": "IsProcessing"
        },
        {
            "trigger": "Boolean CTaskResult.HasSucceeded",
            "contents": "HasSucceeded"
        },
        {
            "trigger": "Boolean CTaskResult.HasFailed",
            "contents": "HasFailed"
        },
        {
            "trigger": "Boolean CTaskResult.IsCanceled",
            "contents": "IsCanceled"
        },
        {
            "trigger": "ETaskErrorType CTaskResult.ErrorType",
            "contents": "ErrorType"
        },
        {
            "trigger": "Integer CTaskResult.ErrorCode",
            "contents": "ErrorCode"
        },
        {
            "trigger": "Text CTaskResult.ErrorDescription",
            "contents": "ErrorDescription"
        },
        {
            "trigger": "Void Cancel()",
            "contents": "Cancel()"
        },
        {
            "trigger": "CSmMapGauge",
            "contents": "CSmMapGauge"
        },
        {
            "trigger": "Integer CSmMapGauge.Clan",
            "contents": "Clan"
        },
        {
            "trigger": "Real CSmMapGauge.ValueReal",
            "contents": "ValueReal"
        },
        {
            "trigger": "Integer CSmMapGauge.Value",
            "contents": "Value"
        },
        {
            "trigger": "Integer CSmMapGauge.Max",
            "contents": "Max"
        },
        {
            "trigger": "Integer CSmMapGauge.Speed",
            "contents": "Speed"
        },
        {
            "trigger": "Boolean CSmMapGauge.Captured",
            "contents": "Captured"
        },
        {
            "trigger": "CTmMlScriptIngame",
            "contents": "CTmMlScriptIngame"
        },
        {
            "trigger": "CTmMlPlayer CTmMlScriptIngame.InputPlayer",
            "contents": "InputPlayer"
        },
        {
            "trigger": "CTmMlPlayer CTmMlScriptIngame.GUIPlayer",
            "contents": "GUIPlayer"
        },
        {
            "trigger": "CTmRaceClientEvent[] CTmMlScriptIngame.RaceEvents",
            "contents": "RaceEvents"
        },
        {
            "trigger": "Integer CTmMlScriptIngame.NbLaps",
            "contents": "NbLaps"
        },
        {
            "trigger": "Boolean CTmMlScriptIngame.IndependantLaps",
            "contents": "IndependantLaps"
        },
        {
            "trigger": "CTmMlPlayer[] CTmMlScriptIngame.Players",
            "contents": "Players"
        },
        {
            "trigger": "CTmScore[] CTmMlScriptIngame.Scores",
            "contents": "Scores"
        },
        {
            "trigger": "Integer[] CTmMlScriptIngame.ClanScores",
            "contents": "ClanScores"
        },
        {
            "trigger": "Integer CTmMlScriptIngame.SplitScreenNum",
            "contents": "SplitScreenNum"
        },
        {
            "trigger": "Integer CTmMlScriptIngame.SplitScreenCount",
            "contents": "SplitScreenCount"
        },
        {
            "trigger": "Integer CTmMlScriptIngame.CurPlayerCamera",
            "contents": "CurPlayerCamera"
        },
        {
            "trigger": "Vec3 CTmMlScriptIngame.MapStartLinePos",
            "contents": "MapStartLinePos"
        },
        {
            "trigger": "Vec3[] CTmMlScriptIngame.MapCheckpointPos",
            "contents": "MapCheckpointPos"
        },
        {
            "trigger": "Vec3[] CTmMlScriptIngame.MapFinishLinePos",
            "contents": "MapFinishLinePos"
        },
        {
            "trigger": "Boolean CTmMlScriptIngame.MapIsLapRace",
            "contents": "MapIsLapRace"
        },
        {
            "trigger": "Integer CTmMlScriptIngame.MapNbLaps",
            "contents": "MapNbLaps"
        },
        {
            "trigger": "CXmlNode",
            "contents": "CXmlNode"
        },
        {
            "trigger": "Text CXmlNode.Name",
            "contents": "Name"
        },
        {
            "trigger": "Text CXmlNode.TextContents",
            "contents": "TextContents"
        },
        {
            "trigger": "Text CXmlNode.TextRawContents",
            "contents": "TextRawContents"
        },
        {
            "trigger": "Text CXmlNode.TextRecursiveContents",
            "contents": "TextRecursiveContents"
        },
        {
            "trigger": "CXmlNode[] CXmlNode.Children",
            "contents": "Children"
        },
        {
            "trigger": "Text GetAttributeText(Text Name, Text DefaultValue)",
            "contents": "GetAttributeText(${1:Text Name}, ${2:Text DefaultValue})"
        },
        {
            "trigger": "Integer GetAttributeInteger(Text Name, Integer DefaultValue)",
            "contents": "GetAttributeInteger(${1:Text Name}, ${2:Integer DefaultValue})"
        },
        {
            "trigger": "Real GetAttributeReal(Text Name, Real DefaultValue)",
            "contents": "GetAttributeReal(${1:Text Name}, ${2:Real DefaultValue})"
        },
        {
            "trigger": "Boolean GetAttributeBoolean(Text Name, Boolean DefaultValue)",
            "contents": "GetAttributeBoolean(${1:Text Name}, ${2:Boolean DefaultValue})"
        },
        {
            "trigger": "CXmlNode GetFirstChild(Text Name)",
            "contents": "GetFirstChild(${1:Text Name})"
        },
        {
            "trigger": "CXmlManager",
            "contents": "CXmlManager"
        },
        {
            "trigger": "CXmlDocument[] CXmlManager.Documents",
            "contents": "Documents"
        },
        {
            "trigger": "Integer CXmlManager.DocumentsSlotsLimit",
            "contents": "DocumentsSlotsLimit"
        },
        {
            "trigger": "CXmlDocument Create(Text Contents)",
            "contents": "Create(${1:Text Contents})"
        },
        {
            "trigger": "CXmlDocument Create(Text Contents, Boolean GenerateText, Boolean GenerateTextRaw, Boolean GenerateTextResursive)",
            "contents": "Create(${1:Text Contents}, ${2:Boolean GenerateText}, ${3:Boolean GenerateTextRaw}, ${4:Boolean GenerateTextResursive})"
        },
        {
            "trigger": "Void Destroy(CXmlDocument Document)",
            "contents": "Destroy(${1:CXmlDocument Document})"
        },
        {
            "trigger": "CTaskResult_GhostList",
            "contents": "CTaskResult_GhostList"
        },
        {
            "trigger": "CGhost[] CTaskResult_GhostList.Ghosts",
            "contents": "Ghosts"
        },
        {
            "trigger": "CSmGauge",
            "contents": "CSmGauge"
        },
        {
            "trigger": "Integer CSmGauge.Clan",
            "contents": "Clan"
        },
        {
            "trigger": "Real CSmGauge.ValueReal",
            "contents": "ValueReal"
        },
        {
            "trigger": "Integer CSmGauge.Value",
            "contents": "Value"
        },
        {
            "trigger": "Integer CSmGauge.Max",
            "contents": "Max"
        },
        {
            "trigger": "Integer CSmGauge.Speed",
            "contents": "Speed"
        },
        {
            "trigger": "CMlMinimap",
            "contents": "CMlMinimap"
        },
        {
            "trigger": "Vec3 CMlMinimap.WorldPosition",
            "contents": "WorldPosition"
        },
        {
            "trigger": "Vec2 CMlMinimap.MapPosition",
            "contents": "MapPosition"
        },
        {
            "trigger": "Real CMlMinimap.MapYaw",
            "contents": "MapYaw"
        },
        {
            "trigger": "Real CMlMinimap.ZoomFactor",
            "contents": "ZoomFactor"
        },
        {
            "trigger": "Boolean CMlMinimap.Underground",
            "contents": "Underground"
        },
        {
            "trigger": "Void Fog_SetAll(Real Value)",
            "contents": "Fog_SetAll(${1:Real Value})"
        },
        {
            "trigger": "Void Fog_ClearDisk(Vec3 WorldCenter, Real Radius, Real FadeSize)",
            "contents": "Fog_ClearDisk(${1:Vec3 WorldCenter}, ${2:Real Radius}, ${3:Real FadeSize})"
        },
        {
            "trigger": "CHighScoreComparison",
            "contents": "CHighScoreComparison"
        },
        {
            "trigger": "CMapInfo CHighScoreComparison.MapInfo",
            "contents": "MapInfo"
        },
        {
            "trigger": "Text CHighScoreComparison.Login",
            "contents": "Login"
        },
        {
            "trigger": "Integer CHighScoreComparison.RecordScore",
            "contents": "RecordScore"
        },
        {
            "trigger": "Integer CHighScoreComparison.RecordTime",
            "contents": "RecordTime"
        },
        {
            "trigger": "Integer CHighScoreComparison.RecordRespawnCount",
            "contents": "RecordRespawnCount"
        },
        {
            "trigger": "Integer CHighScoreComparison.RecordDate",
            "contents": "RecordDate"
        },
        {
            "trigger": "Text CHighScoreComparison.RecordDateString",
            "contents": "RecordDateString"
        },
        {
            "trigger": "Integer CHighScoreComparison.RecordElapsedTime",
            "contents": "RecordElapsedTime"
        },
        {
            "trigger": "Integer CHighScoreComparison.RecordCount",
            "contents": "RecordCount"
        },
        {
            "trigger": "Text CHighScoreComparison.OpponentLogin",
            "contents": "OpponentLogin"
        },
        {
            "trigger": "Text CHighScoreComparison.OpponentDisplayName",
            "contents": "OpponentDisplayName"
        },
        {
            "trigger": "Text CHighScoreComparison.OpponentRecordUrl",
            "contents": "OpponentRecordUrl"
        },
        {
            "trigger": "Integer CHighScoreComparison.OpponentRecordScore",
            "contents": "OpponentRecordScore"
        },
        {
            "trigger": "Integer CHighScoreComparison.OpponentRecordTime",
            "contents": "OpponentRecordTime"
        },
        {
            "trigger": "Integer CHighScoreComparison.OpponentRecordRespawnCount",
            "contents": "OpponentRecordRespawnCount"
        },
        {
            "trigger": "Integer CHighScoreComparison.OpponentRecordDate",
            "contents": "OpponentRecordDate"
        },
        {
            "trigger": "Text CHighScoreComparison.OpponentRecordDateString",
            "contents": "OpponentRecordDateString"
        },
        {
            "trigger": "Integer CHighScoreComparison.OpponentRecordElapsedTime",
            "contents": "OpponentRecordElapsedTime"
        },
        {
            "trigger": "Integer CHighScoreComparison.OpponentRecordCount",
            "contents": "OpponentRecordCount"
        },
        {
            "trigger": "CTaskResult_BuddyChallengeRecordsComparison",
            "contents": "CTaskResult_BuddyChallengeRecordsComparison"
        },
        {
            "trigger": "Text CTaskResult_BuddyChallengeRecordsComparison.Login",
            "contents": "Login"
        },
        {
            "trigger": "Text CTaskResult_BuddyChallengeRecordsComparison.BuddyLogin",
            "contents": "BuddyLogin"
        },
        {
            "trigger": "CHighScoreComparison[] CTaskResult_BuddyChallengeRecordsComparison.PlayerBestRecordsComparison",
            "contents": "PlayerBestRecordsComparison"
        },
        {
            "trigger": "CHighScoreComparison[] CTaskResult_BuddyChallengeRecordsComparison.BuddyBestRecordsComparison",
            "contents": "BuddyBestRecordsComparison"
        },
        {
            "trigger": "Void SortByMapName()",
            "contents": "SortByMapName()"
        },
        {
            "trigger": "Void SortByRecordTime()",
            "contents": "SortByRecordTime()"
        },
        {
            "trigger": "Void SortByRecordTimeDiff()",
            "contents": "SortByRecordTimeDiff()"
        },
        {
            "trigger": "Void SortByRecordDate()",
            "contents": "SortByRecordDate()"
        },
        {
            "trigger": "CNotificationsConsumer",
            "contents": "CNotificationsConsumer"
        },
        {
            "trigger": "CNotificationsConsumer::EFilterPriority::All",
            "contents": "CNotificationsConsumer::EFilterPriority::All"
        },
        {
            "trigger": "CNotificationsConsumer::EFilterPriority::MoreThanMemo",
            "contents": "CNotificationsConsumer::EFilterPriority::MoreThanMemo"
        },
        {
            "trigger": "CNotificationsConsumer::EFilterPriority::MoreThanNotice",
            "contents": "CNotificationsConsumer::EFilterPriority::MoreThanNotice"
        },
        {
            "trigger": "CNotificationsConsumerEvent[] CNotificationsConsumer.Events",
            "contents": "Events"
        },
        {
            "trigger": "CNotificationsConsumerNotification[] CNotificationsConsumer.Notifications",
            "contents": "Notifications"
        },
        {
            "trigger": "CNotificationsConsumerNotification[] CNotificationsConsumer.FilteredNotifications",
            "contents": "FilteredNotifications"
        },
        {
            "trigger": "EFilterPriority CNotificationsConsumer.Filter_Priority",
            "contents": "Filter_Priority"
        },
        {
            "trigger": "CNotificationsConsumerEvent",
            "contents": "CNotificationsConsumerEvent"
        },
        {
            "trigger": "CNotificationsConsumerEvent::EType::NewNotification",
            "contents": "CNotificationsConsumerEvent::EType::NewNotification"
        },
        {
            "trigger": "CNotificationsConsumerEvent::EType::NotificationChanged",
            "contents": "CNotificationsConsumerEvent::EType::NotificationChanged"
        },
        {
            "trigger": "EType CNotificationsConsumerEvent.Type",
            "contents": "Type"
        },
        {
            "trigger": "CNotificationsConsumerNotification CNotificationsConsumerEvent.Notification",
            "contents": "Notification"
        },
        {
            "trigger": "CAudioSource",
            "contents": "CAudioSource"
        },
        {
            "trigger": "Boolean CAudioSource.IsPlaying",
            "contents": "IsPlaying"
        },
        {
            "trigger": "Boolean CAudioSource.DownloadInProgress",
            "contents": "DownloadInProgress"
        },
        {
            "trigger": "Real CAudioSource.Volume",
            "contents": "Volume"
        },
        {
            "trigger": "Real CAudioSource.FadeDuration",
            "contents": "FadeDuration"
        },
        {
            "trigger": "Real CAudioSource.VolumedB",
            "contents": "VolumedB"
        },
        {
            "trigger": "Real CAudioSource.Pitch",
            "contents": "Pitch"
        },
        {
            "trigger": "Vec3 CAudioSource.RelativePosition",
            "contents": "RelativePosition"
        },
        {
            "trigger": "Vec3 CAudioSource.PanRadiusLfe",
            "contents": "PanRadiusLfe"
        },
        {
            "trigger": "Real CAudioSource.PlayCursor",
            "contents": "PlayCursor"
        },
        {
            "trigger": "Real CAudioSource.PlayLength",
            "contents": "PlayLength"
        },
        {
            "trigger": "Void Play()",
            "contents": "Play()"
        },
        {
            "trigger": "Void Stop()",
            "contents": "Stop()"
        },
        {
            "trigger": "CInputPad",
            "contents": "CInputPad"
        },
        {
            "trigger": "CInputPad::EButton::Left",
            "contents": "CInputPad::EButton::Left"
        },
        {
            "trigger": "CInputPad::EButton::Right",
            "contents": "CInputPad::EButton::Right"
        },
        {
            "trigger": "CInputPad::EButton::Up",
            "contents": "CInputPad::EButton::Up"
        },
        {
            "trigger": "CInputPad::EButton::Down",
            "contents": "CInputPad::EButton::Down"
        },
        {
            "trigger": "CInputPad::EButton::A",
            "contents": "CInputPad::EButton::A"
        },
        {
            "trigger": "CInputPad::EButton::B",
            "contents": "CInputPad::EButton::B"
        },
        {
            "trigger": "CInputPad::EButton::X",
            "contents": "CInputPad::EButton::X"
        },
        {
            "trigger": "CInputPad::EButton::Y",
            "contents": "CInputPad::EButton::Y"
        },
        {
            "trigger": "CInputPad::EButton::L1",
            "contents": "CInputPad::EButton::L1"
        },
        {
            "trigger": "CInputPad::EButton::R1",
            "contents": "CInputPad::EButton::R1"
        },
        {
            "trigger": "CInputPad::EButton::LeftStick",
            "contents": "CInputPad::EButton::LeftStick"
        },
        {
            "trigger": "CInputPad::EButton::RightStick",
            "contents": "CInputPad::EButton::RightStick"
        },
        {
            "trigger": "CInputPad::EButton::Menu",
            "contents": "CInputPad::EButton::Menu"
        },
        {
            "trigger": "CInputPad::EButton::View",
            "contents": "CInputPad::EButton::View"
        },
        {
            "trigger": "CInputPad::EButton::LeftStick_Left",
            "contents": "CInputPad::EButton::LeftStick_Left"
        },
        {
            "trigger": "CInputPad::EButton::LeftStick_Right",
            "contents": "CInputPad::EButton::LeftStick_Right"
        },
        {
            "trigger": "CInputPad::EButton::LeftStick_Up",
            "contents": "CInputPad::EButton::LeftStick_Up"
        },
        {
            "trigger": "CInputPad::EButton::LeftStick_Down",
            "contents": "CInputPad::EButton::LeftStick_Down"
        },
        {
            "trigger": "CInputPad::EButton::RightStick_Left",
            "contents": "CInputPad::EButton::RightStick_Left"
        },
        {
            "trigger": "CInputPad::EButton::RightStick_Right",
            "contents": "CInputPad::EButton::RightStick_Right"
        },
        {
            "trigger": "CInputPad::EButton::RightStick_Up",
            "contents": "CInputPad::EButton::RightStick_Up"
        },
        {
            "trigger": "CInputPad::EButton::RightStick_Down",
            "contents": "CInputPad::EButton::RightStick_Down"
        },
        {
            "trigger": "CInputPad::EButton::L2",
            "contents": "CInputPad::EButton::L2"
        },
        {
            "trigger": "CInputPad::EButton::R2",
            "contents": "CInputPad::EButton::R2"
        },
        {
            "trigger": "CInputPad::EButton::None",
            "contents": "CInputPad::EButton::None"
        },
        {
            "trigger": "CInputPad::EPadType::Keyboard",
            "contents": "CInputPad::EPadType::Keyboard"
        },
        {
            "trigger": "CInputPad::EPadType::Generic",
            "contents": "CInputPad::EPadType::Generic"
        },
        {
            "trigger": "CInputPad::EPadType::XBox",
            "contents": "CInputPad::EPadType::XBox"
        },
        {
            "trigger": "CInputPad::EPadType::PlayStation",
            "contents": "CInputPad::EPadType::PlayStation"
        },
        {
            "trigger": "CInputPad::EPadType::Vive",
            "contents": "CInputPad::EPadType::Vive"
        },
        {
            "trigger": "Integer CInputPad.ControllerId",
            "contents": "ControllerId"
        },
        {
            "trigger": "Ident CInputPad.UserId",
            "contents": "UserId"
        },
        {
            "trigger": "EPadType CInputPad.Type",
            "contents": "Type"
        },
        {
            "trigger": "Text CInputPad.ModelName",
            "contents": "ModelName"
        },
        {
            "trigger": "Integer CInputPad.IdleDuration",
            "contents": "IdleDuration"
        },
        {
            "trigger": "Integer CInputPad.Left",
            "contents": "Left"
        },
        {
            "trigger": "Integer CInputPad.Right",
            "contents": "Right"
        },
        {
            "trigger": "Integer CInputPad.Up",
            "contents": "Up"
        },
        {
            "trigger": "Integer CInputPad.Down",
            "contents": "Down"
        },
        {
            "trigger": "Integer CInputPad.A",
            "contents": "A"
        },
        {
            "trigger": "Integer CInputPad.B",
            "contents": "B"
        },
        {
            "trigger": "Integer CInputPad.X",
            "contents": "X"
        },
        {
            "trigger": "Integer CInputPad.Y",
            "contents": "Y"
        },
        {
            "trigger": "Integer CInputPad.L1",
            "contents": "L1"
        },
        {
            "trigger": "Integer CInputPad.R1",
            "contents": "R1"
        },
        {
            "trigger": "Integer CInputPad.LeftStickBut",
            "contents": "LeftStickBut"
        },
        {
            "trigger": "Integer CInputPad.RightStickBut",
            "contents": "RightStickBut"
        },
        {
            "trigger": "Integer CInputPad.Menu",
            "contents": "Menu"
        },
        {
            "trigger": "Integer CInputPad.View",
            "contents": "View"
        },
        {
            "trigger": "Real CInputPad.LeftStickX",
            "contents": "LeftStickX"
        },
        {
            "trigger": "Real CInputPad.LeftStickY",
            "contents": "LeftStickY"
        },
        {
            "trigger": "Real CInputPad.RightStickX",
            "contents": "RightStickX"
        },
        {
            "trigger": "Real CInputPad.RightStickY",
            "contents": "RightStickY"
        },
        {
            "trigger": "Real CInputPad.L2",
            "contents": "L2"
        },
        {
            "trigger": "Real CInputPad.R2",
            "contents": "R2"
        },
        {
            "trigger": "EButton[] CInputPad.ButtonEvents",
            "contents": "ButtonEvents"
        },
        {
            "trigger": "Void ClearRumble()",
            "contents": "ClearRumble()"
        },
        {
            "trigger": "Void AddRumble(Integer Duration, Real LargeMotor, Real SmallMotor)",
            "contents": "AddRumble(${1:Integer Duration}, ${2:Real LargeMotor}, ${3:Real SmallMotor})"
        },
        {
            "trigger": "Void SetColor(Vec3 Color)",
            "contents": "SetColor(${1:Vec3 Color})"
        },
        {
            "trigger": "CStation",
            "contents": "CStation"
        },
        {
            "trigger": "CTitle CStation.Title",
            "contents": "Title"
        },
        {
            "trigger": "Integer CStation.AudienceRegisteredUsers",
            "contents": "AudienceRegisteredUsers"
        },
        {
            "trigger": "Integer CStation.CampaignMedalsMax",
            "contents": "CampaignMedalsMax"
        },
        {
            "trigger": "Integer CStation.CampaignMedalsCurrent",
            "contents": "CampaignMedalsCurrent"
        },
        {
            "trigger": "Integer CStation.CampaignMedalsRanking",
            "contents": "CampaignMedalsRanking"
        },
        {
            "trigger": "Real CStation.LadderPoints",
            "contents": "LadderPoints"
        },
        {
            "trigger": "Integer CStation.LadderRank",
            "contents": "LadderRank"
        },
        {
            "trigger": "Boolean CStation.DisableQuickEnter",
            "contents": "DisableQuickEnter"
        },
        {
            "trigger": "Boolean CStation.IsLogoVisible",
            "contents": "IsLogoVisible"
        },
        {
            "trigger": "Real CStation.GhostAlpha",
            "contents": "GhostAlpha"
        },
        {
            "trigger": "Vec3 CStation.FocusLightColor",
            "contents": "FocusLightColor"
        },
        {
            "trigger": "Vec3 CStation.NormalLightColor",
            "contents": "NormalLightColor"
        },
        {
            "trigger": "Boolean CStation.IsEditable",
            "contents": "IsEditable"
        },
        {
            "trigger": "CAudioManager",
            "contents": "CAudioManager"
        },
        {
            "trigger": "CAudioManager::ELibSound::Alert",
            "contents": "CAudioManager::ELibSound::Alert"
        },
        {
            "trigger": "CAudioManager::ELibSound::ShowDialog",
            "contents": "CAudioManager::ELibSound::ShowDialog"
        },
        {
            "trigger": "CAudioManager::ELibSound::HideDialog",
            "contents": "CAudioManager::ELibSound::HideDialog"
        },
        {
            "trigger": "CAudioManager::ELibSound::ShowMenu",
            "contents": "CAudioManager::ELibSound::ShowMenu"
        },
        {
            "trigger": "CAudioManager::ELibSound::HideMenu",
            "contents": "CAudioManager::ELibSound::HideMenu"
        },
        {
            "trigger": "CAudioManager::ELibSound::Focus",
            "contents": "CAudioManager::ELibSound::Focus"
        },
        {
            "trigger": "CAudioManager::ELibSound::Valid",
            "contents": "CAudioManager::ELibSound::Valid"
        },
        {
            "trigger": "CAudioManager::ELibSound::Start",
            "contents": "CAudioManager::ELibSound::Start"
        },
        {
            "trigger": "CAudioManager::ELibSound::Countdown",
            "contents": "CAudioManager::ELibSound::Countdown"
        },
        {
            "trigger": "CAudioManager::ELibSound::Victory",
            "contents": "CAudioManager::ELibSound::Victory"
        },
        {
            "trigger": "CAudioManager::ELibSound::ScoreIncrease",
            "contents": "CAudioManager::ELibSound::ScoreIncrease"
        },
        {
            "trigger": "CAudioManager::ELibSound::Checkpoint",
            "contents": "CAudioManager::ELibSound::Checkpoint"
        },
        {
            "trigger": "CAudioSource[] CAudioManager.Sounds",
            "contents": "Sounds"
        },
        {
            "trigger": "Boolean CAudioManager.ForceEnableMusic",
            "contents": "ForceEnableMusic"
        },
        {
            "trigger": "Real CAudioManager.LimitMusicVolumedB",
            "contents": "LimitMusicVolumedB"
        },
        {
            "trigger": "Real CAudioManager.LimitSceneSoundVolumedB",
            "contents": "LimitSceneSoundVolumedB"
        },
        {
            "trigger": "Real CAudioManager.LimitUiSoundVolumedB",
            "contents": "LimitUiSoundVolumedB"
        },
        {
            "trigger": "CAudioSource CreateSound(Text Url)",
            "contents": "CreateSound(${1:Text Url})"
        },
        {
            "trigger": "CAudioSource CreateSound(Text Url, Real VolumedB, Boolean IsMusic, Boolean IsLooping, Boolean IsSpatialized)",
            "contents": "CreateSound(${1:Text Url}, ${2:Real VolumedB}, ${3:Boolean IsMusic}, ${4:Boolean IsLooping}, ${5:Boolean IsSpatialized})"
        },
        {
            "trigger": "Void DestroySound(CAudioSource Sound)",
            "contents": "DestroySound(${1:CAudioSource Sound})"
        },
        {
            "trigger": "CAudioSourceMusic CreateMusic(Text Url)",
            "contents": "CreateMusic(${1:Text Url})"
        },
        {
            "trigger": "Void DestroyMusic(CAudioSourceMusic Music)",
            "contents": "DestroyMusic(${1:CAudioSourceMusic Music})"
        },
        {
            "trigger": "Void PlaySoundEvent(CAudioSource Sound, Real VolumedB)",
            "contents": "PlaySoundEvent(${1:CAudioSource Sound}, ${2:Real VolumedB})"
        },
        {
            "trigger": "Void PlaySoundEvent(Text Url, Real VolumedB)",
            "contents": "PlaySoundEvent(${1:Text Url}, ${2:Real VolumedB})"
        },
        {
            "trigger": "Void PlaySoundEvent(ELibSound Sound, Integer SoundVariant, Real VolumedB)",
            "contents": "PlaySoundEvent(${1:ELibSound Sound}, ${2:Integer SoundVariant}, ${3:Real VolumedB})"
        },
        {
            "trigger": "Void PlaySoundEvent(CAudioSource Sound, Real VolumedB, Integer Delay)",
            "contents": "PlaySoundEvent(${1:CAudioSource Sound}, ${2:Real VolumedB}, ${3:Integer Delay})"
        },
        {
            "trigger": "Void PlaySoundEvent(Text Url, Real VolumedB, Integer Delay)",
            "contents": "PlaySoundEvent(${1:Text Url}, ${2:Real VolumedB}, ${3:Integer Delay})"
        },
        {
            "trigger": "Void PlaySoundEvent(ELibSound Sound, Integer SoundVariant, Real VolumedB, Integer Delay)",
            "contents": "PlaySoundEvent(${1:ELibSound Sound}, ${2:Integer SoundVariant}, ${3:Real VolumedB}, ${4:Integer Delay})"
        },
        {
            "trigger": "Void PlaySoundEvent(CAudioSource Sound, Real VolumedB, Vec3 PanRadiusLfe)",
            "contents": "PlaySoundEvent(${1:CAudioSource Sound}, ${2:Real VolumedB}, ${3:Vec3 PanRadiusLfe})"
        },
        {
            "trigger": "Void PlaySoundEvent(Text Url, Real VolumedB, Vec3 PanRadiusLfe)",
            "contents": "PlaySoundEvent(${1:Text Url}, ${2:Real VolumedB}, ${3:Vec3 PanRadiusLfe})"
        },
        {
            "trigger": "Void PlaySoundEvent(CAudioSource Sound, Real VolumedB, Vec3 PanRadiusLfe, Integer Delay)",
            "contents": "PlaySoundEvent(${1:CAudioSource Sound}, ${2:Real VolumedB}, ${3:Vec3 PanRadiusLfe}, ${4:Integer Delay})"
        },
        {
            "trigger": "Void PlaySoundEvent(Text Url, Real VolumedB, Vec3 PanRadiusLfe, Integer Delay)",
            "contents": "PlaySoundEvent(${1:Text Url}, ${2:Real VolumedB}, ${3:Vec3 PanRadiusLfe}, ${4:Integer Delay})"
        },
        {
            "trigger": "Void ClearAllDelayedSoundsEvents()",
            "contents": "ClearAllDelayedSoundsEvents()"
        },
        {
            "trigger": "CSmMapObjectAnchor",
            "contents": "CSmMapObjectAnchor"
        },
        {
            "trigger": "Text CSmMapObjectAnchor.ItemName",
            "contents": "ItemName"
        },
        {
            "trigger": "Ident CSmMapObjectAnchor.ItemModelId",
            "contents": "ItemModelId"
        },
        {
            "trigger": "CCollector",
            "contents": "CCollector"
        },
        {
            "trigger": "CCollector::EProdState::Aborted",
            "contents": "CCollector::EProdState::Aborted"
        },
        {
            "trigger": "CCollector::EProdState::GameBox",
            "contents": "CCollector::EProdState::GameBox"
        },
        {
            "trigger": "CCollector::EProdState::DevBuild",
            "contents": "CCollector::EProdState::DevBuild"
        },
        {
            "trigger": "CCollector::EProdState::Release",
            "contents": "CCollector::EProdState::Release"
        },
        {
            "trigger": "Text CCollector.Name",
            "contents": "Name"
        },
        {
            "trigger": "Text CCollector.PageName",
            "contents": "PageName"
        },
        {
            "trigger": "Integer CCollector.InterfaceNumber",
            "contents": "InterfaceNumber"
        },
        {
            "trigger": "CImage CCollector.Icon",
            "contents": "Icon"
        },
        {
            "trigger": "CTmRaceClientEvent",
            "contents": "CTmRaceClientEvent"
        },
        {
            "trigger": "CTmRaceClientEvent::EType::Unknown",
            "contents": "CTmRaceClientEvent::EType::Unknown"
        },
        {
            "trigger": "CTmRaceClientEvent::EType::WayPoint",
            "contents": "CTmRaceClientEvent::EType::WayPoint"
        },
        {
            "trigger": "CTmRaceClientEvent::EType::Respawn",
            "contents": "CTmRaceClientEvent::EType::Respawn"
        },
        {
            "trigger": "CTmRaceClientEvent::EType::Turbo",
            "contents": "CTmRaceClientEvent::EType::Turbo"
        },
        {
            "trigger": "CTmRaceClientEvent::EType::Horn",
            "contents": "CTmRaceClientEvent::EType::Horn"
        },
        {
            "trigger": "CTmRaceClientEvent::EType::Impact",
            "contents": "CTmRaceClientEvent::EType::Impact"
        },
        {
            "trigger": "CTmRaceClientEvent::EType::WaterSplash",
            "contents": "CTmRaceClientEvent::EType::WaterSplash"
        },
        {
            "trigger": "CTmRaceClientEvent::EType::GlassSmash",
            "contents": "CTmRaceClientEvent::EType::GlassSmash"
        },
        {
            "trigger": "CTmRaceClientEvent::EType::PartDetached",
            "contents": "CTmRaceClientEvent::EType::PartDetached"
        },
        {
            "trigger": "CTmRaceClientEvent::EType::StopEngine",
            "contents": "CTmRaceClientEvent::EType::StopEngine"
        },
        {
            "trigger": "CTmRaceClientEvent::EType::StartEngine",
            "contents": "CTmRaceClientEvent::EType::StartEngine"
        },
        {
            "trigger": "CTmRaceClientEvent::EType::AirSpawnRelease",
            "contents": "CTmRaceClientEvent::EType::AirSpawnRelease"
        },
        {
            "trigger": "EType CTmRaceClientEvent.Type",
            "contents": "Type"
        },
        {
            "trigger": "CTmMlPlayer CTmRaceClientEvent.Player",
            "contents": "Player"
        },
        {
            "trigger": "Integer CTmRaceClientEvent.CheckpointInRace",
            "contents": "CheckpointInRace"
        },
        {
            "trigger": "Integer CTmRaceClientEvent.CheckpointInLap",
            "contents": "CheckpointInLap"
        },
        {
            "trigger": "Boolean CTmRaceClientEvent.IsEndRace",
            "contents": "IsEndRace"
        },
        {
            "trigger": "Boolean CTmRaceClientEvent.IsEndLap",
            "contents": "IsEndLap"
        },
        {
            "trigger": "Integer CTmRaceClientEvent.RaceTime",
            "contents": "RaceTime"
        },
        {
            "trigger": "Integer CTmRaceClientEvent.LapTime",
            "contents": "LapTime"
        },
        {
            "trigger": "Integer CTmRaceClientEvent.StuntsScore",
            "contents": "StuntsScore"
        },
        {
            "trigger": "Integer CTmRaceClientEvent.NbRespawns",
            "contents": "NbRespawns"
        },
        {
            "trigger": "CUIConfig",
            "contents": "CUIConfig"
        },
        {
            "trigger": "CUIConfig::EUISequence::None",
            "contents": "CUIConfig::EUISequence::None"
        },
        {
            "trigger": "CUIConfig::EUISequence::Playing",
            "contents": "CUIConfig::EUISequence::Playing"
        },
        {
            "trigger": "CUIConfig::EUISequence::Intro",
            "contents": "CUIConfig::EUISequence::Intro"
        },
        {
            "trigger": "CUIConfig::EUISequence::Outro",
            "contents": "CUIConfig::EUISequence::Outro"
        },
        {
            "trigger": "CUIConfig::EUISequence::Podium",
            "contents": "CUIConfig::EUISequence::Podium"
        },
        {
            "trigger": "CUIConfig::EUISequence::CustomMTClip",
            "contents": "CUIConfig::EUISequence::CustomMTClip"
        },
        {
            "trigger": "CUIConfig::EUISequence::EndRound",
            "contents": "CUIConfig::EUISequence::EndRound"
        },
        {
            "trigger": "CUIConfig::EUISequence::PlayersPresentation",
            "contents": "CUIConfig::EUISequence::PlayersPresentation"
        },
        {
            "trigger": "CUIConfig::EUISequence::UIInteraction",
            "contents": "CUIConfig::EUISequence::UIInteraction"
        },
        {
            "trigger": "CUIConfig::EUISequence::RollingBackgroundIntro",
            "contents": "CUIConfig::EUISequence::RollingBackgroundIntro"
        },
        {
            "trigger": "CUIConfig::EUISequence::CustomMTClip_WithUIInteraction",
            "contents": "CUIConfig::EUISequence::CustomMTClip_WithUIInteraction"
        },
        {
            "trigger": "CUIConfig::EUIStatus::None",
            "contents": "CUIConfig::EUIStatus::None"
        },
        {
            "trigger": "CUIConfig::EUIStatus::Normal",
            "contents": "CUIConfig::EUIStatus::Normal"
        },
        {
            "trigger": "CUIConfig::EUIStatus::Warning",
            "contents": "CUIConfig::EUIStatus::Warning"
        },
        {
            "trigger": "CUIConfig::EUIStatus::Error",
            "contents": "CUIConfig::EUIStatus::Error"
        },
        {
            "trigger": "CUIConfig::EUIStatus::Official",
            "contents": "CUIConfig::EUIStatus::Official"
        },
        {
            "trigger": "CUIConfig::EVisibility::None",
            "contents": "CUIConfig::EVisibility::None"
        },
        {
            "trigger": "CUIConfig::EVisibility::Normal",
            "contents": "CUIConfig::EVisibility::Normal"
        },
        {
            "trigger": "CUIConfig::EVisibility::Manual",
            "contents": "CUIConfig::EVisibility::Manual"
        },
        {
            "trigger": "CUIConfig::EVisibility::ForcedHidden",
            "contents": "CUIConfig::EVisibility::ForcedHidden"
        },
        {
            "trigger": "CUIConfig::EVisibility::ForcedVisible",
            "contents": "CUIConfig::EVisibility::ForcedVisible"
        },
        {
            "trigger": "CUIConfig::ELabelsVisibility::None",
            "contents": "CUIConfig::ELabelsVisibility::None"
        },
        {
            "trigger": "CUIConfig::ELabelsVisibility::Never",
            "contents": "CUIConfig::ELabelsVisibility::Never"
        },
        {
            "trigger": "CUIConfig::ELabelsVisibility::Always",
            "contents": "CUIConfig::ELabelsVisibility::Always"
        },
        {
            "trigger": "CUIConfig::ELabelsVisibility::WhenInFrustum",
            "contents": "CUIConfig::ELabelsVisibility::WhenInFrustum"
        },
        {
            "trigger": "CUIConfig::ELabelsVisibility::WhenVisible",
            "contents": "CUIConfig::ELabelsVisibility::WhenVisible"
        },
        {
            "trigger": "CUIConfig::ELabelsVisibility::WhenInMiddleOfScreen",
            "contents": "CUIConfig::ELabelsVisibility::WhenInMiddleOfScreen"
        },
        {
            "trigger": "CUIConfig::EAvatarVariant::Default",
            "contents": "CUIConfig::EAvatarVariant::Default"
        },
        {
            "trigger": "CUIConfig::EAvatarVariant::Sad",
            "contents": "CUIConfig::EAvatarVariant::Sad"
        },
        {
            "trigger": "CUIConfig::EAvatarVariant::Happy",
            "contents": "CUIConfig::EAvatarVariant::Happy"
        },
        {
            "trigger": "CUIConfig::EUISound::Default",
            "contents": "CUIConfig::EUISound::Default"
        },
        {
            "trigger": "CUIConfig::EUISound::Silence",
            "contents": "CUIConfig::EUISound::Silence"
        },
        {
            "trigger": "CUIConfig::EUISound::StartMatch",
            "contents": "CUIConfig::EUISound::StartMatch"
        },
        {
            "trigger": "CUIConfig::EUISound::EndMatch",
            "contents": "CUIConfig::EUISound::EndMatch"
        },
        {
            "trigger": "CUIConfig::EUISound::StartRound",
            "contents": "CUIConfig::EUISound::StartRound"
        },
        {
            "trigger": "CUIConfig::EUISound::EndRound",
            "contents": "CUIConfig::EUISound::EndRound"
        },
        {
            "trigger": "CUIConfig::EUISound::PhaseChange",
            "contents": "CUIConfig::EUISound::PhaseChange"
        },
        {
            "trigger": "CUIConfig::EUISound::TieBreakPoint",
            "contents": "CUIConfig::EUISound::TieBreakPoint"
        },
        {
            "trigger": "CUIConfig::EUISound::TiePoint",
            "contents": "CUIConfig::EUISound::TiePoint"
        },
        {
            "trigger": "CUIConfig::EUISound::VictoryPoint",
            "contents": "CUIConfig::EUISound::VictoryPoint"
        },
        {
            "trigger": "CUIConfig::EUISound::Capture",
            "contents": "CUIConfig::EUISound::Capture"
        },
        {
            "trigger": "CUIConfig::EUISound::TimeOut",
            "contents": "CUIConfig::EUISound::TimeOut"
        },
        {
            "trigger": "CUIConfig::EUISound::Notice",
            "contents": "CUIConfig::EUISound::Notice"
        },
        {
            "trigger": "CUIConfig::EUISound::Warning",
            "contents": "CUIConfig::EUISound::Warning"
        },
        {
            "trigger": "CUIConfig::EUISound::PlayerEliminated",
            "contents": "CUIConfig::EUISound::PlayerEliminated"
        },
        {
            "trigger": "CUIConfig::EUISound::PlayerHit",
            "contents": "CUIConfig::EUISound::PlayerHit"
        },
        {
            "trigger": "CUIConfig::EUISound::Checkpoint",
            "contents": "CUIConfig::EUISound::Checkpoint"
        },
        {
            "trigger": "CUIConfig::EUISound::Finish",
            "contents": "CUIConfig::EUISound::Finish"
        },
        {
            "trigger": "CUIConfig::EUISound::Record",
            "contents": "CUIConfig::EUISound::Record"
        },
        {
            "trigger": "CUIConfig::EUISound::ScoreProgress",
            "contents": "CUIConfig::EUISound::ScoreProgress"
        },
        {
            "trigger": "CUIConfig::EUISound::RankChange",
            "contents": "CUIConfig::EUISound::RankChange"
        },
        {
            "trigger": "CUIConfig::EUISound::Bonus",
            "contents": "CUIConfig::EUISound::Bonus"
        },
        {
            "trigger": "CUIConfig::EUISound::FirstHit",
            "contents": "CUIConfig::EUISound::FirstHit"
        },
        {
            "trigger": "CUIConfig::EUISound::Combo",
            "contents": "CUIConfig::EUISound::Combo"
        },
        {
            "trigger": "CUIConfig::EUISound::PlayersRemaining",
            "contents": "CUIConfig::EUISound::PlayersRemaining"
        },
        {
            "trigger": "CUIConfig::EUISound::Custom1",
            "contents": "CUIConfig::EUISound::Custom1"
        },
        {
            "trigger": "CUIConfig::EUISound::Custom2",
            "contents": "CUIConfig::EUISound::Custom2"
        },
        {
            "trigger": "CUIConfig::EUISound::Custom3",
            "contents": "CUIConfig::EUISound::Custom3"
        },
        {
            "trigger": "CUIConfig::EUISound::Custom4",
            "contents": "CUIConfig::EUISound::Custom4"
        },
        {
            "trigger": "CUIConfig::ENoticeLevel::Default",
            "contents": "CUIConfig::ENoticeLevel::Default"
        },
        {
            "trigger": "CUIConfig::ENoticeLevel::PlayerInfo",
            "contents": "CUIConfig::ENoticeLevel::PlayerInfo"
        },
        {
            "trigger": "CUIConfig::ENoticeLevel::PlayerWarning",
            "contents": "CUIConfig::ENoticeLevel::PlayerWarning"
        },
        {
            "trigger": "CUIConfig::ENoticeLevel::MapInfo",
            "contents": "CUIConfig::ENoticeLevel::MapInfo"
        },
        {
            "trigger": "CUIConfig::ENoticeLevel::MapWarning",
            "contents": "CUIConfig::ENoticeLevel::MapWarning"
        },
        {
            "trigger": "CUIConfig::ENoticeLevel::MatchInfo",
            "contents": "CUIConfig::ENoticeLevel::MatchInfo"
        },
        {
            "trigger": "CUIConfig::ENoticeLevel::MatchWarning",
            "contents": "CUIConfig::ENoticeLevel::MatchWarning"
        },
        {
            "trigger": "CUIConfig::EObserverMode::Default",
            "contents": "CUIConfig::EObserverMode::Default"
        },
        {
            "trigger": "CUIConfig::EObserverMode::Forced",
            "contents": "CUIConfig::EObserverMode::Forced"
        },
        {
            "trigger": "CUIConfig::EObserverMode::Forbidden",
            "contents": "CUIConfig::EObserverMode::Forbidden"
        },
        {
            "trigger": "CUIConfig::EObserverMode::Manual",
            "contents": "CUIConfig::EObserverMode::Manual"
        },
        {
            "trigger": "EUISequence CUIConfig.UISequence",
            "contents": "UISequence"
        },
        {
            "trigger": "Boolean CUIConfig.UISequenceIsCompleted",
            "contents": "UISequenceIsCompleted"
        },
        {
            "trigger": "Text CUIConfig.UISequence_CustomMTClip",
            "contents": "UISequence_CustomMTClip"
        },
        {
            "trigger": "Integer CUIConfig.UISequence_CustomMTRefTime",
            "contents": "UISequence_CustomMTRefTime"
        },
        {
            "trigger": "Boolean CUIConfig.UISequence_CanSkipIntroMT",
            "contents": "UISequence_CanSkipIntroMT"
        },
        {
            "trigger": "Text CUIConfig.UISequence_PodiumPlayersWin",
            "contents": "UISequence_PodiumPlayersWin"
        },
        {
            "trigger": "Text CUIConfig.UISequence_PodiumPlayersLose",
            "contents": "UISequence_PodiumPlayersLose"
        },
        {
            "trigger": "Text CUIConfig.ManialinkPage",
            "contents": "ManialinkPage"
        },
        {
            "trigger": "Text CUIConfig.BigMessage",
            "contents": "BigMessage"
        },
        {
            "trigger": "Text CUIConfig.BigMessageAvatarLogin",
            "contents": "BigMessageAvatarLogin"
        },
        {
            "trigger": "EAvatarVariant CUIConfig.BigMessageAvatarVariant",
            "contents": "BigMessageAvatarVariant"
        },
        {
            "trigger": "EUISound CUIConfig.BigMessageSound",
            "contents": "BigMessageSound"
        },
        {
            "trigger": "Integer CUIConfig.BigMessageSoundVariant",
            "contents": "BigMessageSoundVariant"
        },
        {
            "trigger": "Text CUIConfig.StatusMessage",
            "contents": "StatusMessage"
        },
        {
            "trigger": "Text CUIConfig.GaugeMessage",
            "contents": "GaugeMessage"
        },
        {
            "trigger": "Real CUIConfig.GaugeRatio",
            "contents": "GaugeRatio"
        },
        {
            "trigger": "Integer CUIConfig.GaugeClan",
            "contents": "GaugeClan"
        },
        {
            "trigger": "Text CUIConfig.MarkersXML",
            "contents": "MarkersXML"
        },
        {
            "trigger": "CUILayer[] CUIConfig.UILayers",
            "contents": "UILayers"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideNotices",
            "contents": "OverlayHideNotices"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideMapInfo",
            "contents": "OverlayHideMapInfo"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideOpponentsInfo",
            "contents": "OverlayHideOpponentsInfo"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideChat",
            "contents": "OverlayHideChat"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideCheckPointList",
            "contents": "OverlayHideCheckPointList"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideRoundScores",
            "contents": "OverlayHideRoundScores"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideCountdown",
            "contents": "OverlayHideCountdown"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideCrosshair",
            "contents": "OverlayHideCrosshair"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideGauges",
            "contents": "OverlayHideGauges"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideConsumables",
            "contents": "OverlayHideConsumables"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHide321Go",
            "contents": "OverlayHide321Go"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideBackground",
            "contents": "OverlayHideBackground"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideChrono",
            "contents": "OverlayHideChrono"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideSpeedAndDist",
            "contents": "OverlayHideSpeedAndDist"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHidePersonnalBestAndRank",
            "contents": "OverlayHidePersonnalBestAndRank"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHidePosition",
            "contents": "OverlayHidePosition"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideCheckPointTime",
            "contents": "OverlayHideCheckPointTime"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideEndMapLadderRecap",
            "contents": "OverlayHideEndMapLadderRecap"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideMultilapInfos",
            "contents": "OverlayHideMultilapInfos"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideSpectatorControllers",
            "contents": "OverlayHideSpectatorControllers"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayHideSpectatorInfos",
            "contents": "OverlayHideSpectatorInfos"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayChatHideAvatar",
            "contents": "OverlayChatHideAvatar"
        },
        {
            "trigger": "Integer CUIConfig.OverlayChatLineCount",
            "contents": "OverlayChatLineCount"
        },
        {
            "trigger": "Vec2 CUIConfig.OverlayChatOffset",
            "contents": "OverlayChatOffset"
        },
        {
            "trigger": "Vec2 CUIConfig.CountdownCoord",
            "contents": "CountdownCoord"
        },
        {
            "trigger": "Boolean CUIConfig.NoticesFilter_HidePlayerInfo",
            "contents": "NoticesFilter_HidePlayerInfo"
        },
        {
            "trigger": "Boolean CUIConfig.NoticesFilter_HidePlayerWarning",
            "contents": "NoticesFilter_HidePlayerWarning"
        },
        {
            "trigger": "Boolean CUIConfig.NoticesFilter_HidePlayerInfoIfNotMe",
            "contents": "NoticesFilter_HidePlayerInfoIfNotMe"
        },
        {
            "trigger": "Boolean CUIConfig.NoticesFilter_HidePlayerWarningIfNotMe",
            "contents": "NoticesFilter_HidePlayerWarningIfNotMe"
        },
        {
            "trigger": "Boolean CUIConfig.NoticesFilter_HideMapInfo",
            "contents": "NoticesFilter_HideMapInfo"
        },
        {
            "trigger": "Boolean CUIConfig.NoticesFilter_HideMapWarning",
            "contents": "NoticesFilter_HideMapWarning"
        },
        {
            "trigger": "Boolean CUIConfig.NoticesFilter_HideMatchInfo",
            "contents": "NoticesFilter_HideMatchInfo"
        },
        {
            "trigger": "Boolean CUIConfig.NoticesFilter_HideMatchWarning",
            "contents": "NoticesFilter_HideMatchWarning"
        },
        {
            "trigger": "ENoticeLevel CUIConfig.NoticesFilter_LevelToShowAsBigMessage",
            "contents": "NoticesFilter_LevelToShowAsBigMessage"
        },
        {
            "trigger": "Text CUIConfig.ScoreTable",
            "contents": "ScoreTable"
        },
        {
            "trigger": "EVisibility CUIConfig.ScoreTableVisibility",
            "contents": "ScoreTableVisibility"
        },
        {
            "trigger": "Text CUIConfig.SmallScoreTable",
            "contents": "SmallScoreTable"
        },
        {
            "trigger": "EVisibility CUIConfig.SmallScoreTableVisibility",
            "contents": "SmallScoreTableVisibility"
        },
        {
            "trigger": "Boolean CUIConfig.ScoreTableOnlyManialink",
            "contents": "ScoreTableOnlyManialink"
        },
        {
            "trigger": "Boolean CUIConfig.AltMenuNoDefaultScores",
            "contents": "AltMenuNoDefaultScores"
        },
        {
            "trigger": "Boolean CUIConfig.AltMenuNoCustomScores",
            "contents": "AltMenuNoCustomScores"
        },
        {
            "trigger": "Boolean CUIConfig.OverlayScoreSummary",
            "contents": "OverlayScoreSummary"
        },
        {
            "trigger": "Ident CUIConfig.ScoreSummary_Player1",
            "contents": "ScoreSummary_Player1"
        },
        {
            "trigger": "Integer CUIConfig.ScoreSummary_Points1",
            "contents": "ScoreSummary_Points1"
        },
        {
            "trigger": "Integer CUIConfig.ScoreSummary_RoundPoints1",
            "contents": "ScoreSummary_RoundPoints1"
        },
        {
            "trigger": "Integer CUIConfig.ScoreSummary_MatchPoints1",
            "contents": "ScoreSummary_MatchPoints1"
        },
        {
            "trigger": "Real CUIConfig.ScoreSummary_Gauge1",
            "contents": "ScoreSummary_Gauge1"
        },
        {
            "trigger": "Ident CUIConfig.ScoreSummary_Player2",
            "contents": "ScoreSummary_Player2"
        },
        {
            "trigger": "Integer CUIConfig.ScoreSummary_Points2",
            "contents": "ScoreSummary_Points2"
        },
        {
            "trigger": "Integer CUIConfig.ScoreSummary_RoundPoints2",
            "contents": "ScoreSummary_RoundPoints2"
        },
        {
            "trigger": "Integer CUIConfig.ScoreSummary_MatchPoints2",
            "contents": "ScoreSummary_MatchPoints2"
        },
        {
            "trigger": "Real CUIConfig.ScoreSummary_Gauge2",
            "contents": "ScoreSummary_Gauge2"
        },
        {
            "trigger": "Boolean CUIConfig.ScreenIn3dHideScoreSummary",
            "contents": "ScreenIn3dHideScoreSummary"
        },
        {
            "trigger": "Boolean CUIConfig.ScreenIn3dHideVersus",
            "contents": "ScreenIn3dHideVersus"
        },
        {
            "trigger": "Integer CUIConfig.CountdownEndTime",
            "contents": "CountdownEndTime"
        },
        {
            "trigger": "EUIStatus CUIConfig.UIStatus",
            "contents": "UIStatus"
        },
        {
            "trigger": "ELabelsVisibility CUIConfig.AlliesLabelsVisibility",
            "contents": "AlliesLabelsVisibility"
        },
        {
            "trigger": "EVisibility CUIConfig.AlliesLabelsShowGauges",
            "contents": "AlliesLabelsShowGauges"
        },
        {
            "trigger": "EVisibility CUIConfig.AlliesLabelsShowNames",
            "contents": "AlliesLabelsShowNames"
        },
        {
            "trigger": "Integer CUIConfig.AlliesLabelsMaxCount",
            "contents": "AlliesLabelsMaxCount"
        },
        {
            "trigger": "ELabelsVisibility CUIConfig.TeamLabelsVisibility",
            "contents": "TeamLabelsVisibility"
        },
        {
            "trigger": "EVisibility CUIConfig.TeamLabelsShowGauges",
            "contents": "TeamLabelsShowGauges"
        },
        {
            "trigger": "EVisibility CUIConfig.TeamLabelsShowNames",
            "contents": "TeamLabelsShowNames"
        },
        {
            "trigger": "ELabelsVisibility CUIConfig.OpposingTeamLabelsVisibility",
            "contents": "OpposingTeamLabelsVisibility"
        },
        {
            "trigger": "EVisibility CUIConfig.OpposingTeamLabelsShowGauges",
            "contents": "OpposingTeamLabelsShowGauges"
        },
        {
            "trigger": "EVisibility CUIConfig.OpposingTeamLabelsShowNames",
            "contents": "OpposingTeamLabelsShowNames"
        },
        {
            "trigger": "Boolean CUIConfig.ForceSpectator",
            "contents": "ForceSpectator"
        },
        {
            "trigger": "Integer CUIConfig.SpectatorForceCameraType",
            "contents": "SpectatorForceCameraType"
        },
        {
            "trigger": "Ident CUIConfig.SpectatorAutoTarget",
            "contents": "SpectatorAutoTarget"
        },
        {
            "trigger": "Ident CUIConfig.SpectatorForcedTarget",
            "contents": "SpectatorForcedTarget"
        },
        {
            "trigger": "Integer CUIConfig.SpectatorForcedClan",
            "contents": "SpectatorForcedClan"
        },
        {
            "trigger": "Real CUIConfig.SpectatorCamAutoLatitude",
            "contents": "SpectatorCamAutoLatitude"
        },
        {
            "trigger": "Real CUIConfig.SpectatorCamAutoLongitude",
            "contents": "SpectatorCamAutoLongitude"
        },
        {
            "trigger": "Real CUIConfig.SpectatorCamAutoRadius",
            "contents": "SpectatorCamAutoRadius"
        },
        {
            "trigger": "EObserverMode CUIConfig.SpectatorObserverMode",
            "contents": "SpectatorObserverMode"
        },
        {
            "trigger": "Void SendChat(Text Text)",
            "contents": "SendChat(${1:Text Text})"
        },
        {
            "trigger": "Void SendNotice(Text Text, ENoticeLevel Level, CUser Avatar, EAvatarVariant AvatarVariant, EUISound Sound, Integer SoundVariant)",
            "contents": "SendNotice(${1:Text Text}, ${2:ENoticeLevel Level}, ${3:CUser Avatar}, ${4:EAvatarVariant AvatarVariant}, ${5:EUISound Sound}, ${6:Integer SoundVariant})"
        },
        {
            "trigger": "Text GetLayerManialinkAction(CUILayer Layer)",
            "contents": "GetLayerManialinkAction(${1:CUILayer Layer})"
        },
        {
            "trigger": "Void ClearLayerManialinkAction(CUILayer Layer)",
            "contents": "ClearLayerManialinkAction(${1:CUILayer Layer})"
        },
        {
            "trigger": "CAchievementsStatDesc",
            "contents": "CAchievementsStatDesc"
        },
        {
            "trigger": "Text CAchievementsStatDesc.TitleId",
            "contents": "TitleId"
        },
        {
            "trigger": "Text CAchievementsStatDesc.DisplayName",
            "contents": "DisplayName"
        },
        {
            "trigger": "Text CAchievementsStatDesc.Description",
            "contents": "Description"
        },
        {
            "trigger": "CMapGroup",
            "contents": "CMapGroup"
        },
        {
            "trigger": "CMapInfo[] CMapGroup.MapInfos",
            "contents": "MapInfos"
        },
        {
            "trigger": "Void IsUnlocked()",
            "contents": "IsUnlocked()"
        },
        {
            "trigger": "CSmMode",
            "contents": "CSmMode"
        },
        {
            "trigger": "CSmMode::EWeapon::Laser",
            "contents": "CSmMode::EWeapon::Laser"
        },
        {
            "trigger": "CSmMode::EWeapon::Rocket",
            "contents": "CSmMode::EWeapon::Rocket"
        },
        {
            "trigger": "CSmMode::EWeapon::Nucleus",
            "contents": "CSmMode::EWeapon::Nucleus"
        },
        {
            "trigger": "CSmMode::EWeapon::Arrow",
            "contents": "CSmMode::EWeapon::Arrow"
        },
        {
            "trigger": "CSmMode::EWeapon::Missile",
            "contents": "CSmMode::EWeapon::Missile"
        },
        {
            "trigger": "CSmMode::EActionSlot::Slot_A",
            "contents": "CSmMode::EActionSlot::Slot_A"
        },
        {
            "trigger": "CSmMode::EActionSlot::Slot_B",
            "contents": "CSmMode::EActionSlot::Slot_B"
        },
        {
            "trigger": "CSmMode::EActionSlot::Slot_C",
            "contents": "CSmMode::EActionSlot::Slot_C"
        },
        {
            "trigger": "CSmMode::EActionSlot::Slot_D",
            "contents": "CSmMode::EActionSlot::Slot_D"
        },
        {
            "trigger": "CSmMode::EActionSlot::Slot_E",
            "contents": "CSmMode::EActionSlot::Slot_E"
        },
        {
            "trigger": "CSmMode::EActionSlot::Slot_F",
            "contents": "CSmMode::EActionSlot::Slot_F"
        },
        {
            "trigger": "CSmMode::EActionSlot::Slot_G",
            "contents": "CSmMode::EActionSlot::Slot_G"
        },
        {
            "trigger": "CSmMode::EActionSlot::Slot_H",
            "contents": "CSmMode::EActionSlot::Slot_H"
        },
        {
            "trigger": "CSmMode::EActionInput::Weapon",
            "contents": "CSmMode::EActionInput::Weapon"
        },
        {
            "trigger": "CSmMode::EActionInput::Movement",
            "contents": "CSmMode::EActionInput::Movement"
        },
        {
            "trigger": "CSmMode::EActionInput::Activable1",
            "contents": "CSmMode::EActionInput::Activable1"
        },
        {
            "trigger": "CSmMode::EActionInput::Activable2",
            "contents": "CSmMode::EActionInput::Activable2"
        },
        {
            "trigger": "CSmMode::EActionInput::Activable3",
            "contents": "CSmMode::EActionInput::Activable3"
        },
        {
            "trigger": "CSmMode::EActionInput::Activable4",
            "contents": "CSmMode::EActionInput::Activable4"
        },
        {
            "trigger": "CSmMode::EActionInput::Consumable1",
            "contents": "CSmMode::EActionInput::Consumable1"
        },
        {
            "trigger": "CSmMode::EActionInput::Consumable2",
            "contents": "CSmMode::EActionInput::Consumable2"
        },
        {
            "trigger": "CSmMode::EActionInput::None",
            "contents": "CSmMode::EActionInput::None"
        },
        {
            "trigger": "CSmMode::EGameplay::Default",
            "contents": "CSmMode::EGameplay::Default"
        },
        {
            "trigger": "CSmMode::EGameplay::Mp3Beta0",
            "contents": "CSmMode::EGameplay::Mp3Beta0"
        },
        {
            "trigger": "Integer CSmMode.StartTime",
            "contents": "StartTime"
        },
        {
            "trigger": "Integer CSmMode.EndTime",
            "contents": "EndTime"
        },
        {
            "trigger": "Integer CSmMode.SpawnInvulnerabilityDuration",
            "contents": "SpawnInvulnerabilityDuration"
        },
        {
            "trigger": "Boolean CSmMode.UseClans",
            "contents": "UseClans"
        },
        {
            "trigger": "Boolean CSmMode.UseForcedClans",
            "contents": "UseForcedClans"
        },
        {
            "trigger": "Boolean CSmMode.UsePvPCollisions",
            "contents": "UsePvPCollisions"
        },
        {
            "trigger": "Boolean CSmMode.UsePvPWeapons",
            "contents": "UsePvPWeapons"
        },
        {
            "trigger": "Boolean CSmMode.UseInterractiveScreensIn3d",
            "contents": "UseInterractiveScreensIn3d"
        },
        {
            "trigger": "Boolean CSmMode.UseLaserVsBullets",
            "contents": "UseLaserVsBullets"
        },
        {
            "trigger": "Boolean CSmMode.UseLaserSkewering",
            "contents": "UseLaserSkewering"
        },
        {
            "trigger": "Boolean CSmMode.UsePlayerTagging",
            "contents": "UsePlayerTagging"
        },
        {
            "trigger": "Boolean CSmMode.UseBeaconsWithRecipients",
            "contents": "UseBeaconsWithRecipients"
        },
        {
            "trigger": "Boolean CSmMode.UseAmmoBonusOnHit",
            "contents": "UseAmmoBonusOnHit"
        },
        {
            "trigger": "Boolean CSmMode.UseSameWallJump",
            "contents": "UseSameWallJump"
        },
        {
            "trigger": "Boolean CSmMode.UseDefaultActionEvents",
            "contents": "UseDefaultActionEvents"
        },
        {
            "trigger": "Boolean CSmMode.UseAllies",
            "contents": "UseAllies"
        },
        {
            "trigger": "Boolean CSmMode.UseAutoSpawnBots",
            "contents": "UseAutoSpawnBots"
        },
        {
            "trigger": "Boolean CSmMode.UseAutoRespawnBots",
            "contents": "UseAutoRespawnBots"
        },
        {
            "trigger": "Boolean CSmMode.WalkOnWall",
            "contents": "WalkOnWall"
        },
        {
            "trigger": "Boolean CSmMode.UseAutoDiscardBotEvents",
            "contents": "UseAutoDiscardBotEvents"
        },
        {
            "trigger": "Boolean CSmMode.ForceNavMapsComputation",
            "contents": "ForceNavMapsComputation"
        },
        {
            "trigger": "Integer CSmMode.GameplayVersion",
            "contents": "GameplayVersion"
        },
        {
            "trigger": "EGameplay CSmMode.Gameplay",
            "contents": "Gameplay"
        },
        {
            "trigger": "Boolean CSmMode.UseProtectClanmates",
            "contents": "UseProtectClanmates"
        },
        {
            "trigger": "Real CSmMode.OffZoneRadius",
            "contents": "OffZoneRadius"
        },
        {
            "trigger": "Real CSmMode.OffZoneRadiusSpeed",
            "contents": "OffZoneRadiusSpeed"
        },
        {
            "trigger": "Ident CSmMode.OffZoneCenterLandmarkId",
            "contents": "OffZoneCenterLandmarkId"
        },
        {
            "trigger": "Integer CSmMode.PlayersNbTotal",
            "contents": "PlayersNbTotal"
        },
        {
            "trigger": "Integer CSmMode.PlayersNbAlive",
            "contents": "PlayersNbAlive"
        },
        {
            "trigger": "Integer CSmMode.PlayersNbDead",
            "contents": "PlayersNbDead"
        },
        {
            "trigger": "Integer CSmMode.ClansNbTotal",
            "contents": "ClansNbTotal"
        },
        {
            "trigger": "Integer CSmMode.ClansNbAlive",
            "contents": "ClansNbAlive"
        },
        {
            "trigger": "Integer CSmMode.ClansNbDead",
            "contents": "ClansNbDead"
        },
        {
            "trigger": "Integer[] CSmMode.ClansNbPlayers",
            "contents": "ClansNbPlayers"
        },
        {
            "trigger": "Integer[] CSmMode.ClansNbPlayersAlive",
            "contents": "ClansNbPlayersAlive"
        },
        {
            "trigger": "CSmPlayer[] CSmMode.Players",
            "contents": "Players"
        },
        {
            "trigger": "CSmPlayer[] CSmMode.BotPlayers",
            "contents": "BotPlayers"
        },
        {
            "trigger": "CSmPlayer[] CSmMode.Spectators",
            "contents": "Spectators"
        },
        {
            "trigger": "CSmPlayer[] CSmMode.AllPlayers",
            "contents": "AllPlayers"
        },
        {
            "trigger": "CSmModeEvent[] CSmMode.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "CSmMapBase[] CSmMode.MapBases",
            "contents": "MapBases"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks",
            "contents": "MapLandmarks"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks_PlayerSpawn",
            "contents": "MapLandmarks_PlayerSpawn"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks_Gauge",
            "contents": "MapLandmarks_Gauge"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks_Sector",
            "contents": "MapLandmarks_Sector"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks_BotPath",
            "contents": "MapLandmarks_BotPath"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks_BotSpawn",
            "contents": "MapLandmarks_BotSpawn"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks_ObjectAnchor",
            "contents": "MapLandmarks_ObjectAnchor"
        },
        {
            "trigger": "CSmMapLandmark[] CSmMode.MapLandmarks_Gate",
            "contents": "MapLandmarks_Gate"
        },
        {
            "trigger": "CSmScore[] CSmMode.Scores",
            "contents": "Scores"
        },
        {
            "trigger": "Integer[] CSmMode.ClanScores",
            "contents": "ClanScores"
        },
        {
            "trigger": "CSmObject[] CSmMode.Objects",
            "contents": "Objects"
        },
        {
            "trigger": "Void PassOn(CSmModeEvent Event)",
            "contents": "PassOn(${1:CSmModeEvent Event})"
        },
        {
            "trigger": "Void Discard(CSmModeEvent Event)",
            "contents": "Discard(${1:CSmModeEvent Event})"
        },
        {
            "trigger": "Void SpawnPlayer(CSmPlayer Player, Integer ClanNum, Integer Armor, CSmMapPlayerSpawn PlayerSpawn, Integer ActivationDate)",
            "contents": "SpawnPlayer(${1:CSmPlayer Player}, ${2:Integer ClanNum}, ${3:Integer Armor}, ${4:CSmMapPlayerSpawn PlayerSpawn}, ${5:Integer ActivationDate})"
        },
        {
            "trigger": "Void SpawnBotPlayer(CSmPlayer Player, Integer ClanNum, Integer Armor, CSmMapPlayerSpawn PlayerSpawn, Integer ActivationDate)",
            "contents": "SpawnBotPlayer(${1:CSmPlayer Player}, ${2:Integer ClanNum}, ${3:Integer Armor}, ${4:CSmMapPlayerSpawn PlayerSpawn}, ${5:Integer ActivationDate})"
        },
        {
            "trigger": "Void SpawnBotPlayer(CSmPlayer Player, Integer ClanNum, Integer Armor, CSmMapBotPath BotPath, Integer ActivationDate)",
            "contents": "SpawnBotPlayer(${1:CSmPlayer Player}, ${2:Integer ClanNum}, ${3:Integer Armor}, ${4:CSmMapBotPath BotPath}, ${5:Integer ActivationDate})"
        },
        {
            "trigger": "Void SpawnBotPlayer(CSmPlayer Player, Integer ClanNum, Integer Armor, CSmMapBotSpawn BotSpawn, Integer ActivationDate)",
            "contents": "SpawnBotPlayer(${1:CSmPlayer Player}, ${2:Integer ClanNum}, ${3:Integer Armor}, ${4:CSmMapBotSpawn BotSpawn}, ${5:Integer ActivationDate})"
        },
        {
            "trigger": "Void SpawnBotPlayer(CSmPlayer Player, CSmPlayer Owner, Integer Armor, Vec3 Offset, Integer ActivationDate)",
            "contents": "SpawnBotPlayer(${1:CSmPlayer Player}, ${2:CSmPlayer Owner}, ${3:Integer Armor}, ${4:Vec3 Offset}, ${5:Integer ActivationDate})"
        },
        {
            "trigger": "Void UnspawnPlayer(CSmPlayer Player)",
            "contents": "UnspawnPlayer(${1:CSmPlayer Player})"
        },
        {
            "trigger": "Void ClearScores()",
            "contents": "ClearScores()"
        },
        {
            "trigger": "Void SetPlayerClan(CSmPlayer Player, Integer ClanNum)",
            "contents": "SetPlayerClan(${1:CSmPlayer Player}, ${2:Integer ClanNum})"
        },
        {
            "trigger": "Void SetPlayerWeapon(CSmPlayer Player, EWeapon DefaultWeapon, Boolean AutoSwitchWeapon)",
            "contents": "SetPlayerWeapon(${1:CSmPlayer Player}, ${2:EWeapon DefaultWeapon}, ${3:Boolean AutoSwitchWeapon})"
        },
        {
            "trigger": "Void SetPlayerReloadAllWeapons(CSmPlayer Player, Boolean ReloadAllWeapons)",
            "contents": "SetPlayerReloadAllWeapons(${1:CSmPlayer Player}, ${2:Boolean ReloadAllWeapons})"
        },
        {
            "trigger": "Void SetPlayerAmmo(CSmPlayer Player, EWeapon Weapon, Integer Count)",
            "contents": "SetPlayerAmmo(${1:CSmPlayer Player}, ${2:EWeapon Weapon}, ${3:Integer Count})"
        },
        {
            "trigger": "Integer GetPlayerAmmo(CSmPlayer Player, EWeapon Weapon)",
            "contents": "GetPlayerAmmo(${1:CSmPlayer Player}, ${2:EWeapon Weapon})"
        },
        {
            "trigger": "Void AddPlayerAmmo(CSmPlayer Player, EWeapon Weapon, Real DeltaCount)",
            "contents": "AddPlayerAmmo(${1:CSmPlayer Player}, ${2:EWeapon Weapon}, ${3:Real DeltaCount})"
        },
        {
            "trigger": "Void SetPlayerAmmoMax(CSmPlayer Player, EWeapon Weapon, Integer Count)",
            "contents": "SetPlayerAmmoMax(${1:CSmPlayer Player}, ${2:EWeapon Weapon}, ${3:Integer Count})"
        },
        {
            "trigger": "Integer GetPlayerAmmoMax(CSmPlayer Player, EWeapon Weapon)",
            "contents": "GetPlayerAmmoMax(${1:CSmPlayer Player}, ${2:EWeapon Weapon})"
        },
        {
            "trigger": "Void AddPlayerArmor(CSmPlayer Victim, Integer DeltaArmor, CSmPlayer Shooter, Integer ShooterPoints)",
            "contents": "AddPlayerArmor(${1:CSmPlayer Victim}, ${2:Integer DeltaArmor}, ${3:CSmPlayer Shooter}, ${4:Integer ShooterPoints})"
        },
        {
            "trigger": "Void RemovePlayerArmor(CSmPlayer Victim, Integer DeltaArmor, CSmPlayer Shooter, Integer ShooterPoints)",
            "contents": "RemovePlayerArmor(${1:CSmPlayer Victim}, ${2:Integer DeltaArmor}, ${3:CSmPlayer Shooter}, ${4:Integer ShooterPoints})"
        },
        {
            "trigger": "Integer GetWeaponNum(EWeapon Weapon)",
            "contents": "GetWeaponNum(${1:EWeapon Weapon})"
        },
        {
            "trigger": "Boolean CanRespawnPlayer(CSmPlayer Player)",
            "contents": "CanRespawnPlayer(${1:CSmPlayer Player})"
        },
        {
            "trigger": "Void RespawnPlayer(CSmPlayer Player)",
            "contents": "RespawnPlayer(${1:CSmPlayer Player})"
        },
        {
            "trigger": "Void RespawnPlayer(CSmPlayer Player, CSmMapLandmark CheckpointLandmark)",
            "contents": "RespawnPlayer(${1:CSmPlayer Player}, ${2:CSmMapLandmark CheckpointLandmark})"
        },
        {
            "trigger": "CSmPlayer CreateBotPlayer(Ident ModelId, Integer TeamNum)",
            "contents": "CreateBotPlayer(${1:Ident ModelId}, ${2:Integer TeamNum})"
        },
        {
            "trigger": "Void DestroyBotPlayer(CSmPlayer BotPlayer)",
            "contents": "DestroyBotPlayer(${1:CSmPlayer BotPlayer})"
        },
        {
            "trigger": "Void DestroyAllBotPlayers()",
            "contents": "DestroyAllBotPlayers()"
        },
        {
            "trigger": "Void ScriptedBot_Move(CSmPlayer BotPlayer, Vec3 Goal)",
            "contents": "ScriptedBot_Move(${1:CSmPlayer BotPlayer}, ${2:Vec3 Goal})"
        },
        {
            "trigger": "Void ScriptedBot_MoveDelta(CSmPlayer BotPlayer, Vec3 Delta)",
            "contents": "ScriptedBot_MoveDelta(${1:CSmPlayer BotPlayer}, ${2:Vec3 Delta})"
        },
        {
            "trigger": "Void ScriptedBot_MoveAndAim(CSmPlayer BotPlayer, Vec3 Goal)",
            "contents": "ScriptedBot_MoveAndAim(${1:CSmPlayer BotPlayer}, ${2:Vec3 Goal})"
        },
        {
            "trigger": "Void ScriptedBot_MoveDeltaAndAim(CSmPlayer BotPlayer, Vec3 Delta)",
            "contents": "ScriptedBot_MoveDeltaAndAim(${1:CSmPlayer BotPlayer}, ${2:Vec3 Delta})"
        },
        {
            "trigger": "Void ScriptedBot_Aim(CSmPlayer BotPlayer, Vec3 Goal)",
            "contents": "ScriptedBot_Aim(${1:CSmPlayer BotPlayer}, ${2:Vec3 Goal})"
        },
        {
            "trigger": "Void ScriptedBot_AimDelta(CSmPlayer BotPlayer, Real DeltaYaw, Real DeltaPitch)",
            "contents": "ScriptedBot_AimDelta(${1:CSmPlayer BotPlayer}, ${2:Real DeltaYaw}, ${3:Real DeltaPitch})"
        },
        {
            "trigger": "Void ScriptedBot_RequestAction(CSmPlayer BotPlayer)",
            "contents": "ScriptedBot_RequestAction(${1:CSmPlayer BotPlayer})"
        },
        {
            "trigger": "Void ScriptedBot_RequestGunTrigger(CSmPlayer BotPlayer)",
            "contents": "ScriptedBot_RequestGunTrigger(${1:CSmPlayer BotPlayer})"
        },
        {
            "trigger": "Void ActionLoad(CSmPlayer Player, EActionSlot ActionSlot, Ident ModelId)",
            "contents": "ActionLoad(${1:CSmPlayer Player}, ${2:EActionSlot ActionSlot}, ${3:Ident ModelId})"
        },
        {
            "trigger": "Void ActionBind(CSmPlayer Player, EActionSlot ActionSlot, EActionInput ActionInput)",
            "contents": "ActionBind(${1:CSmPlayer Player}, ${2:EActionSlot ActionSlot}, ${3:EActionInput ActionInput})"
        },
        {
            "trigger": "Void ActionSetVariant(CSmPlayer Player, EActionSlot ActionSlot, Integer ActionVariant)",
            "contents": "ActionSetVariant(${1:CSmPlayer Player}, ${2:EActionSlot ActionSlot}, ${3:Integer ActionVariant})"
        },
        {
            "trigger": "Void SetNbFakePlayers(Integer NbClan1, Integer NbClan2)",
            "contents": "SetNbFakePlayers(${1:Integer NbClan1}, ${2:Integer NbClan2})"
        },
        {
            "trigger": "CSmObject ObjectCreate(Ident ModelId)",
            "contents": "ObjectCreate(${1:Ident ModelId})"
        },
        {
            "trigger": "Void ObjectDestroy(CSmObject Object)",
            "contents": "ObjectDestroy(${1:CSmObject Object})"
        },
        {
            "trigger": "Void ObjectDestroyAll()",
            "contents": "ObjectDestroyAll()"
        },
        {
            "trigger": "Void RemoveShieldArmor(Integer VictimShieldId, Integer Damage)",
            "contents": "RemoveShieldArmor(${1:Integer VictimShieldId}, ${2:Integer Damage})"
        },
        {
            "trigger": "Void Replay_SaveAttackScore(CSmPlayer Player, Integer Score)",
            "contents": "Replay_SaveAttackScore(${1:CSmPlayer Player}, ${2:Integer Score})"
        },
        {
            "trigger": "Void Replay_SaveDefenseScore(CSmPlayer Player, Integer Score)",
            "contents": "Replay_SaveDefenseScore(${1:CSmPlayer Player}, ${2:Integer Score})"
        },
        {
            "trigger": "Void Replay_SaveTeamScore(Integer Team, Integer Score)",
            "contents": "Replay_SaveTeamScore(${1:Integer Team}, ${2:Integer Score})"
        },
        {
            "trigger": "Void Replay_SavePlayerOfInterest(CSmPlayer Player)",
            "contents": "Replay_SavePlayerOfInterest(${1:CSmPlayer Player})"
        },
        {
            "trigger": "Void Replay_SaveWinner(CSmPlayer Player)",
            "contents": "Replay_SaveWinner(${1:CSmPlayer Player})"
        },
        {
            "trigger": "Void Replay_SaveInterface()",
            "contents": "Replay_SaveInterface()"
        },
        {
            "trigger": "CTaskResult_MapList",
            "contents": "CTaskResult_MapList"
        },
        {
            "trigger": "Text CTaskResult_MapList.ParentPath",
            "contents": "ParentPath"
        },
        {
            "trigger": "Text CTaskResult_MapList.Path",
            "contents": "Path"
        },
        {
            "trigger": "CMapInfo[] CTaskResult_MapList.MapInfos",
            "contents": "MapInfos"
        },
        {
            "trigger": "Text[] CTaskResult_MapList.SubFolders",
            "contents": "SubFolders"
        },
        {
            "trigger": "CImage GetThumbnail(Text MapUid)",
            "contents": "GetThumbnail(${1:Text MapUid})"
        },
        {
            "trigger": "CManiaAppEvent",
            "contents": "CManiaAppEvent"
        },
        {
            "trigger": "CManiaAppEvent::EType::LayerCustomEvent",
            "contents": "CManiaAppEvent::EType::LayerCustomEvent"
        },
        {
            "trigger": "CManiaAppEvent::EType::KeyPress",
            "contents": "CManiaAppEvent::EType::KeyPress"
        },
        {
            "trigger": "CManiaAppEvent::EType::ExternalCustomEvent",
            "contents": "CManiaAppEvent::EType::ExternalCustomEvent"
        },
        {
            "trigger": "CManiaAppEvent::EType::MenuNavigation",
            "contents": "CManiaAppEvent::EType::MenuNavigation"
        },
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::Up",
            "contents": "CManiaAppEvent::EMenuNavAction::Up"
        },
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::Right",
            "contents": "CManiaAppEvent::EMenuNavAction::Right"
        },
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::Left",
            "contents": "CManiaAppEvent::EMenuNavAction::Left"
        },
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::Down",
            "contents": "CManiaAppEvent::EMenuNavAction::Down"
        },
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::Select",
            "contents": "CManiaAppEvent::EMenuNavAction::Select"
        },
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::Cancel",
            "contents": "CManiaAppEvent::EMenuNavAction::Cancel"
        },
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::PageUp",
            "contents": "CManiaAppEvent::EMenuNavAction::PageUp"
        },
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::PageDown",
            "contents": "CManiaAppEvent::EMenuNavAction::PageDown"
        },
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::AppMenu",
            "contents": "CManiaAppEvent::EMenuNavAction::AppMenu"
        },
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::Action1",
            "contents": "CManiaAppEvent::EMenuNavAction::Action1"
        },
        {
            "trigger": "CManiaAppEvent::EMenuNavAction::Action2",
            "contents": "CManiaAppEvent::EMenuNavAction::Action2"
        },
        {
            "trigger": "EType CManiaAppEvent.Type",
            "contents": "Type"
        },
        {
            "trigger": "CUILayer CManiaAppEvent.CustomEventLayer",
            "contents": "CustomEventLayer"
        },
        {
            "trigger": "Text CManiaAppEvent.CustomEventType",
            "contents": "CustomEventType"
        },
        {
            "trigger": "Text[] CManiaAppEvent.CustomEventData",
            "contents": "CustomEventData"
        },
        {
            "trigger": "Text CManiaAppEvent.ExternalEventType",
            "contents": "ExternalEventType"
        },
        {
            "trigger": "Text[] CManiaAppEvent.ExternalEventData",
            "contents": "ExternalEventData"
        },
        {
            "trigger": "EMenuNavAction CManiaAppEvent.MenuNavAction",
            "contents": "MenuNavAction"
        },
        {
            "trigger": "Boolean CManiaAppEvent.IsActionAutoRepeat",
            "contents": "IsActionAutoRepeat"
        },
        {
            "trigger": "Integer CManiaAppEvent.KeyCode",
            "contents": "KeyCode"
        },
        {
            "trigger": "Text CManiaAppEvent.KeyName",
            "contents": "KeyName"
        },
        {
            "trigger": "COnlinePresence",
            "contents": "COnlinePresence"
        },
        {
            "trigger": "Text COnlinePresence.Login",
            "contents": "Login"
        },
        {
            "trigger": "Text COnlinePresence.DisplayName",
            "contents": "DisplayName"
        },
        {
            "trigger": "Text COnlinePresence.ServerLogin",
            "contents": "ServerLogin"
        },
        {
            "trigger": "Boolean COnlinePresence.IsOnline",
            "contents": "IsOnline"
        },
        {
            "trigger": "CUserV2",
            "contents": "CUserV2"
        },
        {
            "trigger": "Text CUserV2.SystemName",
            "contents": "SystemName"
        },
        {
            "trigger": "Text CUserV2.DisplayName",
            "contents": "DisplayName"
        },
        {
            "trigger": "Vec3 CUserV2.Color",
            "contents": "Color"
        },
        {
            "trigger": "Boolean CUserV2.PersistentIsReady",
            "contents": "PersistentIsReady"
        },
        {
            "trigger": "CUserV2Profile CUserV2.Config",
            "contents": "Config"
        },
        {
            "trigger": "Void PersistentSave()",
            "contents": "PersistentSave()"
        },
        {
            "trigger": "CXmlRpcEvent",
            "contents": "CXmlRpcEvent"
        },
        {
            "trigger": "CXmlRpcEvent::EType::Unknown",
            "contents": "CXmlRpcEvent::EType::Unknown"
        },
        {
            "trigger": "CXmlRpcEvent::EType::Callback",
            "contents": "CXmlRpcEvent::EType::Callback"
        },
        {
            "trigger": "CXmlRpcEvent::EType::CallbackArray",
            "contents": "CXmlRpcEvent::EType::CallbackArray"
        },
        {
            "trigger": "EType CXmlRpcEvent.Type",
            "contents": "Type"
        },
        {
            "trigger": "Text CXmlRpcEvent.Param1",
            "contents": "Param1"
        },
        {
            "trigger": "Text CXmlRpcEvent.Param2",
            "contents": "Param2"
        },
        {
            "trigger": "Text CXmlRpcEvent.ParamArray1",
            "contents": "ParamArray1"
        },
        {
            "trigger": "Text[] CXmlRpcEvent.ParamArray2",
            "contents": "ParamArray2"
        },
        {
            "trigger": "CModulePlaygroundScoresTable",
            "contents": "CModulePlaygroundScoresTable"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::CustomString",
            "contents": "CModulePlaygroundScoresTable::EColumnType::CustomString"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::CustomNatural",
            "contents": "CModulePlaygroundScoresTable::EColumnType::CustomNatural"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::CustomInteger",
            "contents": "CModulePlaygroundScoresTable::EColumnType::CustomInteger"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::CustomReal",
            "contents": "CModulePlaygroundScoresTable::EColumnType::CustomReal"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::CustomTime",
            "contents": "CModulePlaygroundScoresTable::EColumnType::CustomTime"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::Avatar",
            "contents": "CModulePlaygroundScoresTable::EColumnType::Avatar"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::Name",
            "contents": "CModulePlaygroundScoresTable::EColumnType::Name"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::ManiaStars",
            "contents": "CModulePlaygroundScoresTable::EColumnType::ManiaStars"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::Tools",
            "contents": "CModulePlaygroundScoresTable::EColumnType::Tools"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::Tags",
            "contents": "CModulePlaygroundScoresTable::EColumnType::Tags"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMBestTime",
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMBestTime"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMPrevTime",
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMPrevTime"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMBestLapTime",
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMBestLapTime"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMStunts",
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMStunts"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMRespawns",
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMRespawns"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMCheckpoints",
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMCheckpoints"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMPoints",
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMPoints"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::TMPrevRaceDeltaPoints",
            "contents": "CModulePlaygroundScoresTable::EColumnType::TMPrevRaceDeltaPoints"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::SMPoints",
            "contents": "CModulePlaygroundScoresTable::EColumnType::SMPoints"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EColumnType::SMRoundPoints",
            "contents": "CModulePlaygroundScoresTable::EColumnType::SMRoundPoints"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::Default",
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::Default"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::Name",
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::Name"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::LadderRanking",
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::LadderRanking"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::TMPoints",
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::TMPoints"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::TMBestTime",
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::TMBestTime"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::TMStunts",
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::TMStunts"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::TMRespawns",
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::TMRespawns"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::TMCheckpoints",
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::TMCheckpoints"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::TMPrevTime",
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::TMPrevTime"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::SMPoints",
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::SMPoints"
        },
        {
            "trigger": "CModulePlaygroundScoresTable::EScoreSortOrder::SMRoundPoints",
            "contents": "CModulePlaygroundScoresTable::EScoreSortOrder::SMRoundPoints"
        },
        {
            "trigger": "Void SetFooterText(Text FooterText)",
            "contents": "SetFooterText(${1:Text FooterText})"
        },
        {
            "trigger": "Void ResetCustomColumns(CScore Score)",
            "contents": "ResetCustomColumns(${1:CScore Score})"
        },
        {
            "trigger": "Void ResetCustomColumns()",
            "contents": "ResetCustomColumns()"
        },
        {
            "trigger": "Void Scores_Sort(EScoreSortOrder SortOrder)",
            "contents": "Scores_Sort(${1:EScoreSortOrder SortOrder})"
        },
        {
            "trigger": "Void SetColumnValue(CScore Score, Text ColumnId, Text ColumnValue)",
            "contents": "SetColumnValue(${1:CScore Score}, ${2:Text ColumnId}, ${3:Text ColumnValue})"
        },
        {
            "trigger": "Void SetColumnValue(CScore Score, Text ColumnId, Integer ColumnValue)",
            "contents": "SetColumnValue(${1:CScore Score}, ${2:Text ColumnId}, ${3:Integer ColumnValue})"
        },
        {
            "trigger": "Void SetColumnValue(CScore Score, Text ColumnId, Real ColumnValue)",
            "contents": "SetColumnValue(${1:CScore Score}, ${2:Text ColumnId}, ${3:Real ColumnValue})"
        },
        {
            "trigger": "Void SetColumnVisibility(EColumnType Type, Boolean Visibility)",
            "contents": "SetColumnVisibility(${1:EColumnType Type}, ${2:Boolean Visibility})"
        },
        {
            "trigger": "Void SetColumnVisibility(Text ColumnId, Boolean Visibility)",
            "contents": "SetColumnVisibility(${1:Text ColumnId}, ${2:Boolean Visibility})"
        },
        {
            "trigger": "CVideoManager",
            "contents": "CVideoManager"
        },
        {
            "trigger": "CVideo[] CVideoManager.Videos",
            "contents": "Videos"
        },
        {
            "trigger": "CVideo CreateVideo(Text Url, Boolean IsLooping, Boolean AutoProcessing)",
            "contents": "CreateVideo(${1:Text Url}, ${2:Boolean IsLooping}, ${3:Boolean AutoProcessing})"
        },
        {
            "trigger": "Void DestroyVideo(CVideo Video)",
            "contents": "DestroyVideo(${1:CVideo Video})"
        },
        {
            "trigger": "CManiaAppBrowser",
            "contents": "CManiaAppBrowser"
        },
        {
            "trigger": "CManiaAppEvent[] CManiaAppBrowser.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "Text CManiaAppBrowser.BrowserFocusedFrameId",
            "contents": "BrowserFocusedFrameId"
        },
        {
            "trigger": "Void BrowserBack()",
            "contents": "BrowserBack()"
        },
        {
            "trigger": "Void BrowserQuit()",
            "contents": "BrowserQuit()"
        },
        {
            "trigger": "Void BrowserHome()",
            "contents": "BrowserHome()"
        },
        {
            "trigger": "Void BrowserReload()",
            "contents": "BrowserReload()"
        },
        {
            "trigger": "CManiaAppPlayground",
            "contents": "CManiaAppPlayground"
        },
        {
            "trigger": "CSmPlayer",
            "contents": "CSmPlayer"
        },
        {
            "trigger": "CSmPlayer::ESpawnStatus::NotSpawned",
            "contents": "CSmPlayer::ESpawnStatus::NotSpawned"
        },
        {
            "trigger": "CSmPlayer::ESpawnStatus::Spawning",
            "contents": "CSmPlayer::ESpawnStatus::Spawning"
        },
        {
            "trigger": "CSmPlayer::ESpawnStatus::Spawned",
            "contents": "CSmPlayer::ESpawnStatus::Spawned"
        },
        {
            "trigger": "CSmScore CSmPlayer.Score",
            "contents": "Score"
        },
        {
            "trigger": "ESpawnStatus CSmPlayer.SpawnStatus",
            "contents": "SpawnStatus"
        },
        {
            "trigger": "Integer CSmPlayer.StartTime",
            "contents": "StartTime"
        },
        {
            "trigger": "Integer CSmPlayer.EndTime",
            "contents": "EndTime"
        },
        {
            "trigger": "Real CSmPlayer.AmmoGain",
            "contents": "AmmoGain"
        },
        {
            "trigger": "Real CSmPlayer.AmmoPower",
            "contents": "AmmoPower"
        },
        {
            "trigger": "Boolean CSmPlayer.AutoSwitchWeapon",
            "contents": "AutoSwitchWeapon"
        },
        {
            "trigger": "Integer CSmPlayer.CurWeapon",
            "contents": "CurWeapon"
        },
        {
            "trigger": "Integer CSmPlayer.CurAmmo",
            "contents": "CurAmmo"
        },
        {
            "trigger": "Integer CSmPlayer.CurAmmoMax",
            "contents": "CurAmmoMax"
        },
        {
            "trigger": "Integer CSmPlayer.CurAmmoUnit",
            "contents": "CurAmmoUnit"
        },
        {
            "trigger": "Integer CSmPlayer.Armor",
            "contents": "Armor"
        },
        {
            "trigger": "Integer CSmPlayer.ArmorMax",
            "contents": "ArmorMax"
        },
        {
            "trigger": "Integer CSmPlayer.ArmorGain",
            "contents": "ArmorGain"
        },
        {
            "trigger": "Integer CSmPlayer.ArmorReplenishGain",
            "contents": "ArmorReplenishGain"
        },
        {
            "trigger": "Real CSmPlayer.ArmorPower",
            "contents": "ArmorPower"
        },
        {
            "trigger": "Integer CSmPlayer.Stamina",
            "contents": "Stamina"
        },
        {
            "trigger": "Real CSmPlayer.StaminaMax",
            "contents": "StaminaMax"
        },
        {
            "trigger": "Real CSmPlayer.StaminaGain",
            "contents": "StaminaGain"
        },
        {
            "trigger": "Real CSmPlayer.StaminaPower",
            "contents": "StaminaPower"
        },
        {
            "trigger": "Real CSmPlayer.SpeedPower",
            "contents": "SpeedPower"
        },
        {
            "trigger": "Real CSmPlayer.JumpPower",
            "contents": "JumpPower"
        },
        {
            "trigger": "Boolean CSmPlayer.AllowWallJump",
            "contents": "AllowWallJump"
        },
        {
            "trigger": "Boolean CSmPlayer.AllowProgressiveJump",
            "contents": "AllowProgressiveJump"
        },
        {
            "trigger": "Boolean CSmPlayer.UseAlternateWeaponVisual",
            "contents": "UseAlternateWeaponVisual"
        },
        {
            "trigger": "Boolean CSmPlayer.IsHighlighted",
            "contents": "IsHighlighted"
        },
        {
            "trigger": "Real CSmPlayer.EnergyLevel",
            "contents": "EnergyLevel"
        },
        {
            "trigger": "Vec3 CSmPlayer.ForceColor",
            "contents": "ForceColor"
        },
        {
            "trigger": "Real CSmPlayer.GetLinearHue",
            "contents": "GetLinearHue"
        },
        {
            "trigger": "Real CSmPlayer.ForceLinearHue",
            "contents": "ForceLinearHue"
        },
        {
            "trigger": "Ident CSmPlayer.ForceModelId",
            "contents": "ForceModelId"
        },
        {
            "trigger": "Boolean CSmPlayer.HasShield",
            "contents": "HasShield"
        },
        {
            "trigger": "Real CSmPlayer.ThrowSpeed",
            "contents": "ThrowSpeed"
        },
        {
            "trigger": "Integer CSmPlayer.CurrentClan",
            "contents": "CurrentClan"
        },
        {
            "trigger": "Integer CSmPlayer.IdleDuration",
            "contents": "IdleDuration"
        },
        {
            "trigger": "Vec3 CSmPlayer.Position",
            "contents": "Position"
        },
        {
            "trigger": "Real CSmPlayer.AimYaw",
            "contents": "AimYaw"
        },
        {
            "trigger": "Real CSmPlayer.AimPitch",
            "contents": "AimPitch"
        },
        {
            "trigger": "Vec3 CSmPlayer.AimDirection",
            "contents": "AimDirection"
        },
        {
            "trigger": "Boolean CSmPlayer.IsUnderground",
            "contents": "IsUnderground"
        },
        {
            "trigger": "Boolean CSmPlayer.IsTouchingGround",
            "contents": "IsTouchingGround"
        },
        {
            "trigger": "Boolean CSmPlayer.IsInAir",
            "contents": "IsInAir"
        },
        {
            "trigger": "Boolean CSmPlayer.IsOnTechGround",
            "contents": "IsOnTechGround"
        },
        {
            "trigger": "Boolean CSmPlayer.IsOnTechLaser",
            "contents": "IsOnTechLaser"
        },
        {
            "trigger": "Boolean CSmPlayer.IsOnTechArrow",
            "contents": "IsOnTechArrow"
        },
        {
            "trigger": "Boolean CSmPlayer.IsOnTechArmor",
            "contents": "IsOnTechArmor"
        },
        {
            "trigger": "Boolean CSmPlayer.IsOnTechSafeZone",
            "contents": "IsOnTechSafeZone"
        },
        {
            "trigger": "Boolean CSmPlayer.IsOnTech",
            "contents": "IsOnTech"
        },
        {
            "trigger": "Boolean CSmPlayer.IsOnTechNoWeapon",
            "contents": "IsOnTechNoWeapon"
        },
        {
            "trigger": "Boolean CSmPlayer.IsInWater",
            "contents": "IsInWater"
        },
        {
            "trigger": "Vec3 CSmPlayer.Velocity",
            "contents": "Velocity"
        },
        {
            "trigger": "Real CSmPlayer.Speed",
            "contents": "Speed"
        },
        {
            "trigger": "Boolean CSmPlayer.IsInOffZone",
            "contents": "IsInOffZone"
        },
        {
            "trigger": "Boolean CSmPlayer.IsCapturing",
            "contents": "IsCapturing"
        },
        {
            "trigger": "CSmMapLandmark CSmPlayer.CapturedLandmark",
            "contents": "CapturedLandmark"
        },
        {
            "trigger": "CSmObject[] CSmPlayer.Objects",
            "contents": "Objects"
        },
        {
            "trigger": "Boolean CSmPlayer.IsFakePlayer",
            "contents": "IsFakePlayer"
        },
        {
            "trigger": "Boolean CSmPlayer.IsBot",
            "contents": "IsBot"
        },
        {
            "trigger": "CSmPlayerDriver CSmPlayer.Driver",
            "contents": "Driver"
        },
        {
            "trigger": "CMlFileEntry",
            "contents": "CMlFileEntry"
        },
        {
            "trigger": "Text CMlFileEntry.FullFileName",
            "contents": "FullFileName"
        },
        {
            "trigger": "CMap",
            "contents": "CMap"
        },
        {
            "trigger": "CMapInfo CMap.MapInfo",
            "contents": "MapInfo"
        },
        {
            "trigger": "Text CMap.MapName",
            "contents": "MapName"
        },
        {
            "trigger": "Text CMap.Comments",
            "contents": "Comments"
        },
        {
            "trigger": "Text CMap.AuthorZoneIconUrl",
            "contents": "AuthorZoneIconUrl"
        },
        {
            "trigger": "Text CMap.CollectionName",
            "contents": "CollectionName"
        },
        {
            "trigger": "Text CMap.DecorationName",
            "contents": "DecorationName"
        },
        {
            "trigger": "Text CMap.AuthorLogin",
            "contents": "AuthorLogin"
        },
        {
            "trigger": "Text CMap.AuthorNickName",
            "contents": "AuthorNickName"
        },
        {
            "trigger": "Text CMap.AuthorZonePath",
            "contents": "AuthorZonePath"
        },
        {
            "trigger": "Text CMap.MapType",
            "contents": "MapType"
        },
        {
            "trigger": "Text CMap.MapStyle",
            "contents": "MapStyle"
        },
        {
            "trigger": "Integer CMap.TMObjective_AuthorTime",
            "contents": "TMObjective_AuthorTime"
        },
        {
            "trigger": "Integer CMap.TMObjective_GoldTime",
            "contents": "TMObjective_GoldTime"
        },
        {
            "trigger": "Integer CMap.TMObjective_SilverTime",
            "contents": "TMObjective_SilverTime"
        },
        {
            "trigger": "Integer CMap.TMObjective_BronzeTime",
            "contents": "TMObjective_BronzeTime"
        },
        {
            "trigger": "Integer CMap.TMObjective_NbLaps",
            "contents": "TMObjective_NbLaps"
        },
        {
            "trigger": "Boolean CMap.TMObjective_IsLapRace",
            "contents": "TMObjective_IsLapRace"
        },
        {
            "trigger": "Text CMap.ObjectiveTextAuthor",
            "contents": "ObjectiveTextAuthor"
        },
        {
            "trigger": "Text CMap.ObjectiveTextGold",
            "contents": "ObjectiveTextGold"
        },
        {
            "trigger": "Text CMap.ObjectiveTextSilver",
            "contents": "ObjectiveTextSilver"
        },
        {
            "trigger": "Text CMap.ObjectiveTextBronze",
            "contents": "ObjectiveTextBronze"
        },
        {
            "trigger": "Integer CMap.CopperPrice",
            "contents": "CopperPrice"
        },
        {
            "trigger": "Int3 CMap.Size",
            "contents": "Size"
        },
        {
            "trigger": "CModeTurretManager",
            "contents": "CModeTurretManager"
        },
        {
            "trigger": "CModeTurret[] CModeTurretManager.Turrets",
            "contents": "Turrets"
        },
        {
            "trigger": "Void MapTurrets_Reset()",
            "contents": "MapTurrets_Reset()"
        },
        {
            "trigger": "CModeTurret Turret_Create(Ident ModelId, Vec3 Position, Vec3 Direction, Integer Clan, CPlayer Owner)",
            "contents": "Turret_Create(${1:Ident ModelId}, ${2:Vec3 Position}, ${3:Vec3 Direction}, ${4:Integer Clan}, ${5:CPlayer Owner})"
        },
        {
            "trigger": "Void Turret_Destroy(CModeTurret Turret)",
            "contents": "Turret_Destroy(${1:CModeTurret Turret})"
        },
        {
            "trigger": "CPrivilegeMgr",
            "contents": "CPrivilegeMgr"
        },
        {
            "trigger": "CPrivilegeMgr::EPrivilege::PlayMultiplayerMode",
            "contents": "CPrivilegeMgr::EPrivilege::PlayMultiplayerMode"
        },
        {
            "trigger": "CPrivilegeMgr::EPrivilege::PlayMultiplayerSession",
            "contents": "CPrivilegeMgr::EPrivilege::PlayMultiplayerSession"
        },
        {
            "trigger": "CPrivilegeMgr::EPrivilege::UploadUserCreatedContent",
            "contents": "CPrivilegeMgr::EPrivilege::UploadUserCreatedContent"
        },
        {
            "trigger": "CPrivilegeMgr::EPrivilege::ViewOnlinePresence",
            "contents": "CPrivilegeMgr::EPrivilege::ViewOnlinePresence"
        },
        {
            "trigger": "CPrivilegeMgr::EPrivilege::ViewUserCreatedContent",
            "contents": "CPrivilegeMgr::EPrivilege::ViewUserCreatedContent"
        },
        {
            "trigger": "CPrivilegeMgr::EPrivilege::ViewUserCreatedContentRequired",
            "contents": "CPrivilegeMgr::EPrivilege::ViewUserCreatedContentRequired"
        },
        {
            "trigger": "CPrivilegeMgr::EPrivilege::ViewUserGameHistory",
            "contents": "CPrivilegeMgr::EPrivilege::ViewUserGameHistory"
        },
        {
            "trigger": "CPrivilegeMgr::EPrivilege::VoiceChat",
            "contents": "CPrivilegeMgr::EPrivilege::VoiceChat"
        },
        {
            "trigger": "CPrivilegeMgr::EPrivilege::PlayMultiplayerAsync",
            "contents": "CPrivilegeMgr::EPrivilege::PlayMultiplayerAsync"
        },
        {
            "trigger": "CPrivilegeMgr::EPrivilege::DownloadUserCreatedContent",
            "contents": "CPrivilegeMgr::EPrivilege::DownloadUserCreatedContent"
        },
        {
            "trigger": "CTaskResult[] CPrivilegeMgr.TaskResults",
            "contents": "TaskResults"
        },
        {
            "trigger": "Void ReleaseTaskResult(Ident TaskId)",
            "contents": "ReleaseTaskResult(${1:Ident TaskId})"
        },
        {
            "trigger": "CTaskResult CheckPrivilege(Ident UserId, EPrivilege Privilege)",
            "contents": "CheckPrivilege(${1:Ident UserId}, ${2:EPrivilege Privilege})"
        },
        {
            "trigger": "CTaskResult CheckPrivilegeForAllUsers(EPrivilege Privilege)",
            "contents": "CheckPrivilegeForAllUsers(${1:EPrivilege Privilege})"
        },
        {
            "trigger": "CTaskResult_CheckTargetedPrivilege CheckTargetedPrivilege(Ident UserId, EPrivilege Privilege)",
            "contents": "CheckTargetedPrivilege(${1:Ident UserId}, ${2:EPrivilege Privilege})"
        },
        {
            "trigger": "CTaskResult_CheckTargetedPrivilege CheckTargetedPrivilegeForAllUsers(EPrivilege Privilege)",
            "contents": "CheckTargetedPrivilegeForAllUsers(${1:EPrivilege Privilege})"
        },
        {
            "trigger": "CPlug",
            "contents": "CPlug"
        },
        {
            "trigger": "CMapEditorPlugin",
            "contents": "CMapEditorPlugin"
        },
        {
            "trigger": "CMapEditorPlugin::CardinalDirections::North",
            "contents": "CMapEditorPlugin::CardinalDirections::North"
        },
        {
            "trigger": "CMapEditorPlugin::CardinalDirections::East",
            "contents": "CMapEditorPlugin::CardinalDirections::East"
        },
        {
            "trigger": "CMapEditorPlugin::CardinalDirections::South",
            "contents": "CMapEditorPlugin::CardinalDirections::South"
        },
        {
            "trigger": "CMapEditorPlugin::CardinalDirections::West",
            "contents": "CMapEditorPlugin::CardinalDirections::West"
        },
        {
            "trigger": "CMapEditorPlugin::PlaceMode::Unknown",
            "contents": "CMapEditorPlugin::PlaceMode::Unknown"
        },
        {
            "trigger": "CMapEditorPlugin::PlaceMode::Terraform",
            "contents": "CMapEditorPlugin::PlaceMode::Terraform"
        },
        {
            "trigger": "CMapEditorPlugin::PlaceMode::Block",
            "contents": "CMapEditorPlugin::PlaceMode::Block"
        },
        {
            "trigger": "CMapEditorPlugin::PlaceMode::Macroblock",
            "contents": "CMapEditorPlugin::PlaceMode::Macroblock"
        },
        {
            "trigger": "CMapEditorPlugin::PlaceMode::Skin",
            "contents": "CMapEditorPlugin::PlaceMode::Skin"
        },
        {
            "trigger": "CMapEditorPlugin::PlaceMode::CopyPaste",
            "contents": "CMapEditorPlugin::PlaceMode::CopyPaste"
        },
        {
            "trigger": "CMapEditorPlugin::PlaceMode::Test",
            "contents": "CMapEditorPlugin::PlaceMode::Test"
        },
        {
            "trigger": "CMapEditorPlugin::PlaceMode::Plugin",
            "contents": "CMapEditorPlugin::PlaceMode::Plugin"
        },
        {
            "trigger": "CMapEditorPlugin::PlaceMode::CustomSelection",
            "contents": "CMapEditorPlugin::PlaceMode::CustomSelection"
        },
        {
            "trigger": "CMapEditorPlugin::PlaceMode::OffZone",
            "contents": "CMapEditorPlugin::PlaceMode::OffZone"
        },
        {
            "trigger": "CMapEditorPlugin::PlaceMode::BlockProperty",
            "contents": "CMapEditorPlugin::PlaceMode::BlockProperty"
        },
        {
            "trigger": "CMapEditorPlugin::PlaceMode::Path",
            "contents": "CMapEditorPlugin::PlaceMode::Path"
        },
        {
            "trigger": "CMapEditorPlugin::PlaceMode::GhostBlock",
            "contents": "CMapEditorPlugin::PlaceMode::GhostBlock"
        },
        {
            "trigger": "CMapEditorPlugin::PlaceMode::Item",
            "contents": "CMapEditorPlugin::PlaceMode::Item"
        },
        {
            "trigger": "CMapEditorPlugin::PlaceMode::Light",
            "contents": "CMapEditorPlugin::PlaceMode::Light"
        },
        {
            "trigger": "CMapEditorPlugin::EditMode::Unknown",
            "contents": "CMapEditorPlugin::EditMode::Unknown"
        },
        {
            "trigger": "CMapEditorPlugin::EditMode::Place",
            "contents": "CMapEditorPlugin::EditMode::Place"
        },
        {
            "trigger": "CMapEditorPlugin::EditMode::FreeLook",
            "contents": "CMapEditorPlugin::EditMode::FreeLook"
        },
        {
            "trigger": "CMapEditorPlugin::EditMode::Erase",
            "contents": "CMapEditorPlugin::EditMode::Erase"
        },
        {
            "trigger": "CMapEditorPlugin::EditMode::Pick",
            "contents": "CMapEditorPlugin::EditMode::Pick"
        },
        {
            "trigger": "CMapEditorPlugin::EditMode::SelectionAdd",
            "contents": "CMapEditorPlugin::EditMode::SelectionAdd"
        },
        {
            "trigger": "CMapEditorPlugin::EditMode::SelectionRemove",
            "contents": "CMapEditorPlugin::EditMode::SelectionRemove"
        },
        {
            "trigger": "CMapEditorPlugin::ShadowsQuality::NotComputed",
            "contents": "CMapEditorPlugin::ShadowsQuality::NotComputed"
        },
        {
            "trigger": "CMapEditorPlugin::ShadowsQuality::VeryFast",
            "contents": "CMapEditorPlugin::ShadowsQuality::VeryFast"
        },
        {
            "trigger": "CMapEditorPlugin::ShadowsQuality::Fast",
            "contents": "CMapEditorPlugin::ShadowsQuality::Fast"
        },
        {
            "trigger": "CMapEditorPlugin::ShadowsQuality::Default",
            "contents": "CMapEditorPlugin::ShadowsQuality::Default"
        },
        {
            "trigger": "CMapEditorPlugin::ShadowsQuality::High",
            "contents": "CMapEditorPlugin::ShadowsQuality::High"
        },
        {
            "trigger": "CMapEditorPlugin::ShadowsQuality::Ultra",
            "contents": "CMapEditorPlugin::ShadowsQuality::Ultra"
        },
        {
            "trigger": "CMapEditorPlugin::ValidationStatus::NotValidable",
            "contents": "CMapEditorPlugin::ValidationStatus::NotValidable"
        },
        {
            "trigger": "CMapEditorPlugin::ValidationStatus::Validable",
            "contents": "CMapEditorPlugin::ValidationStatus::Validable"
        },
        {
            "trigger": "CMapEditorPlugin::ValidationStatus::Validated",
            "contents": "CMapEditorPlugin::ValidationStatus::Validated"
        },
        {
            "trigger": "CMapEditorPluginEvent[] CMapEditorPlugin.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "CMap CMapEditorPlugin.Map",
            "contents": "Map"
        },
        {
            "trigger": "Text CMapEditorPlugin.MapName",
            "contents": "MapName"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.IsEditorReadyForRequest",
            "contents": "IsEditorReadyForRequest"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.HoldLoadingScreen",
            "contents": "HoldLoadingScreen"
        },
        {
            "trigger": "ShadowsQuality CMapEditorPlugin.CurrentShadowsQuality",
            "contents": "CurrentShadowsQuality"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.IsUltraShadowsQualityAvailable",
            "contents": "IsUltraShadowsQualityAvailable"
        },
        {
            "trigger": "PlaceMode CMapEditorPlugin.PlaceMode",
            "contents": "PlaceMode"
        },
        {
            "trigger": "EditMode CMapEditorPlugin.EditMode",
            "contents": "EditMode"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.UndergroundMode",
            "contents": "UndergroundMode"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.BlockStockMode",
            "contents": "BlockStockMode"
        },
        {
            "trigger": "Int3 CMapEditorPlugin.CursorCoord",
            "contents": "CursorCoord"
        },
        {
            "trigger": "CardinalDirections CMapEditorPlugin.CursorDir",
            "contents": "CursorDir"
        },
        {
            "trigger": "CBlockModel CMapEditorPlugin.CursorBlockModel",
            "contents": "CursorBlockModel"
        },
        {
            "trigger": "CBlockModel CMapEditorPlugin.CursorTerrainBlockModel",
            "contents": "CursorTerrainBlockModel"
        },
        {
            "trigger": "CMacroblockModel CMapEditorPlugin.CursorMacroblockModel",
            "contents": "CursorMacroblockModel"
        },
        {
            "trigger": "Real CMapEditorPlugin.CameraVAngle",
            "contents": "CameraVAngle"
        },
        {
            "trigger": "Real CMapEditorPlugin.CameraHAngle",
            "contents": "CameraHAngle"
        },
        {
            "trigger": "Real CMapEditorPlugin.CameraToTargetDistance",
            "contents": "CameraToTargetDistance"
        },
        {
            "trigger": "Vec3 CMapEditorPlugin.CameraTargetPosition",
            "contents": "CameraTargetPosition"
        },
        {
            "trigger": "Vec3 CMapEditorPlugin.CameraPosition",
            "contents": "CameraPosition"
        },
        {
            "trigger": "Real CMapEditorPlugin.ThumbnailCameraVAngle",
            "contents": "ThumbnailCameraVAngle"
        },
        {
            "trigger": "Real CMapEditorPlugin.ThumbnailCameraHAngle",
            "contents": "ThumbnailCameraHAngle"
        },
        {
            "trigger": "Real CMapEditorPlugin.ThumbnailCameraRoll",
            "contents": "ThumbnailCameraRoll"
        },
        {
            "trigger": "Real CMapEditorPlugin.ThumbnailCameraFovY",
            "contents": "ThumbnailCameraFovY"
        },
        {
            "trigger": "Vec3 CMapEditorPlugin.ThumbnailCameraPosition",
            "contents": "ThumbnailCameraPosition"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EnableAirMapping",
            "contents": "EnableAirMapping"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EnableMixMapping",
            "contents": "EnableMixMapping"
        },
        {
            "trigger": "CItemAnchor[] CMapEditorPlugin.Items",
            "contents": "Items"
        },
        {
            "trigger": "Text[] CMapEditorPlugin.MediatrackIngameClips",
            "contents": "MediatrackIngameClips"
        },
        {
            "trigger": "Text[] CMapEditorPlugin.MediatrackIngameIsScriptClips",
            "contents": "MediatrackIngameIsScriptClips"
        },
        {
            "trigger": "Integer CMapEditorPlugin.MediatrackIngameEditedClipIndex",
            "contents": "MediatrackIngameEditedClipIndex"
        },
        {
            "trigger": "CBlock[] CMapEditorPlugin.Blocks",
            "contents": "Blocks"
        },
        {
            "trigger": "CBlockModel[] CMapEditorPlugin.BlockModels",
            "contents": "BlockModels"
        },
        {
            "trigger": "CBlockModel[] CMapEditorPlugin.TerrainBlockModels",
            "contents": "TerrainBlockModels"
        },
        {
            "trigger": "CMacroblockModel[] CMapEditorPlugin.MacroblockModels",
            "contents": "MacroblockModels"
        },
        {
            "trigger": "CAnchorData[] CMapEditorPlugin.AnchorData",
            "contents": "AnchorData"
        },
        {
            "trigger": "Int3[] CMapEditorPlugin.CustomSelectionCoords",
            "contents": "CustomSelectionCoords"
        },
        {
            "trigger": "Vec3 CMapEditorPlugin.CustomSelectionRGB",
            "contents": "CustomSelectionRGB"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EnableEditorInputsCustomProcessing",
            "contents": "EnableEditorInputsCustomProcessing"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EnableCursorShowingWhenInterfaceIsFocused",
            "contents": "EnableCursorShowingWhenInterfaceIsFocused"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.HideEditorInterface",
            "contents": "HideEditorInterface"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.HideBlockHelpers",
            "contents": "HideBlockHelpers"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.ShowPlacementGrid",
            "contents": "ShowPlacementGrid"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Menu",
            "contents": "EditorInputIsDown_Menu"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_SwitchToRace",
            "contents": "EditorInputIsDown_SwitchToRace"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Undo",
            "contents": "EditorInputIsDown_Undo"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Redo",
            "contents": "EditorInputIsDown_Redo"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorUp",
            "contents": "EditorInputIsDown_CursorUp"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorRight",
            "contents": "EditorInputIsDown_CursorRight"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorDown",
            "contents": "EditorInputIsDown_CursorDown"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorLeft",
            "contents": "EditorInputIsDown_CursorLeft"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorRaise",
            "contents": "EditorInputIsDown_CursorRaise"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorLower",
            "contents": "EditorInputIsDown_CursorLower"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorTurn",
            "contents": "EditorInputIsDown_CursorTurn"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorPick",
            "contents": "EditorInputIsDown_CursorPick"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorPlace",
            "contents": "EditorInputIsDown_CursorPlace"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorDelete",
            "contents": "EditorInputIsDown_CursorDelete"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CameraUp",
            "contents": "EditorInputIsDown_CameraUp"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CameraRight",
            "contents": "EditorInputIsDown_CameraRight"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CameraDown",
            "contents": "EditorInputIsDown_CameraDown"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CameraLeft",
            "contents": "EditorInputIsDown_CameraLeft"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CameraZoomNext",
            "contents": "EditorInputIsDown_CameraZoomNext"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Camera0",
            "contents": "EditorInputIsDown_Camera0"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Camera1",
            "contents": "EditorInputIsDown_Camera1"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Camera3",
            "contents": "EditorInputIsDown_Camera3"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Camera7",
            "contents": "EditorInputIsDown_Camera7"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Camera9",
            "contents": "EditorInputIsDown_Camera9"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_PivotChange",
            "contents": "EditorInputIsDown_PivotChange"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorTurnSlightly",
            "contents": "EditorInputIsDown_CursorTurnSlightly"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_CursorTurnSlightlyAntiClockwise",
            "contents": "EditorInputIsDown_CursorTurnSlightlyAntiClockwise"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_IconUp",
            "contents": "EditorInputIsDown_IconUp"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_IconRight",
            "contents": "EditorInputIsDown_IconRight"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_IconDown",
            "contents": "EditorInputIsDown_IconDown"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_IconLeft",
            "contents": "EditorInputIsDown_IconLeft"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_RemoveAll",
            "contents": "EditorInputIsDown_RemoveAll"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_Save",
            "contents": "EditorInputIsDown_Save"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_SaveAs",
            "contents": "EditorInputIsDown_SaveAs"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_MapStyle",
            "contents": "EditorInputIsDown_MapStyle"
        },
        {
            "trigger": "Boolean CMapEditorPlugin.EditorInputIsDown_ClassicMapEditor",
            "contents": "EditorInputIsDown_ClassicMapEditor"
        },
        {
            "trigger": "Real CMapEditorPlugin.CollectionSquareSize",
            "contents": "CollectionSquareSize"
        },
        {
            "trigger": "Real CMapEditorPlugin.CollectionSquareHeight",
            "contents": "CollectionSquareHeight"
        },
        {
            "trigger": "Integer CMapEditorPlugin.CollectionGroundY",
            "contents": "CollectionGroundY"
        },
        {
            "trigger": "ValidationStatus CMapEditorPlugin.ValidationStatus",
            "contents": "ValidationStatus"
        },
        {
            "trigger": "Text CMapEditorPlugin.ManialinkText",
            "contents": "ManialinkText"
        },
        {
            "trigger": "CMlPage CMapEditorPlugin.ManialinkPage",
            "contents": "ManialinkPage"
        },
        {
            "trigger": "Void ComputeShadows()",
            "contents": "ComputeShadows()"
        },
        {
            "trigger": "Void ComputeShadows(ShadowsQuality ShadowsQuality)",
            "contents": "ComputeShadows(${1:ShadowsQuality ShadowsQuality})"
        },
        {
            "trigger": "Void Undo()",
            "contents": "Undo()"
        },
        {
            "trigger": "Void Redo()",
            "contents": "Redo()"
        },
        {
            "trigger": "Void Help()",
            "contents": "Help()"
        },
        {
            "trigger": "Void Validate()",
            "contents": "Validate()"
        },
        {
            "trigger": "Void AutoSave()",
            "contents": "AutoSave()"
        },
        {
            "trigger": "Void Quit()",
            "contents": "Quit()"
        },
        {
            "trigger": "Void QuickQuit()",
            "contents": "QuickQuit()"
        },
        {
            "trigger": "Void QuitAndSetResult(Text Type, Text[] Data)",
            "contents": "QuitAndSetResult(${1:Text Type}, ${2:Text[] Data})"
        },
        {
            "trigger": "Void QuickQuitAndSetResult(Text Type, Text[] Data)",
            "contents": "QuickQuitAndSetResult(${1:Text Type}, ${2:Text[] Data})"
        },
        {
            "trigger": "Void TestMapFromStart()",
            "contents": "TestMapFromStart()"
        },
        {
            "trigger": "Void TestMapFromCoord(Int3 Coord, CardinalDirections Dir)",
            "contents": "TestMapFromCoord(${1:Int3 Coord}, ${2:CardinalDirections Dir})"
        },
        {
            "trigger": "Void TestMapWithMode(Text RulesModeName)",
            "contents": "TestMapWithMode(${1:Text RulesModeName})"
        },
        {
            "trigger": "Void SaveMap(Text FileName)",
            "contents": "SaveMap(${1:Text FileName})"
        },
        {
            "trigger": "Void SaveMap(Text FileName, Text Path)",
            "contents": "SaveMap(${1:Text FileName}, ${2:Text Path})"
        },
        {
            "trigger": "Boolean GetRaceCamera(Vec3 Position, Real Yaw, Real Pitch, Real Roll, Real FovY)",
            "contents": "GetRaceCamera(${1:Vec3 Position}, ${2:Real Yaw}, ${3:Real Pitch}, ${4:Real Roll}, ${5:Real FovY})"
        },
        {
            "trigger": "Void RemoveAllBlocks()",
            "contents": "RemoveAllBlocks()"
        },
        {
            "trigger": "Void RemoveAllTerrain()",
            "contents": "RemoveAllTerrain()"
        },
        {
            "trigger": "Void RemoveAllOffZone()",
            "contents": "RemoveAllOffZone()"
        },
        {
            "trigger": "Void RemoveAllObjects()",
            "contents": "RemoveAllObjects()"
        },
        {
            "trigger": "Void RemoveAll()",
            "contents": "RemoveAll()"
        },
        {
            "trigger": "Void RemoveAllBlocksAndTerrain()",
            "contents": "RemoveAllBlocksAndTerrain()"
        },
        {
            "trigger": "Void ShowCustomSelection()",
            "contents": "ShowCustomSelection()"
        },
        {
            "trigger": "Void HideCustomSelection()",
            "contents": "HideCustomSelection()"
        },
        {
            "trigger": "Void CopyPaste_Copy()",
            "contents": "CopyPaste_Copy()"
        },
        {
            "trigger": "Void CopyPaste_Cut()",
            "contents": "CopyPaste_Cut()"
        },
        {
            "trigger": "Void CopyPaste_Remove()",
            "contents": "CopyPaste_Remove()"
        },
        {
            "trigger": "Void CopyPaste_SelectAll()",
            "contents": "CopyPaste_SelectAll()"
        },
        {
            "trigger": "Void CopyPaste_ResetSelection()",
            "contents": "CopyPaste_ResetSelection()"
        },
        {
            "trigger": "Void OpenToolsMenu()",
            "contents": "OpenToolsMenu()"
        },
        {
            "trigger": "Void EditMediatrackIngame()",
            "contents": "EditMediatrackIngame()"
        },
        {
            "trigger": "Void PreloadAllBlocks()",
            "contents": "PreloadAllBlocks()"
        },
        {
            "trigger": "Void PreloadAllItems()",
            "contents": "PreloadAllItems()"
        },
        {
            "trigger": "Boolean CanPlaceBlock(CBlockModel BlockModel, Int3 Coord, CardinalDirections Dir, Boolean OnGround, Integer VariantIndex)",
            "contents": "CanPlaceBlock(${1:CBlockModel BlockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir}, ${4:Boolean OnGround}, ${5:Integer VariantIndex})"
        },
        {
            "trigger": "Boolean PlaceBlock(CBlockModel BlockModel, Int3 Coord, CardinalDirections Dir)",
            "contents": "PlaceBlock(${1:CBlockModel BlockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        },
        {
            "trigger": "Boolean CanPlaceBlock_NoDestruction(CBlockModel BlockModel, Int3 Coord, CardinalDirections Dir, Boolean OnGround, Integer VariantIndex)",
            "contents": "CanPlaceBlock_NoDestruction(${1:CBlockModel BlockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir}, ${4:Boolean OnGround}, ${5:Integer VariantIndex})"
        },
        {
            "trigger": "Boolean PlaceBlock_NoDestruction(CBlockModel BlockModel, Int3 Coord, CardinalDirections Dir)",
            "contents": "PlaceBlock_NoDestruction(${1:CBlockModel BlockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        },
        {
            "trigger": "Boolean CanPlaceRoadBlocks(CBlockModel BlockModel, Int3 StartCoord, Int3 EndCoord)",
            "contents": "CanPlaceRoadBlocks(${1:CBlockModel BlockModel}, ${2:Int3 StartCoord}, ${3:Int3 EndCoord})"
        },
        {
            "trigger": "Boolean PlaceRoadBlocks(CBlockModel BlockModel, Int3 StartCoord, Int3 EndCoord)",
            "contents": "PlaceRoadBlocks(${1:CBlockModel BlockModel}, ${2:Int3 StartCoord}, ${3:Int3 EndCoord})"
        },
        {
            "trigger": "Boolean CanPlaceTerrainBlocks(CBlockModel BlockModel, Int3 StartCoord, Int3 EndCoord)",
            "contents": "CanPlaceTerrainBlocks(${1:CBlockModel BlockModel}, ${2:Int3 StartCoord}, ${3:Int3 EndCoord})"
        },
        {
            "trigger": "Boolean PlaceTerrainBlocks(CBlockModel BlockModel, Int3 StartCoord, Int3 EndCoord)",
            "contents": "PlaceTerrainBlocks(${1:CBlockModel BlockModel}, ${2:Int3 StartCoord}, ${3:Int3 EndCoord})"
        },
        {
            "trigger": "Boolean PlaceTerrainBlocks_NoDestruction(CBlockModel BlockModel, Int3 StartCoord, Int3 EndCoord)",
            "contents": "PlaceTerrainBlocks_NoDestruction(${1:CBlockModel BlockModel}, ${2:Int3 StartCoord}, ${3:Int3 EndCoord})"
        },
        {
            "trigger": "Boolean CanPlaceMacroblock(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)",
            "contents": "CanPlaceMacroblock(${1:CMacroblockModel MacroblockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        },
        {
            "trigger": "Boolean PlaceMacroblock(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)",
            "contents": "PlaceMacroblock(${1:CMacroblockModel MacroblockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        },
        {
            "trigger": "Boolean CanPlaceMacroblock_NoDestruction(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)",
            "contents": "CanPlaceMacroblock_NoDestruction(${1:CMacroblockModel MacroblockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        },
        {
            "trigger": "Boolean PlaceMacroblock_NoDestruction(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)",
            "contents": "PlaceMacroblock_NoDestruction(${1:CMacroblockModel MacroblockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        },
        {
            "trigger": "Boolean CanPlaceMacroblock_NoTerrain(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)",
            "contents": "CanPlaceMacroblock_NoTerrain(${1:CMacroblockModel MacroblockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        },
        {
            "trigger": "Boolean PlaceMacroblock_NoTerrain(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)",
            "contents": "PlaceMacroblock_NoTerrain(${1:CMacroblockModel MacroblockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        },
        {
            "trigger": "Boolean RemoveMacroblock(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)",
            "contents": "RemoveMacroblock(${1:CMacroblockModel MacroblockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        },
        {
            "trigger": "Boolean RemoveMacroblock_NoTerrain(CMacroblockModel MacroblockModel, Int3 Coord, CardinalDirections Dir)",
            "contents": "RemoveMacroblock_NoTerrain(${1:CMacroblockModel MacroblockModel}, ${2:Int3 Coord}, ${3:CardinalDirections Dir})"
        },
        {
            "trigger": "CBlock GetBlock(Int3 Coord)",
            "contents": "GetBlock(${1:Int3 Coord})"
        },
        {
            "trigger": "Boolean IsBlockModelSkinnable(CBlockModel BlockModel)",
            "contents": "IsBlockModelSkinnable(${1:CBlockModel BlockModel})"
        },
        {
            "trigger": "Integer GetNbBlockModelSkins(CBlockModel BlockModel)",
            "contents": "GetNbBlockModelSkins(${1:CBlockModel BlockModel})"
        },
        {
            "trigger": "Text GetBlockModelSkin(CBlockModel BlockModel, Integer SkinIndex)",
            "contents": "GetBlockModelSkin(${1:CBlockModel BlockModel}, ${2:Integer SkinIndex})"
        },
        {
            "trigger": "Text GetSkinDisplayName(Text SkinFileName)",
            "contents": "GetSkinDisplayName(${1:Text SkinFileName})"
        },
        {
            "trigger": "Text GetBlockSkin(CBlock Block)",
            "contents": "GetBlockSkin(${1:CBlock Block})"
        },
        {
            "trigger": "Void SetBlockSkin(CBlock Block, Text SkinFileName)",
            "contents": "SetBlockSkin(${1:CBlock Block}, ${2:Text SkinFileName})"
        },
        {
            "trigger": "Boolean OpenBlockSkinDialog(CBlock Block)",
            "contents": "OpenBlockSkinDialog(${1:CBlock Block})"
        },
        {
            "trigger": "Boolean RemoveBlock(Int3 Coord)",
            "contents": "RemoveBlock(${1:Int3 Coord})"
        },
        {
            "trigger": "Boolean RemoveTerrainBlocks(Int3 StartCoord, Int3 EndCoord)",
            "contents": "RemoveTerrainBlocks(${1:Int3 StartCoord}, ${2:Int3 EndCoord})"
        },
        {
            "trigger": "Integer GetBlockGroundHeight(CBlockModel BlockModel, Integer CoordX, Integer CoordZ, CardinalDirections Dir)",
            "contents": "GetBlockGroundHeight(${1:CBlockModel BlockModel}, ${2:Integer CoordX}, ${3:Integer CoordZ}, ${4:CardinalDirections Dir})"
        },
        {
            "trigger": "Integer GetGroundHeight(Integer CoordX, Integer CoordZ)",
            "contents": "GetGroundHeight(${1:Integer CoordX}, ${2:Integer CoordZ})"
        },
        {
            "trigger": "Int3 GetMouseCoordOnGround()",
            "contents": "GetMouseCoordOnGround()"
        },
        {
            "trigger": "Int3 GetMouseCoordAtHeight(Integer CoordY)",
            "contents": "GetMouseCoordAtHeight(${1:Integer CoordY})"
        },
        {
            "trigger": "CBlock GetStartLineBlock()",
            "contents": "GetStartLineBlock()"
        },
        {
            "trigger": "Boolean RemoveItem(CAnchorData Item)",
            "contents": "RemoveItem(${1:CAnchorData Item})"
        },
        {
            "trigger": "Void CopyPaste_AddOrSubSelection(Int3 StartCoord, Int3 EndCoord)",
            "contents": "CopyPaste_AddOrSubSelection(${1:Int3 StartCoord}, ${2:Int3 EndCoord})"
        },
        {
            "trigger": "Boolean CopyPaste_Symmetrize()",
            "contents": "CopyPaste_Symmetrize()"
        },
        {
            "trigger": "Void SaveMacroblock(CMacroblockModel MacroblockModel)",
            "contents": "SaveMacroblock(${1:CMacroblockModel MacroblockModel})"
        },
        {
            "trigger": "CMacroblockModel GetMacroblockModelFromFilePath(Text MacroblockModelFilePath)",
            "contents": "GetMacroblockModelFromFilePath(${1:Text MacroblockModelFilePath})"
        },
        {
            "trigger": "CBlockModel GetTerrainBlockModelFromName(Text TerrainBlockModelName)",
            "contents": "GetTerrainBlockModelFromName(${1:Text TerrainBlockModelName})"
        },
        {
            "trigger": "CBlockModel GetBlockModelFromName(Text BlockModelName)",
            "contents": "GetBlockModelFromName(${1:Text BlockModelName})"
        },
        {
            "trigger": "Text GetMapStyle()",
            "contents": "GetMapStyle()"
        },
        {
            "trigger": "Void SetMapStyle(Text MapStyle)",
            "contents": "SetMapStyle(${1:Text MapStyle})"
        },
        {
            "trigger": "CSmBlockPole",
            "contents": "CSmBlockPole"
        },
        {
            "trigger": "Boolean CSmBlockPole.Captured",
            "contents": "Captured"
        },
        {
            "trigger": "CSmSector CSmBlockPole.Sector",
            "contents": "Sector"
        },
        {
            "trigger": "CSmGauge CSmBlockPole.Gauge",
            "contents": "Gauge"
        },
        {
            "trigger": "CMlScriptEvent",
            "contents": "CMlScriptEvent"
        },
        {
            "trigger": "CMlScriptEvent::Type::KeyPress",
            "contents": "CMlScriptEvent::Type::KeyPress"
        },
        {
            "trigger": "CMlScriptEvent::Type::MouseClick",
            "contents": "CMlScriptEvent::Type::MouseClick"
        },
        {
            "trigger": "CMlScriptEvent::Type::MouseOver",
            "contents": "CMlScriptEvent::Type::MouseOver"
        },
        {
            "trigger": "CMlScriptEvent::Type::MouseOut",
            "contents": "CMlScriptEvent::Type::MouseOut"
        },
        {
            "trigger": "CMlScriptEvent::Type::EntrySubmit",
            "contents": "CMlScriptEvent::Type::EntrySubmit"
        },
        {
            "trigger": "CMlScriptEvent::Type::MenuNavigation",
            "contents": "CMlScriptEvent::Type::MenuNavigation"
        },
        {
            "trigger": "CMlScriptEvent::Type::PluginCustomEvent",
            "contents": "CMlScriptEvent::Type::PluginCustomEvent"
        },
        {
            "trigger": "CMlScriptEvent::EMenuNavAction::Up",
            "contents": "CMlScriptEvent::EMenuNavAction::Up"
        },
        {
            "trigger": "CMlScriptEvent::EMenuNavAction::Right",
            "contents": "CMlScriptEvent::EMenuNavAction::Right"
        },
        {
            "trigger": "CMlScriptEvent::EMenuNavAction::Left",
            "contents": "CMlScriptEvent::EMenuNavAction::Left"
        },
        {
            "trigger": "CMlScriptEvent::EMenuNavAction::Down",
            "contents": "CMlScriptEvent::EMenuNavAction::Down"
        },
        {
            "trigger": "CMlScriptEvent::EMenuNavAction::Select",
            "contents": "CMlScriptEvent::EMenuNavAction::Select"
        },
        {
            "trigger": "CMlScriptEvent::EMenuNavAction::Cancel",
            "contents": "CMlScriptEvent::EMenuNavAction::Cancel"
        },
        {
            "trigger": "CMlScriptEvent::EMenuNavAction::PageUp",
            "contents": "CMlScriptEvent::EMenuNavAction::PageUp"
        },
        {
            "trigger": "CMlScriptEvent::EMenuNavAction::PageDown",
            "contents": "CMlScriptEvent::EMenuNavAction::PageDown"
        },
        {
            "trigger": "CMlScriptEvent::EMenuNavAction::AppMenu",
            "contents": "CMlScriptEvent::EMenuNavAction::AppMenu"
        },
        {
            "trigger": "CMlScriptEvent::EMenuNavAction::Action1",
            "contents": "CMlScriptEvent::EMenuNavAction::Action1"
        },
        {
            "trigger": "CMlScriptEvent::EMenuNavAction::Action2",
            "contents": "CMlScriptEvent::EMenuNavAction::Action2"
        },
        {
            "trigger": "Type CMlScriptEvent.Type",
            "contents": "Type"
        },
        {
            "trigger": "Integer CMlScriptEvent.KeyCode",
            "contents": "KeyCode"
        },
        {
            "trigger": "Text CMlScriptEvent.KeyName",
            "contents": "KeyName"
        },
        {
            "trigger": "Text CMlScriptEvent.CharPressed",
            "contents": "CharPressed"
        },
        {
            "trigger": "Text CMlScriptEvent.ControlId",
            "contents": "ControlId"
        },
        {
            "trigger": "CMlControl CMlScriptEvent.Control",
            "contents": "Control"
        },
        {
            "trigger": "EMenuNavAction CMlScriptEvent.MenuNavAction",
            "contents": "MenuNavAction"
        },
        {
            "trigger": "Boolean CMlScriptEvent.IsActionAutoRepeat",
            "contents": "IsActionAutoRepeat"
        },
        {
            "trigger": "Text CMlScriptEvent.CustomEventType",
            "contents": "CustomEventType"
        },
        {
            "trigger": "Text[] CMlScriptEvent.CustomEventData",
            "contents": "CustomEventData"
        },
        {
            "trigger": "CPackCreatorPack",
            "contents": "CPackCreatorPack"
        },
        {
            "trigger": "Ident CPackCreatorPack.PackId",
            "contents": "PackId"
        },
        {
            "trigger": "Ident CPackCreatorPack.CreatorId",
            "contents": "CreatorId"
        },
        {
            "trigger": "Boolean CPackCreatorPack.IsTitlePack",
            "contents": "IsTitlePack"
        },
        {
            "trigger": "CPackCreatorRecipient[] CPackCreatorPack.Recipients",
            "contents": "Recipients"
        },
        {
            "trigger": "Void Recipients_Add(Text Login, Integer UseCost, Integer GetCost)",
            "contents": "Recipients_Add(${1:Text Login}, ${2:Integer UseCost}, ${3:Integer GetCost})"
        },
        {
            "trigger": "Void Recipients_Remove(Text Login)",
            "contents": "Recipients_Remove(${1:Text Login})"
        },
        {
            "trigger": "CTaskResult_ReplayList",
            "contents": "CTaskResult_ReplayList"
        },
        {
            "trigger": "Text CTaskResult_ReplayList.ParentPath",
            "contents": "ParentPath"
        },
        {
            "trigger": "Text CTaskResult_ReplayList.Path",
            "contents": "Path"
        },
        {
            "trigger": "CReplayInfo[] CTaskResult_ReplayList.ReplayInfos",
            "contents": "ReplayInfos"
        },
        {
            "trigger": "Text[] CTaskResult_ReplayList.SubFolders",
            "contents": "SubFolders"
        },
        {
            "trigger": "CManiaApp",
            "contents": "CManiaApp"
        },
        {
            "trigger": "CManiaApp::ELinkType::ExternalBrowser",
            "contents": "CManiaApp::ELinkType::ExternalBrowser"
        },
        {
            "trigger": "CManiaApp::ELinkType::ManialinkBrowser",
            "contents": "CManiaApp::ELinkType::ManialinkBrowser"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::Linear",
            "contents": "CManiaApp::EAnimManagerEasing::Linear"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::QuadIn",
            "contents": "CManiaApp::EAnimManagerEasing::QuadIn"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::QuadOut",
            "contents": "CManiaApp::EAnimManagerEasing::QuadOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::QuadInOut",
            "contents": "CManiaApp::EAnimManagerEasing::QuadInOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::CubicIn",
            "contents": "CManiaApp::EAnimManagerEasing::CubicIn"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::CubicOut",
            "contents": "CManiaApp::EAnimManagerEasing::CubicOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::CubicInOut",
            "contents": "CManiaApp::EAnimManagerEasing::CubicInOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::QuartIn",
            "contents": "CManiaApp::EAnimManagerEasing::QuartIn"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::QuartOut",
            "contents": "CManiaApp::EAnimManagerEasing::QuartOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::QuartInOut",
            "contents": "CManiaApp::EAnimManagerEasing::QuartInOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::QuintIn",
            "contents": "CManiaApp::EAnimManagerEasing::QuintIn"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::QuintOut",
            "contents": "CManiaApp::EAnimManagerEasing::QuintOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::QuintInOut",
            "contents": "CManiaApp::EAnimManagerEasing::QuintInOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::SineIn",
            "contents": "CManiaApp::EAnimManagerEasing::SineIn"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::SineOut",
            "contents": "CManiaApp::EAnimManagerEasing::SineOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::SineInOut",
            "contents": "CManiaApp::EAnimManagerEasing::SineInOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::ExpIn",
            "contents": "CManiaApp::EAnimManagerEasing::ExpIn"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::ExpOut",
            "contents": "CManiaApp::EAnimManagerEasing::ExpOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::ExpInOut",
            "contents": "CManiaApp::EAnimManagerEasing::ExpInOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::CircIn",
            "contents": "CManiaApp::EAnimManagerEasing::CircIn"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::CircOut",
            "contents": "CManiaApp::EAnimManagerEasing::CircOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::CircInOut",
            "contents": "CManiaApp::EAnimManagerEasing::CircInOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::BackIn",
            "contents": "CManiaApp::EAnimManagerEasing::BackIn"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::BackOut",
            "contents": "CManiaApp::EAnimManagerEasing::BackOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::BackInOut",
            "contents": "CManiaApp::EAnimManagerEasing::BackInOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::ElasticIn",
            "contents": "CManiaApp::EAnimManagerEasing::ElasticIn"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::ElasticOut",
            "contents": "CManiaApp::EAnimManagerEasing::ElasticOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::ElasticInOut",
            "contents": "CManiaApp::EAnimManagerEasing::ElasticInOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::ElasticIn2",
            "contents": "CManiaApp::EAnimManagerEasing::ElasticIn2"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::ElasticOut2",
            "contents": "CManiaApp::EAnimManagerEasing::ElasticOut2"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::ElasticInOut2",
            "contents": "CManiaApp::EAnimManagerEasing::ElasticInOut2"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::BounceIn",
            "contents": "CManiaApp::EAnimManagerEasing::BounceIn"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::BounceOut",
            "contents": "CManiaApp::EAnimManagerEasing::BounceOut"
        },
        {
            "trigger": "CManiaApp::EAnimManagerEasing::BounceInOut",
            "contents": "CManiaApp::EAnimManagerEasing::BounceInOut"
        },
        {
            "trigger": "CManiaApp::ESystemPlatform::None",
            "contents": "CManiaApp::ESystemPlatform::None"
        },
        {
            "trigger": "CManiaApp::ESystemPlatform::Steam",
            "contents": "CManiaApp::ESystemPlatform::Steam"
        },
        {
            "trigger": "CManiaApp::ESystemPlatform::UPlay",
            "contents": "CManiaApp::ESystemPlatform::UPlay"
        },
        {
            "trigger": "CManiaApp::ESystemPlatform::PS4",
            "contents": "CManiaApp::ESystemPlatform::PS4"
        },
        {
            "trigger": "CManiaApp::ESystemPlatform::XBoxOne",
            "contents": "CManiaApp::ESystemPlatform::XBoxOne"
        },
        {
            "trigger": "CManiaApp::ESystemSkuIdentifier::Unknown",
            "contents": "CManiaApp::ESystemSkuIdentifier::Unknown"
        },
        {
            "trigger": "CManiaApp::ESystemSkuIdentifier::EU",
            "contents": "CManiaApp::ESystemSkuIdentifier::EU"
        },
        {
            "trigger": "CManiaApp::ESystemSkuIdentifier::US",
            "contents": "CManiaApp::ESystemSkuIdentifier::US"
        },
        {
            "trigger": "CManiaApp::ESystemSkuIdentifier::JP",
            "contents": "CManiaApp::ESystemSkuIdentifier::JP"
        },
        {
            "trigger": "Text CManiaApp.ManiaAppUrl",
            "contents": "ManiaAppUrl"
        },
        {
            "trigger": "Text CManiaApp.ManiaAppBaseUrl",
            "contents": "ManiaAppBaseUrl"
        },
        {
            "trigger": "Integer CManiaApp.Now",
            "contents": "Now"
        },
        {
            "trigger": "Boolean CManiaApp.IsVisible",
            "contents": "IsVisible"
        },
        {
            "trigger": "Integer CManiaApp.CurrentDate",
            "contents": "CurrentDate"
        },
        {
            "trigger": "Text CManiaApp.CurrentLocalDateText",
            "contents": "CurrentLocalDateText"
        },
        {
            "trigger": "Text CManiaApp.CurrentTimezone",
            "contents": "CurrentTimezone"
        },
        {
            "trigger": "Integer CManiaApp.LayersDefaultManialinkVersion",
            "contents": "LayersDefaultManialinkVersion"
        },
        {
            "trigger": "CUser CManiaApp.LocalUser",
            "contents": "LocalUser"
        },
        {
            "trigger": "CTitle CManiaApp.LoadedTitle",
            "contents": "LoadedTitle"
        },
        {
            "trigger": "ESystemPlatform CManiaApp.SystemPlatform",
            "contents": "SystemPlatform"
        },
        {
            "trigger": "ESystemSkuIdentifier CManiaApp.SystemSkuIdentifier",
            "contents": "SystemSkuIdentifier"
        },
        {
            "trigger": "Boolean CManiaApp.EnableMenuNavigationInputs",
            "contents": "EnableMenuNavigationInputs"
        },
        {
            "trigger": "CUILayer[] CManiaApp.UILayers",
            "contents": "UILayers"
        },
        {
            "trigger": "CXmlManager CManiaApp.Xml",
            "contents": "Xml"
        },
        {
            "trigger": "CHttpManager CManiaApp.Http",
            "contents": "Http"
        },
        {
            "trigger": "CVideoManager CManiaApp.Video",
            "contents": "Video"
        },
        {
            "trigger": "CAudioManager CManiaApp.Audio",
            "contents": "Audio"
        },
        {
            "trigger": "CInputManager CManiaApp.Input",
            "contents": "Input"
        },
        {
            "trigger": "CDataFileMgr CManiaApp.DataFileMgr",
            "contents": "DataFileMgr"
        },
        {
            "trigger": "CScoreMgr CManiaApp.ScoreMgr",
            "contents": "ScoreMgr"
        },
        {
            "trigger": "CPrivilegeMgr CManiaApp.PrivilegeMgr",
            "contents": "PrivilegeMgr"
        },
        {
            "trigger": "CPresenceMgr CManiaApp.PresenceMgr",
            "contents": "PresenceMgr"
        },
        {
            "trigger": "CUserV2Manager CManiaApp.UserMgr",
            "contents": "UserMgr"
        },
        {
            "trigger": "CUILayer UILayerCreate()",
            "contents": "UILayerCreate()"
        },
        {
            "trigger": "Void UILayerDestroy(CUILayer Layer)",
            "contents": "UILayerDestroy(${1:CUILayer Layer})"
        },
        {
            "trigger": "Void UILayerDestroyAll()",
            "contents": "UILayerDestroyAll()"
        },
        {
            "trigger": "Void LayerCustomEvent(CUILayer Layer, Text Type, Text[] Data)",
            "contents": "LayerCustomEvent(${1:CUILayer Layer}, ${2:Text Type}, ${3:Text[] Data})"
        },
        {
            "trigger": "Void OpenLink(Text Url, ELinkType LinkType)",
            "contents": "OpenLink(${1:Text Url}, ${2:ELinkType LinkType})"
        },
        {
            "trigger": "Void OpenFileInExplorer(Text FileName)",
            "contents": "OpenFileInExplorer(${1:Text FileName})"
        },
        {
            "trigger": "Void Dialog_Message(Text Message)",
            "contents": "Dialog_Message(${1:Text Message})"
        },
        {
            "trigger": "Text Dbg_DumpDeclareForVariables(CNod Nod, Boolean StatsOnly)",
            "contents": "Dbg_DumpDeclareForVariables(${1:CNod Nod}, ${2:Boolean StatsOnly})"
        },
        {
            "trigger": "CScoreMgr",
            "contents": "CScoreMgr"
        },
        {
            "trigger": "CScoreMgr::ELocalScoreStatus::None",
            "contents": "CScoreMgr::ELocalScoreStatus::None"
        },
        {
            "trigger": "CScoreMgr::ELocalScoreStatus::Loading",
            "contents": "CScoreMgr::ELocalScoreStatus::Loading"
        },
        {
            "trigger": "CScoreMgr::ELocalScoreStatus::NotLoaded",
            "contents": "CScoreMgr::ELocalScoreStatus::NotLoaded"
        },
        {
            "trigger": "CScoreMgr::ELocalScoreStatus::Loaded",
            "contents": "CScoreMgr::ELocalScoreStatus::Loaded"
        },
        {
            "trigger": "CScoreMgr::EMasterServerScoreStatus::None",
            "contents": "CScoreMgr::EMasterServerScoreStatus::None"
        },
        {
            "trigger": "CScoreMgr::EMasterServerScoreStatus::Synchronizing",
            "contents": "CScoreMgr::EMasterServerScoreStatus::Synchronizing"
        },
        {
            "trigger": "CScoreMgr::EMasterServerScoreStatus::NotSynchronized",
            "contents": "CScoreMgr::EMasterServerScoreStatus::NotSynchronized"
        },
        {
            "trigger": "CScoreMgr::EMasterServerScoreStatus::Synchronized",
            "contents": "CScoreMgr::EMasterServerScoreStatus::Synchronized"
        },
        {
            "trigger": "CTaskResult[] CScoreMgr.TaskResults",
            "contents": "TaskResults"
        },
        {
            "trigger": "Void TaskResult_Release(Ident TaskId)",
            "contents": "TaskResult_Release(${1:Ident TaskId})"
        },
        {
            "trigger": "ELocalScoreStatus ScoreStatus_GetLocalStatus(Ident UserId)",
            "contents": "ScoreStatus_GetLocalStatus(${1:Ident UserId})"
        },
        {
            "trigger": "EMasterServerScoreStatus ScoreStatus_GetMasterServerStatus(Ident UserId)",
            "contents": "ScoreStatus_GetMasterServerStatus(${1:Ident UserId})"
        },
        {
            "trigger": "CGhost Playground_GetPlayerGhost(CPlayer GamePlayer)",
            "contents": "Playground_GetPlayerGhost(${1:CPlayer GamePlayer})"
        },
        {
            "trigger": "CTaskResult Map_SetNewRecord(Ident UserId, Text MapUid, Text Context, CGhost Ghost)",
            "contents": "Map_SetNewRecord(${1:Ident UserId}, ${2:Text MapUid}, ${3:Text Context}, ${4:CGhost Ghost})"
        },
        {
            "trigger": "Integer Map_GetRecord(Ident UserId, Text MapUid, Text Context)",
            "contents": "Map_GetRecord(${1:Ident UserId}, ${2:Text MapUid}, ${3:Text Context})"
        },
        {
            "trigger": "CTaskResult_Ghost Map_GetRecordGhost(Ident UserId, Text MapUid, Text Context)",
            "contents": "Map_GetRecordGhost(${1:Ident UserId}, ${2:Text MapUid}, ${3:Text Context})"
        },
        {
            "trigger": "Integer Map_GetMultiAsyncLevel(Ident UserId, Text MapUid, Text Context)",
            "contents": "Map_GetMultiAsyncLevel(${1:Ident UserId}, ${2:Text MapUid}, ${3:Text Context})"
        },
        {
            "trigger": "Integer Map_GetMultiAsyncLevelRecord(Text MapUid, Text Context, Integer MultiAsyncLevel)",
            "contents": "Map_GetMultiAsyncLevelRecord(${1:Text MapUid}, ${2:Text Context}, ${3:Integer MultiAsyncLevel})"
        },
        {
            "trigger": "CTaskResult_Ghost Map_GetMultiAsyncLevelRecordGhost(Text MapUid, Text Context, Integer MultiAsyncLevel)",
            "contents": "Map_GetMultiAsyncLevelRecordGhost(${1:Text MapUid}, ${2:Text Context}, ${3:Integer MultiAsyncLevel})"
        },
        {
            "trigger": "Integer Map_GetSkillPoints(Ident UserId, Text MapUid, Text Context)",
            "contents": "Map_GetSkillPoints(${1:Ident UserId}, ${2:Text MapUid}, ${3:Text Context})"
        },
        {
            "trigger": "Integer MapLeaderBoard_GetPlayerRanking(Ident UserId, Text MapUid, Text Context, Text Zone)",
            "contents": "MapLeaderBoard_GetPlayerRanking(${1:Ident UserId}, ${2:Text MapUid}, ${3:Text Context}, ${4:Text Zone})"
        },
        {
            "trigger": "Integer MapLeaderBoard_GetPlayerCount(Text MapUid, Text Context, Text Zone)",
            "contents": "MapLeaderBoard_GetPlayerCount(${1:Text MapUid}, ${2:Text Context}, ${3:Text Zone})"
        },
        {
            "trigger": "Integer Campaign_GetMultiAsyncLevel(Ident UserId, Text CampaignId)",
            "contents": "Campaign_GetMultiAsyncLevel(${1:Ident UserId}, ${2:Text CampaignId})"
        },
        {
            "trigger": "Integer Campaign_GetMultiAsyncLevelCount(Ident UserId, Text CampaignId, Integer MultiAsyncLevel)",
            "contents": "Campaign_GetMultiAsyncLevelCount(${1:Ident UserId}, ${2:Text CampaignId}, ${3:Integer MultiAsyncLevel})"
        },
        {
            "trigger": "Integer Campaign_GetSkillPoints(Ident UserId, Text CampaignId)",
            "contents": "Campaign_GetSkillPoints(${1:Ident UserId}, ${2:Text CampaignId})"
        },
        {
            "trigger": "CTaskResult_BuddiesChallengeRecord Campaign_GetBuddiesMapRecord(Ident UserId, Text CampaignId, Text MapUid)",
            "contents": "Campaign_GetBuddiesMapRecord(${1:Ident UserId}, ${2:Text CampaignId}, ${3:Text MapUid})"
        },
        {
            "trigger": "Boolean Campaign_IsBuddiesMapRecordDirty(Ident UserId, Text CampaignId, Text MapUid)",
            "contents": "Campaign_IsBuddiesMapRecordDirty(${1:Ident UserId}, ${2:Text CampaignId}, ${3:Text MapUid})"
        },
        {
            "trigger": "CTaskResult_BuddiesChallengeRecordsComparison Campaign_GetBuddiesMapRecordsComparison(Ident UserId, Text CampaignId)",
            "contents": "Campaign_GetBuddiesMapRecordsComparison(${1:Ident UserId}, ${2:Text CampaignId})"
        },
        {
            "trigger": "CTaskResult_BuddyChallengeRecordsComparison Campaign_GetBuddyMapRecordsComparison(Ident UserId, Text OpponentLogin, Text CampaignId)",
            "contents": "Campaign_GetBuddyMapRecordsComparison(${1:Ident UserId}, ${2:Text OpponentLogin}, ${3:Text CampaignId})"
        },
        {
            "trigger": "Integer CampaignLeaderBoard_GetPlayerRanking(Ident UserId, Text CampaignId, Text Zone, Boolean UseSkillPoints)",
            "contents": "CampaignLeaderBoard_GetPlayerRanking(${1:Ident UserId}, ${2:Text CampaignId}, ${3:Text Zone}, ${4:Boolean UseSkillPoints})"
        },
        {
            "trigger": "Integer CampaignLeaderBoard_GetPlayerCount(Text CampaignId, Text Zone, Boolean UseSkillPoints)",
            "contents": "CampaignLeaderBoard_GetPlayerCount(${1:Text CampaignId}, ${2:Text Zone}, ${3:Boolean UseSkillPoints})"
        },
        {
            "trigger": "Void Multiplayer_AddToScore(Ident UserId, Real ScoreDiff, Integer Timestamp)",
            "contents": "Multiplayer_AddToScore(${1:Ident UserId}, ${2:Real ScoreDiff}, ${3:Integer Timestamp})"
        },
        {
            "trigger": "Integer MultiplayerLeaderBoard_GetPlayerRanking(Ident UserId, Text Zone)",
            "contents": "MultiplayerLeaderBoard_GetPlayerRanking(${1:Ident UserId}, ${2:Text Zone})"
        },
        {
            "trigger": "Integer MultiplayerLeaderBoard_GetPlayerCount(Text Zone)",
            "contents": "MultiplayerLeaderBoard_GetPlayerCount(${1:Text Zone})"
        },
        {
            "trigger": "Integer GlobalLeaderBoard_GetPlayerRanking(Ident UserId, Text Zone)",
            "contents": "GlobalLeaderBoard_GetPlayerRanking(${1:Ident UserId}, ${2:Text Zone})"
        },
        {
            "trigger": "Integer GlobalLeaderBoard_GetPlayerCount(Text Zone)",
            "contents": "GlobalLeaderBoard_GetPlayerCount(${1:Text Zone})"
        },
        {
            "trigger": "CTaskResult_RealLeaderBoard GlobalLeaderBoard_GetPlayerList(Ident UserId, Text Zone, Integer FromIndex, Integer Count)",
            "contents": "GlobalLeaderBoard_GetPlayerList(${1:Ident UserId}, ${2:Text Zone}, ${3:Integer FromIndex}, ${4:Integer Count})"
        },
        {
            "trigger": "CSmMapLandmark",
            "contents": "CSmMapLandmark"
        },
        {
            "trigger": "Text CSmMapLandmark.Tag",
            "contents": "Tag"
        },
        {
            "trigger": "Integer CSmMapLandmark.Order",
            "contents": "Order"
        },
        {
            "trigger": "Vec3 CSmMapLandmark.Position",
            "contents": "Position"
        },
        {
            "trigger": "CSmMapBase CSmMapLandmark.Base",
            "contents": "Base"
        },
        {
            "trigger": "CSmMapGate CSmMapLandmark.Gate",
            "contents": "Gate"
        },
        {
            "trigger": "CSmMapGauge CSmMapLandmark.Gauge",
            "contents": "Gauge"
        },
        {
            "trigger": "CSmMapSector CSmMapLandmark.Sector",
            "contents": "Sector"
        },
        {
            "trigger": "CSmMapPlayerSpawn CSmMapLandmark.PlayerSpawn",
            "contents": "PlayerSpawn"
        },
        {
            "trigger": "CSmMapBotPath CSmMapLandmark.BotPath",
            "contents": "BotPath"
        },
        {
            "trigger": "CSmMapBotSpawn CSmMapLandmark.BotSpawn",
            "contents": "BotSpawn"
        },
        {
            "trigger": "CSmMapObjectAnchor CSmMapLandmark.ObjectAnchor",
            "contents": "ObjectAnchor"
        },
        {
            "trigger": "CTitleEdition",
            "contents": "CTitleEdition"
        },
        {
            "trigger": "CTitleEdition::EDrive::TitleReadable",
            "contents": "CTitleEdition::EDrive::TitleReadable"
        },
        {
            "trigger": "CTitleEdition::EDrive::Title",
            "contents": "CTitleEdition::EDrive::Title"
        },
        {
            "trigger": "CTitleEdition::EDrive::User",
            "contents": "CTitleEdition::EDrive::User"
        },
        {
            "trigger": "CTitle CTitleEdition.TitleMaker",
            "contents": "TitleMaker"
        },
        {
            "trigger": "CPackCreator CTitleEdition.PackCreator",
            "contents": "PackCreator"
        },
        {
            "trigger": "Text CTitleEdition.EditedTitleId",
            "contents": "EditedTitleId"
        },
        {
            "trigger": "CPackCreatorTitleInfo CTitleEdition.EditedTitleInfo",
            "contents": "EditedTitleInfo"
        },
        {
            "trigger": "Boolean CTitleEdition.Dialog_IsFinished",
            "contents": "Dialog_IsFinished"
        },
        {
            "trigger": "Boolean CTitleEdition.Dialog_Success",
            "contents": "Dialog_Success"
        },
        {
            "trigger": "Boolean CTitleEdition.Dialog_Aborted",
            "contents": "Dialog_Aborted"
        },
        {
            "trigger": "Void File_ImportFromUser(Text FileName)",
            "contents": "File_ImportFromUser(${1:Text FileName})"
        },
        {
            "trigger": "Void File_Move(Text OrigName, Text DestNameOrFolder, Boolean KeepOriginalCopy)",
            "contents": "File_Move(${1:Text OrigName}, ${2:Text DestNameOrFolder}, ${3:Boolean KeepOriginalCopy})"
        },
        {
            "trigger": "Boolean File_Exists(Text FileName, EDrive InDrive)",
            "contents": "File_Exists(${1:Text FileName}, ${2:EDrive InDrive})"
        },
        {
            "trigger": "Void File_Delete(Text Name)",
            "contents": "File_Delete(${1:Text Name})"
        },
        {
            "trigger": "Void File_WriteText(Text FileName, Text Text)",
            "contents": "File_WriteText(${1:Text FileName}, ${2:Text Text})"
        },
        {
            "trigger": "Text File_ReadText(Text FileName)",
            "contents": "File_ReadText(${1:Text FileName})"
        },
        {
            "trigger": "Void Dialog_ImportFiles()",
            "contents": "Dialog_ImportFiles()"
        },
        {
            "trigger": "Void OpenTitleFolderInExplorer()",
            "contents": "OpenTitleFolderInExplorer()"
        },
        {
            "trigger": "Void ReloadTitleDesc()",
            "contents": "ReloadTitleDesc()"
        },
        {
            "trigger": "Void SaveTitleDesc()",
            "contents": "SaveTitleDesc()"
        },
        {
            "trigger": "Void SetTitleCampaign(Integer CampaignNum, Text ScoreContext, Text MapsFolderNameOrPlayListName, Boolean OfficialRecordEnabled)",
            "contents": "SetTitleCampaign(${1:Integer CampaignNum}, ${2:Text ScoreContext}, ${3:Text MapsFolderNameOrPlayListName}, ${4:Boolean OfficialRecordEnabled})"
        },
        {
            "trigger": "CSmBase",
            "contents": "CSmBase"
        },
        {
            "trigger": "Integer CSmBase.Clan",
            "contents": "Clan"
        },
        {
            "trigger": "Boolean CSmBase.IsActive",
            "contents": "IsActive"
        },
        {
            "trigger": "Integer CSmBase.NumberOfCollectors",
            "contents": "NumberOfCollectors"
        },
        {
            "trigger": "CReplayInfo",
            "contents": "CReplayInfo"
        },
        {
            "trigger": "Text CReplayInfo.MapUid",
            "contents": "MapUid"
        },
        {
            "trigger": "Text CReplayInfo.Name",
            "contents": "Name"
        },
        {
            "trigger": "Text CReplayInfo.Path",
            "contents": "Path"
        },
        {
            "trigger": "Text CReplayInfo.FileName",
            "contents": "FileName"
        },
        {
            "trigger": "CTeam",
            "contents": "CTeam"
        },
        {
            "trigger": "Text CTeam.Name",
            "contents": "Name"
        },
        {
            "trigger": "Text CTeam.ZonePath",
            "contents": "ZonePath"
        },
        {
            "trigger": "Text CTeam.City",
            "contents": "City"
        },
        {
            "trigger": "Text CTeam.EmblemUrl",
            "contents": "EmblemUrl"
        },
        {
            "trigger": "Text CTeam.PresentationManialinkUrl",
            "contents": "PresentationManialinkUrl"
        },
        {
            "trigger": "Text CTeam.ClubLinkUrl",
            "contents": "ClubLinkUrl"
        },
        {
            "trigger": "Vec3 CTeam.ColorPrimary",
            "contents": "ColorPrimary"
        },
        {
            "trigger": "Vec3 CTeam.ColorSecondary",
            "contents": "ColorSecondary"
        },
        {
            "trigger": "Text CTeam.ColorText",
            "contents": "ColorText"
        },
        {
            "trigger": "Text CTeam.ColorizedName",
            "contents": "ColorizedName"
        },
        {
            "trigger": "CTmMlPlayer",
            "contents": "CTmMlPlayer"
        },
        {
            "trigger": "CTmMlPlayer::ERaceState::BeforeStart",
            "contents": "CTmMlPlayer::ERaceState::BeforeStart"
        },
        {
            "trigger": "CTmMlPlayer::ERaceState::Running",
            "contents": "CTmMlPlayer::ERaceState::Running"
        },
        {
            "trigger": "CTmMlPlayer::ERaceState::Finished",
            "contents": "CTmMlPlayer::ERaceState::Finished"
        },
        {
            "trigger": "CTmMlPlayer::ERaceState::Eliminated",
            "contents": "CTmMlPlayer::ERaceState::Eliminated"
        },
        {
            "trigger": "CTmMlPlayer::ETmRacePlayerCoopMode::None",
            "contents": "CTmMlPlayer::ETmRacePlayerCoopMode::None"
        },
        {
            "trigger": "CTmMlPlayer::ETmRacePlayerCoopMode::Symbiosys",
            "contents": "CTmMlPlayer::ETmRacePlayerCoopMode::Symbiosys"
        },
        {
            "trigger": "CTmMlPlayer::ETmRacePlayerCoopMode::Checkpoint",
            "contents": "CTmMlPlayer::ETmRacePlayerCoopMode::Checkpoint"
        },
        {
            "trigger": "CTmMlPlayer::ETmJumpMode::Disabled",
            "contents": "CTmMlPlayer::ETmJumpMode::Disabled"
        },
        {
            "trigger": "CTmMlPlayer::ETmJumpMode::Simple",
            "contents": "CTmMlPlayer::ETmJumpMode::Simple"
        },
        {
            "trigger": "CTmMlPlayer::ETmJumpMode::Double",
            "contents": "CTmMlPlayer::ETmJumpMode::Double"
        },
        {
            "trigger": "CTmMlPlayer::ETmJumpMode::Infinite",
            "contents": "CTmMlPlayer::ETmJumpMode::Infinite"
        },
        {
            "trigger": "CTmMlPlayer::ETmBonusModeEventType::None",
            "contents": "CTmMlPlayer::ETmBonusModeEventType::None"
        },
        {
            "trigger": "CTmMlPlayer::ETmBonusModeEventType::Bumps",
            "contents": "CTmMlPlayer::ETmBonusModeEventType::Bumps"
        },
        {
            "trigger": "CTmMlPlayer::ETmBonusModeEventType::LowGravity",
            "contents": "CTmMlPlayer::ETmBonusModeEventType::LowGravity"
        },
        {
            "trigger": "CTmMlPlayer::ETmBonusModeEventType::FreeWheeling",
            "contents": "CTmMlPlayer::ETmBonusModeEventType::FreeWheeling"
        },
        {
            "trigger": "CTmMlPlayer::ETmBonusModeEventType::LockedDirections",
            "contents": "CTmMlPlayer::ETmBonusModeEventType::LockedDirections"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::None",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::None"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::StraightJump",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::StraightJump"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Flip",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Flip"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::BackFlip",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::BackFlip"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Spin",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Spin"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Aerial",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Aerial"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::AlleyOop",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::AlleyOop"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Roll",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Roll"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Corkscrew",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Corkscrew"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::SpinOff",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::SpinOff"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Rodeo",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Rodeo"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::FlipFlap",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::FlipFlap"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Twister",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Twister"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::FreeStyle",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::FreeStyle"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::SpinningMix",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::SpinningMix"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::FlippingChaos",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::FlippingChaos"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::RollingMadness",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::RollingMadness"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckNone",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckNone"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckStraightJump",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckStraightJump"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFlip",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFlip"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckBackFlip",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckBackFlip"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckSpin",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckSpin"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckAerial",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckAerial"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckAlleyOop",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckAlleyOop"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckRoll",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckRoll"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckCorkscrew",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckCorkscrew"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckSpinOff",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckSpinOff"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckRodeo",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckRodeo"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFlipFlap",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFlipFlap"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckTwister",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckTwister"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFreeStyle",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFreeStyle"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckSpinningMix",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckSpinningMix"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFlippingChaos",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckFlippingChaos"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckRollingMadness",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::WreckRollingMadness"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::TimePenalty",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::TimePenalty"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::RespawnPenalty",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::RespawnPenalty"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Grind",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Grind"
        },
        {
            "trigger": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Reset",
            "contents": "CTmMlPlayer::ESceneVehiclePhyStuntFigure::Reset"
        },
        {
            "trigger": "Integer CTmMlPlayer.CurrentClan",
            "contents": "CurrentClan"
        },
        {
            "trigger": "ERaceState CTmMlPlayer.RaceState",
            "contents": "RaceState"
        },
        {
            "trigger": "Boolean CTmMlPlayer.IsSpawned",
            "contents": "IsSpawned"
        },
        {
            "trigger": "CTrackManiaScore CTmMlPlayer.Score",
            "contents": "Score"
        },
        {
            "trigger": "Integer CTmMlPlayer.RaceStartTime",
            "contents": "RaceStartTime"
        },
        {
            "trigger": "Integer CTmMlPlayer.LapStartTime",
            "contents": "LapStartTime"
        },
        {
            "trigger": "CTmResult CTmMlPlayer.CurRace",
            "contents": "CurRace"
        },
        {
            "trigger": "CTmResult CTmMlPlayer.CurLap",
            "contents": "CurLap"
        },
        {
            "trigger": "Integer CTmMlPlayer.CurrentNbLaps",
            "contents": "CurrentNbLaps"
        },
        {
            "trigger": "Integer CTmMlPlayer.CurTriggerIndex",
            "contents": "CurTriggerIndex"
        },
        {
            "trigger": "Integer CTmMlPlayer.CurCheckpointRaceTime",
            "contents": "CurCheckpointRaceTime"
        },
        {
            "trigger": "Integer CTmMlPlayer.CurCheckpointLapTime",
            "contents": "CurCheckpointLapTime"
        },
        {
            "trigger": "Integer CTmMlPlayer.CoopSymbiosysPercentTotal",
            "contents": "CoopSymbiosysPercentTotal"
        },
        {
            "trigger": "Integer CTmMlPlayer.CoopCheckpointCurController",
            "contents": "CoopCheckpointCurController"
        },
        {
            "trigger": "ETmRacePlayerCoopMode CTmMlPlayer.CoopMode",
            "contents": "CoopMode"
        },
        {
            "trigger": "Integer CTmMlPlayer.ControllerCount",
            "contents": "ControllerCount"
        },
        {
            "trigger": "Integer CTmMlPlayer.ControllerId0",
            "contents": "ControllerId0"
        },
        {
            "trigger": "Integer CTmMlPlayer.ControllerId1",
            "contents": "ControllerId1"
        },
        {
            "trigger": "Integer CTmMlPlayer.ControllerId2",
            "contents": "ControllerId2"
        },
        {
            "trigger": "Integer CTmMlPlayer.ControllerId3",
            "contents": "ControllerId3"
        },
        {
            "trigger": "Boolean CTmMlPlayer.ForcedAerialCamera",
            "contents": "ForcedAerialCamera"
        },
        {
            "trigger": "Boolean CTmMlPlayer.ButtonSmashFrenzy",
            "contents": "ButtonSmashFrenzy"
        },
        {
            "trigger": "Boolean CTmMlPlayer.EnableTurboButton",
            "contents": "EnableTurboButton"
        },
        {
            "trigger": "Boolean CTmMlPlayer.MaxiAirControl",
            "contents": "MaxiAirControl"
        },
        {
            "trigger": "Boolean CTmMlPlayer.EnableEmptyCars",
            "contents": "EnableEmptyCars"
        },
        {
            "trigger": "ETmJumpMode CTmMlPlayer.JumpMode",
            "contents": "JumpMode"
        },
        {
            "trigger": "Boolean CTmMlPlayer.TinyCar",
            "contents": "TinyCar"
        },
        {
            "trigger": "Boolean CTmMlPlayer.EnableCatchUpSpeed",
            "contents": "EnableCatchUpSpeed"
        },
        {
            "trigger": "Boolean CTmMlPlayer.EnableStuntMode",
            "contents": "EnableStuntMode"
        },
        {
            "trigger": "Boolean CTmMlPlayer.EnableOnlineMode",
            "contents": "EnableOnlineMode"
        },
        {
            "trigger": "Real CTmMlPlayer.AccelCoef",
            "contents": "AccelCoef"
        },
        {
            "trigger": "Real CTmMlPlayer.ControlCoef",
            "contents": "ControlCoef"
        },
        {
            "trigger": "Real CTmMlPlayer.GravityCoef",
            "contents": "GravityCoef"
        },
        {
            "trigger": "Vec3 CTmMlPlayer.Position",
            "contents": "Position"
        },
        {
            "trigger": "Vec3 CTmMlPlayer.AimDirection",
            "contents": "AimDirection"
        },
        {
            "trigger": "Real CTmMlPlayer.AimYaw",
            "contents": "AimYaw"
        },
        {
            "trigger": "Real CTmMlPlayer.AimPitch",
            "contents": "AimPitch"
        },
        {
            "trigger": "Real CTmMlPlayer.Upwardness",
            "contents": "Upwardness"
        },
        {
            "trigger": "Integer CTmMlPlayer.CurRaceContinuousRank",
            "contents": "CurRaceContinuousRank"
        },
        {
            "trigger": "Real CTmMlPlayer.Distance",
            "contents": "Distance"
        },
        {
            "trigger": "Real CTmMlPlayer.Speed",
            "contents": "Speed"
        },
        {
            "trigger": "Integer CTmMlPlayer.DisplaySpeed",
            "contents": "DisplaySpeed"
        },
        {
            "trigger": "Real CTmMlPlayer.InputSteer",
            "contents": "InputSteer"
        },
        {
            "trigger": "Real CTmMlPlayer.InputGasPedal",
            "contents": "InputGasPedal"
        },
        {
            "trigger": "Boolean CTmMlPlayer.InputIsBraking",
            "contents": "InputIsBraking"
        },
        {
            "trigger": "Real CTmMlPlayer.EngineRpm",
            "contents": "EngineRpm"
        },
        {
            "trigger": "Integer CTmMlPlayer.EngineCurGear",
            "contents": "EngineCurGear"
        },
        {
            "trigger": "Real CTmMlPlayer.EngineTurboRatio",
            "contents": "EngineTurboRatio"
        },
        {
            "trigger": "Integer CTmMlPlayer.WheelsContactCount",
            "contents": "WheelsContactCount"
        },
        {
            "trigger": "Integer CTmMlPlayer.WheelsSkiddingCount",
            "contents": "WheelsSkiddingCount"
        },
        {
            "trigger": "Real CTmMlPlayer.DamageHullRatio",
            "contents": "DamageHullRatio"
        },
        {
            "trigger": "Real CTmMlPlayer.DamageWindowRatio",
            "contents": "DamageWindowRatio"
        },
        {
            "trigger": "Integer CTmMlPlayer.InWaterDuration",
            "contents": "InWaterDuration"
        },
        {
            "trigger": "Integer CTmMlPlayer.FreeWheelingDuration",
            "contents": "FreeWheelingDuration"
        },
        {
            "trigger": "Integer CTmMlPlayer.FlyingDuration",
            "contents": "FlyingDuration"
        },
        {
            "trigger": "Integer CTmMlPlayer.SparklingDuration",
            "contents": "SparklingDuration"
        },
        {
            "trigger": "Integer CTmMlPlayer.LightTrailsDuration",
            "contents": "LightTrailsDuration"
        },
        {
            "trigger": "Integer CTmMlPlayer.SkiddingDuration",
            "contents": "SkiddingDuration"
        },
        {
            "trigger": "Real CTmMlPlayer.SkiddingDistance",
            "contents": "SkiddingDistance"
        },
        {
            "trigger": "Real CTmMlPlayer.FlyingDistance",
            "contents": "FlyingDistance"
        },
        {
            "trigger": "Boolean CTmMlPlayer.BonusModeIsJump",
            "contents": "BonusModeIsJump"
        },
        {
            "trigger": "Boolean CTmMlPlayer.BonusModeIsTurbo",
            "contents": "BonusModeIsTurbo"
        },
        {
            "trigger": "Boolean CTmMlPlayer.BonusModeIsMiniCar",
            "contents": "BonusModeIsMiniCar"
        },
        {
            "trigger": "Boolean CTmMlPlayer.BonusModeIsBigCar",
            "contents": "BonusModeIsBigCar"
        },
        {
            "trigger": "Boolean CTmMlPlayer.BonusModeIsEmptyCars",
            "contents": "BonusModeIsEmptyCars"
        },
        {
            "trigger": "Boolean CTmMlPlayer.BonusModeIsSpeedyCars",
            "contents": "BonusModeIsSpeedyCars"
        },
        {
            "trigger": "Boolean CTmMlPlayer.BonusModeIsGold",
            "contents": "BonusModeIsGold"
        },
        {
            "trigger": "Integer CTmMlPlayer.BonusModeEmptyCarsStock",
            "contents": "BonusModeEmptyCarsStock"
        },
        {
            "trigger": "Integer CTmMlPlayer.BonusModeTurboStock",
            "contents": "BonusModeTurboStock"
        },
        {
            "trigger": "Integer CTmMlPlayer.BonusModeJumpStock",
            "contents": "BonusModeJumpStock"
        },
        {
            "trigger": "Integer CTmMlPlayer.BonusBumpCooldown",
            "contents": "BonusBumpCooldown"
        },
        {
            "trigger": "Boolean CTmMlPlayer.BonusIsPossible",
            "contents": "BonusIsPossible"
        },
        {
            "trigger": "Integer CTmMlPlayer.BonusModeTimeTillEvent",
            "contents": "BonusModeTimeTillEvent"
        },
        {
            "trigger": "Integer CTmMlPlayer.BonusModeTimeTillEndEvent",
            "contents": "BonusModeTimeTillEndEvent"
        },
        {
            "trigger": "Integer CTmMlPlayer.BonusModeTimeTillEventWarning",
            "contents": "BonusModeTimeTillEventWarning"
        },
        {
            "trigger": "ETmBonusModeEventType CTmMlPlayer.BonusModeEventType",
            "contents": "BonusModeEventType"
        },
        {
            "trigger": "Boolean CTmMlPlayer.BonusModeEventIsGold",
            "contents": "BonusModeEventIsGold"
        },
        {
            "trigger": "Integer CTmMlPlayer.StuntLastTime",
            "contents": "StuntLastTime"
        },
        {
            "trigger": "Integer CTmMlPlayer.StuntPoints",
            "contents": "StuntPoints"
        },
        {
            "trigger": "Integer CTmMlPlayer.StuntCombo",
            "contents": "StuntCombo"
        },
        {
            "trigger": "Boolean CTmMlPlayer.StuntPerfectLanding",
            "contents": "StuntPerfectLanding"
        },
        {
            "trigger": "Boolean CTmMlPlayer.StuntMasterLanding",
            "contents": "StuntMasterLanding"
        },
        {
            "trigger": "Boolean CTmMlPlayer.StuntEpicLanding",
            "contents": "StuntEpicLanding"
        },
        {
            "trigger": "ESceneVehiclePhyStuntFigure CTmMlPlayer.StuntLast",
            "contents": "StuntLast"
        },
        {
            "trigger": "Integer CTmMlPlayer.StuntTurboGauge",
            "contents": "StuntTurboGauge"
        },
        {
            "trigger": "Integer CTmMlPlayer.StuntTurboGaugeMax",
            "contents": "StuntTurboGaugeMax"
        },
        {
            "trigger": "Integer CTmMlPlayer.TimeElapsedSinceLastStunt",
            "contents": "TimeElapsedSinceLastStunt"
        },
        {
            "trigger": "Integer CTmMlPlayer.StuntAngle",
            "contents": "StuntAngle"
        },
        {
            "trigger": "Integer CTmMlPlayer.UniqueCameraRespawnCount",
            "contents": "UniqueCameraRespawnCount"
        },
        {
            "trigger": "Integer CTmMlPlayer.UniqueCameraAvailableRespawnLeft",
            "contents": "UniqueCameraAvailableRespawnLeft"
        },
        {
            "trigger": "Integer CTmMlPlayer.TimeLeftForStuntCombo",
            "contents": "TimeLeftForStuntCombo"
        },
        {
            "trigger": "Integer CTmMlPlayer.TimeTillSmashRespawn",
            "contents": "TimeTillSmashRespawn"
        },
        {
            "trigger": "Integer CTmMlPlayer.TimeTillSmashGiveUp",
            "contents": "TimeTillSmashGiveUp"
        },
        {
            "trigger": "Boolean CTmMlPlayer.SmashNeedHelp",
            "contents": "SmashNeedHelp"
        },
        {
            "trigger": "Boolean CTmMlPlayer.StuntStickNeedHelp",
            "contents": "StuntStickNeedHelp"
        },
        {
            "trigger": "Boolean CTmMlPlayer.StuntJumpNeedHelp",
            "contents": "StuntJumpNeedHelp"
        },
        {
            "trigger": "Real CTmMlPlayer.StuntJumpCharge",
            "contents": "StuntJumpCharge"
        },
        {
            "trigger": "Real CTmMlPlayer.StuntMasterCharge",
            "contents": "StuntMasterCharge"
        },
        {
            "trigger": "Real CTmMlPlayer.StuntEpicCharge",
            "contents": "StuntEpicCharge"
        },
        {
            "trigger": "Integer CTmMlPlayer.TimeBeforeDeadlyZone",
            "contents": "TimeBeforeDeadlyZone"
        },
        {
            "trigger": "Boolean CTmMlPlayer.IsDeadlyZoneActive",
            "contents": "IsDeadlyZoneActive"
        },
        {
            "trigger": "Void StuntStateReset()",
            "contents": "StuntStateReset()"
        },
        {
            "trigger": "CNotificationsConsumerNotification",
            "contents": "CNotificationsConsumerNotification"
        },
        {
            "trigger": "CNotificationsConsumerNotification::ENotificationPriority::Memo",
            "contents": "CNotificationsConsumerNotification::ENotificationPriority::Memo"
        },
        {
            "trigger": "CNotificationsConsumerNotification::ENotificationPriority::Notice",
            "contents": "CNotificationsConsumerNotification::ENotificationPriority::Notice"
        },
        {
            "trigger": "CNotificationsConsumerNotification::ENotificationPriority::Alarm",
            "contents": "CNotificationsConsumerNotification::ENotificationPriority::Alarm"
        },
        {
            "trigger": "Text CNotificationsConsumerNotification.Title",
            "contents": "Title"
        },
        {
            "trigger": "Text CNotificationsConsumerNotification.Description",
            "contents": "Description"
        },
        {
            "trigger": "Text CNotificationsConsumerNotification.ImageUrl",
            "contents": "ImageUrl"
        },
        {
            "trigger": "ENotificationPriority CNotificationsConsumerNotification.Priority",
            "contents": "Priority"
        },
        {
            "trigger": "Boolean CNotificationsConsumerNotification.HasBeenRead",
            "contents": "HasBeenRead"
        },
        {
            "trigger": "Boolean CNotificationsConsumerNotification.HasBeenActivated",
            "contents": "HasBeenActivated"
        },
        {
            "trigger": "Void SetRead()",
            "contents": "SetRead()"
        },
        {
            "trigger": "Void SetActivated()",
            "contents": "SetActivated()"
        },
        {
            "trigger": "CXmlRpc",
            "contents": "CXmlRpc"
        },
        {
            "trigger": "CXmlRpcEvent[] CXmlRpc.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "Void SendCallback(Text Param1, Text Param2)",
            "contents": "SendCallback(${1:Text Param1}, ${2:Text Param2})"
        },
        {
            "trigger": "Void SendCallbackArray(Text Type, Text[] Data)",
            "contents": "SendCallbackArray(${1:Text Type}, ${2:Text[] Data})"
        },
        {
            "trigger": "Void SendCallback_BeginRound()",
            "contents": "SendCallback_BeginRound()"
        },
        {
            "trigger": "Void SendCallback_EndRound()",
            "contents": "SendCallback_EndRound()"
        },
        {
            "trigger": "CModuleMenuPageModel",
            "contents": "CModuleMenuPageModel"
        },
        {
            "trigger": "Text CModuleMenuPageModel.ManialinkText",
            "contents": "ManialinkText"
        },
        {
            "trigger": "CEditorAsset",
            "contents": "CEditorAsset"
        },
        {
            "trigger": "CMlGauge",
            "contents": "CMlGauge"
        },
        {
            "trigger": "Text CMlGauge.Style",
            "contents": "Style"
        },
        {
            "trigger": "Real CMlGauge.Ratio",
            "contents": "Ratio"
        },
        {
            "trigger": "Real CMlGauge.GradingRatio",
            "contents": "GradingRatio"
        },
        {
            "trigger": "Integer CMlGauge.Clan",
            "contents": "Clan"
        },
        {
            "trigger": "Vec3 CMlGauge.Color",
            "contents": "Color"
        },
        {
            "trigger": "Boolean CMlGauge.DrawBackground",
            "contents": "DrawBackground"
        },
        {
            "trigger": "Boolean CMlGauge.DrawBlockBackground",
            "contents": "DrawBlockBackground"
        },
        {
            "trigger": "Boolean CMlGauge.CenteredBar",
            "contents": "CenteredBar"
        },
        {
            "trigger": "Void SetRatio(Real NewRatio)",
            "contents": "SetRatio(${1:Real NewRatio})"
        },
        {
            "trigger": "Void SetClan(Integer NewClan)",
            "contents": "SetClan(${1:Integer NewClan})"
        },
        {
            "trigger": "CAnimManager",
            "contents": "CAnimManager"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::Linear",
            "contents": "CAnimManager::EAnimManagerEasing::Linear"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::QuadIn",
            "contents": "CAnimManager::EAnimManagerEasing::QuadIn"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::QuadOut",
            "contents": "CAnimManager::EAnimManagerEasing::QuadOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::QuadInOut",
            "contents": "CAnimManager::EAnimManagerEasing::QuadInOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::CubicIn",
            "contents": "CAnimManager::EAnimManagerEasing::CubicIn"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::CubicOut",
            "contents": "CAnimManager::EAnimManagerEasing::CubicOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::CubicInOut",
            "contents": "CAnimManager::EAnimManagerEasing::CubicInOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::QuartIn",
            "contents": "CAnimManager::EAnimManagerEasing::QuartIn"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::QuartOut",
            "contents": "CAnimManager::EAnimManagerEasing::QuartOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::QuartInOut",
            "contents": "CAnimManager::EAnimManagerEasing::QuartInOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::QuintIn",
            "contents": "CAnimManager::EAnimManagerEasing::QuintIn"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::QuintOut",
            "contents": "CAnimManager::EAnimManagerEasing::QuintOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::QuintInOut",
            "contents": "CAnimManager::EAnimManagerEasing::QuintInOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::SineIn",
            "contents": "CAnimManager::EAnimManagerEasing::SineIn"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::SineOut",
            "contents": "CAnimManager::EAnimManagerEasing::SineOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::SineInOut",
            "contents": "CAnimManager::EAnimManagerEasing::SineInOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::ExpIn",
            "contents": "CAnimManager::EAnimManagerEasing::ExpIn"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::ExpOut",
            "contents": "CAnimManager::EAnimManagerEasing::ExpOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::ExpInOut",
            "contents": "CAnimManager::EAnimManagerEasing::ExpInOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::CircIn",
            "contents": "CAnimManager::EAnimManagerEasing::CircIn"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::CircOut",
            "contents": "CAnimManager::EAnimManagerEasing::CircOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::CircInOut",
            "contents": "CAnimManager::EAnimManagerEasing::CircInOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::BackIn",
            "contents": "CAnimManager::EAnimManagerEasing::BackIn"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::BackOut",
            "contents": "CAnimManager::EAnimManagerEasing::BackOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::BackInOut",
            "contents": "CAnimManager::EAnimManagerEasing::BackInOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::ElasticIn",
            "contents": "CAnimManager::EAnimManagerEasing::ElasticIn"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::ElasticOut",
            "contents": "CAnimManager::EAnimManagerEasing::ElasticOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::ElasticInOut",
            "contents": "CAnimManager::EAnimManagerEasing::ElasticInOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::ElasticIn2",
            "contents": "CAnimManager::EAnimManagerEasing::ElasticIn2"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::ElasticOut2",
            "contents": "CAnimManager::EAnimManagerEasing::ElasticOut2"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::ElasticInOut2",
            "contents": "CAnimManager::EAnimManagerEasing::ElasticInOut2"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::BounceIn",
            "contents": "CAnimManager::EAnimManagerEasing::BounceIn"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::BounceOut",
            "contents": "CAnimManager::EAnimManagerEasing::BounceOut"
        },
        {
            "trigger": "CAnimManager::EAnimManagerEasing::BounceInOut",
            "contents": "CAnimManager::EAnimManagerEasing::BounceInOut"
        },
        {
            "trigger": "Void Add(CMlControl Control, Text XmlTarget, Integer StartTime, Integer Duration, EAnimManagerEasing EasingFunc)",
            "contents": "Add(${1:CMlControl Control}, ${2:Text XmlTarget}, ${3:Integer StartTime}, ${4:Integer Duration}, ${5:EAnimManagerEasing EasingFunc})"
        },
        {
            "trigger": "Void AddChain(CMlControl Control, Text XmlTarget, Integer Duration, EAnimManagerEasing EasingFunc)",
            "contents": "AddChain(${1:CMlControl Control}, ${2:Text XmlTarget}, ${3:Integer Duration}, ${4:EAnimManagerEasing EasingFunc})"
        },
        {
            "trigger": "Void Add(CMlControl Control, Text XmlTarget, Integer Duration, EAnimManagerEasing EasingFunc)",
            "contents": "Add(${1:CMlControl Control}, ${2:Text XmlTarget}, ${3:Integer Duration}, ${4:EAnimManagerEasing EasingFunc})"
        },
        {
            "trigger": "CGhost",
            "contents": "CGhost"
        },
        {
            "trigger": "Ident CGhost.Id",
            "contents": "Id"
        },
        {
            "trigger": "CTmResult CGhost.Result",
            "contents": "Result"
        },
        {
            "trigger": "Text CGhost.Nickname",
            "contents": "Nickname"
        },
        {
            "trigger": "CSmScore",
            "contents": "CSmScore"
        },
        {
            "trigger": "Integer CSmScore.TeamNum",
            "contents": "TeamNum"
        },
        {
            "trigger": "Integer CSmScore.Points",
            "contents": "Points"
        },
        {
            "trigger": "Integer CSmScore.RoundPoints",
            "contents": "RoundPoints"
        },
        {
            "trigger": "Integer CSmScore.NbEliminationsInflicted",
            "contents": "NbEliminationsInflicted"
        },
        {
            "trigger": "Integer CSmScore.NbEliminationsTaken",
            "contents": "NbEliminationsTaken"
        },
        {
            "trigger": "Integer CSmScore.NbRespawnsRequested",
            "contents": "NbRespawnsRequested"
        },
        {
            "trigger": "Integer CSmScore.DamageInflicted",
            "contents": "DamageInflicted"
        },
        {
            "trigger": "Integer CSmScore.DamageTaken",
            "contents": "DamageTaken"
        },
        {
            "trigger": "Void Clear()",
            "contents": "Clear()"
        },
        {
            "trigger": "CEditorEvent",
            "contents": "CEditorEvent"
        },
        {
            "trigger": "CEditorEvent::Type::LayerCustomEvent",
            "contents": "CEditorEvent::Type::LayerCustomEvent"
        },
        {
            "trigger": "CEditorEvent::Type::KeyPress",
            "contents": "CEditorEvent::Type::KeyPress"
        },
        {
            "trigger": "CEditorEvent::Type::MenuNavigation",
            "contents": "CEditorEvent::Type::MenuNavigation"
        },
        {
            "trigger": "CEditorEvent::Type::FileChanged",
            "contents": "CEditorEvent::Type::FileChanged"
        },
        {
            "trigger": "CEditorEvent::Type::OnUndo",
            "contents": "CEditorEvent::Type::OnUndo"
        },
        {
            "trigger": "CEditorEvent::Type::OnRedo",
            "contents": "CEditorEvent::Type::OnRedo"
        },
        {
            "trigger": "Type CEditorEvent.Type",
            "contents": "Type"
        },
        {
            "trigger": "CMlMediaPlayer",
            "contents": "CMlMediaPlayer"
        },
        {
            "trigger": "Boolean CMlMediaPlayer.IsInitPlay",
            "contents": "IsInitPlay"
        },
        {
            "trigger": "Boolean CMlMediaPlayer.Music",
            "contents": "Music"
        },
        {
            "trigger": "Boolean CMlMediaPlayer.IsLooping",
            "contents": "IsLooping"
        },
        {
            "trigger": "Real CMlMediaPlayer.Volume",
            "contents": "Volume"
        },
        {
            "trigger": "Text CMlMediaPlayer.Url",
            "contents": "Url"
        },
        {
            "trigger": "Void Play()",
            "contents": "Play()"
        },
        {
            "trigger": "Void Stop()",
            "contents": "Stop()"
        },
        {
            "trigger": "Void StopAndRewind()",
            "contents": "StopAndRewind()"
        },
        {
            "trigger": "CAchievementsManager",
            "contents": "CAchievementsManager"
        },
        {
            "trigger": "CAchievementsEvent[] CAchievementsManager.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "CAchievementsAchievement[] CAchievementsManager.Achievements",
            "contents": "Achievements"
        },
        {
            "trigger": "CAchievementsStat[] CAchievementsManager.Stats",
            "contents": "Stats"
        },
        {
            "trigger": "CAchievementsAchievementDesc[] CAchievementsManager.AchievementDescriptions",
            "contents": "AchievementDescriptions"
        },
        {
            "trigger": "CAchievementsStatDesc[] CAchievementsManager.StatDescriptions",
            "contents": "StatDescriptions"
        },
        {
            "trigger": "Void SendEvent(Ident UserId, Text Mnemo, Integer[] Params)",
            "contents": "SendEvent(${1:Ident UserId}, ${2:Text Mnemo}, ${3:Integer[] Params})"
        },
        {
            "trigger": "CBlock",
            "contents": "CBlock"
        },
        {
            "trigger": "CBlock::CardinalDirections::North",
            "contents": "CBlock::CardinalDirections::North"
        },
        {
            "trigger": "CBlock::CardinalDirections::East",
            "contents": "CBlock::CardinalDirections::East"
        },
        {
            "trigger": "CBlock::CardinalDirections::South",
            "contents": "CBlock::CardinalDirections::South"
        },
        {
            "trigger": "CBlock::CardinalDirections::West",
            "contents": "CBlock::CardinalDirections::West"
        },
        {
            "trigger": "Integer CBlock.BlockScriptId",
            "contents": "BlockScriptId"
        },
        {
            "trigger": "Boolean CBlock.CanHaveAnchor",
            "contents": "CanHaveAnchor"
        },
        {
            "trigger": "Int3 CBlock.Coord",
            "contents": "Coord"
        },
        {
            "trigger": "CardinalDirections CBlock.Direction",
            "contents": "Direction"
        },
        {
            "trigger": "CBlockUnit[] CBlock.BlockUnits",
            "contents": "BlockUnits"
        },
        {
            "trigger": "CBlockModel CBlock.BlockModel",
            "contents": "BlockModel"
        },
        {
            "trigger": "Void UseDefaultAnchor()",
            "contents": "UseDefaultAnchor()"
        },
        {
            "trigger": "Void UseCustomAnchor()",
            "contents": "UseCustomAnchor()"
        },
        {
            "trigger": "CMlFrame",
            "contents": "CMlFrame"
        },
        {
            "trigger": "CMlFrame::EControlType::Audio",
            "contents": "CMlFrame::EControlType::Audio"
        },
        {
            "trigger": "CMlFrame::EControlType::Entry",
            "contents": "CMlFrame::EControlType::Entry"
        },
        {
            "trigger": "CMlFrame::EControlType::FileEntry",
            "contents": "CMlFrame::EControlType::FileEntry"
        },
        {
            "trigger": "CMlFrame::EControlType::Frame",
            "contents": "CMlFrame::EControlType::Frame"
        },
        {
            "trigger": "CMlFrame::EControlType::Label",
            "contents": "CMlFrame::EControlType::Label"
        },
        {
            "trigger": "CMlFrame::EControlType::Quad",
            "contents": "CMlFrame::EControlType::Quad"
        },
        {
            "trigger": "CMlFrame::EControlType::Video",
            "contents": "CMlFrame::EControlType::Video"
        },
        {
            "trigger": "CMlControl[] CMlFrame.Controls",
            "contents": "Controls"
        },
        {
            "trigger": "Boolean CMlFrame.ClipWindowActive",
            "contents": "ClipWindowActive"
        },
        {
            "trigger": "Vec2 CMlFrame.ClipWindowRelativePosition",
            "contents": "ClipWindowRelativePosition"
        },
        {
            "trigger": "Vec2 CMlFrame.ClipWindowSize",
            "contents": "ClipWindowSize"
        },
        {
            "trigger": "Boolean CMlFrame.DisablePreload",
            "contents": "DisablePreload"
        },
        {
            "trigger": "CMlControl GetFirstChild(Text ControlId)",
            "contents": "GetFirstChild(${1:Text ControlId})"
        },
        {
            "trigger": "CManiaAppBase",
            "contents": "CManiaAppBase"
        },
        {
            "trigger": "CManiaAppEvent[] CManiaAppBase.PendingEvents",
            "contents": "PendingEvents"
        },
        {
            "trigger": "CAchievementsAchievementDesc",
            "contents": "CAchievementsAchievementDesc"
        },
        {
            "trigger": "Text CAchievementsAchievementDesc.TitleId",
            "contents": "TitleId"
        },
        {
            "trigger": "Text CAchievementsAchievementDesc.DisplayName",
            "contents": "DisplayName"
        },
        {
            "trigger": "Text CAchievementsAchievementDesc.Description",
            "contents": "Description"
        },
        {
            "trigger": "Text CAchievementsAchievementDesc.IconUrl",
            "contents": "IconUrl"
        },
        {
            "trigger": "CModulePlaygroundInventory",
            "contents": "CModulePlaygroundInventory"
        },
        {
            "trigger": "Integer AddItem(CPlayer Player, Text Url, Integer Quantity)",
            "contents": "AddItem(${1:CPlayer Player}, ${2:Text Url}, ${3:Integer Quantity})"
        },
        {
            "trigger": "Boolean AddAction(CPlayer Player, Text Url)",
            "contents": "AddAction(${1:CPlayer Player}, ${2:Text Url})"
        },
        {
            "trigger": "Integer RemoveInventoryItem(CPlayer Player, Text Url, Integer Quantity)",
            "contents": "RemoveInventoryItem(${1:CPlayer Player}, ${2:Text Url}, ${3:Integer Quantity})"
        },
        {
            "trigger": "Integer GetInventoryItemQuantity(CPlayer Player, Text Url)",
            "contents": "GetInventoryItemQuantity(${1:CPlayer Player}, ${2:Text Url})"
        },
        {
            "trigger": "Boolean IsInventoryItemStored(CPlayer Player, Text Url)",
            "contents": "IsInventoryItemStored(${1:CPlayer Player}, ${2:Text Url})"
        },
        {
            "trigger": "Text[] GetStoredItemsList(CPlayer Player)",
            "contents": "GetStoredItemsList(${1:CPlayer Player})"
        },
        {
            "trigger": "Text[] GetStoredActionsList(CPlayer Player)",
            "contents": "GetStoredActionsList(${1:CPlayer Player})"
        },
        {
            "trigger": "CPlayer",
            "contents": "CPlayer"
        },
        {
            "trigger": "CUser CPlayer.User",
            "contents": "User"
        },
        {
            "trigger": "Integer CPlayer.RequestedClan",
            "contents": "RequestedClan"
        },
        {
            "trigger": "Boolean CPlayer.RequestsSpectate",
            "contents": "RequestsSpectate"
        },
        {
            "trigger": "CMlStation",
            "contents": "CMlStation"
        },
        {
            "trigger": "CManiaAppStation CMlStation.ParentApp",
            "contents": "ParentApp"
        },
        {
            "trigger": "CStation CMlStation.Station",
            "contents": "Station"
        },
        {
            "trigger": "Void EnterStation()",
            "contents": "EnterStation()"
        },
        {
            "trigger": "CTaskResult_RealLeaderBoard",
            "contents": "CTaskResult_RealLeaderBoard"
        },
        {
            "trigger": "Integer CTaskResult_RealLeaderBoard.FromIndex",
            "contents": "FromIndex"
        },
        {
            "trigger": "Integer CTaskResult_RealLeaderBoard.Count",
            "contents": "Count"
        },
        {
            "trigger": "CRealLeaderBoardInfo[] CTaskResult_RealLeaderBoard.LeaderBoardInfo",
            "contents": "LeaderBoardInfo"
        },
        {
            "trigger": "CModulePlaygroundStore",
            "contents": "CModulePlaygroundStore"
        },
        {
            "trigger": "Void Reset()",
            "contents": "Reset()"
        },
        {
            "trigger": "Void Reset(CPlayer Player)",
            "contents": "Reset(${1:CPlayer Player})"
        },
        {
            "trigger": "Void SetMoney(CPlayer Player, Integer Amount)",
            "contents": "SetMoney(${1:CPlayer Player}, ${2:Integer Amount})"
        },
        {
            "trigger": "Integer GetMoney(CPlayer Player)",
            "contents": "GetMoney(${1:CPlayer Player})"
        },
        {
            "trigger": "Boolean AddMoney(CPlayer Player, Integer Amount)",
            "contents": "AddMoney(${1:CPlayer Player}, ${2:Integer Amount})"
        },
        {
            "trigger": "Boolean SubMoney(CPlayer Player, Integer Amount)",
            "contents": "SubMoney(${1:CPlayer Player}, ${2:Integer Amount})"
        },
        {
            "trigger": "Void SetActionLevel(CPlayer Player, Text ActionUrl, Integer ActionLevel)",
            "contents": "SetActionLevel(${1:CPlayer Player}, ${2:Text ActionUrl}, ${3:Integer ActionLevel})"
        },
        {
            "trigger": "Integer GetActionLevel(CPlayer Player, Text ActionUrl)",
            "contents": "GetActionLevel(${1:CPlayer Player}, ${2:Text ActionUrl})"
        },
        {
            "trigger": "Void SetItemCanBeBought(CPlayer Player, Text ActionUrl, Boolean CanBeBought)",
            "contents": "SetItemCanBeBought(${1:CPlayer Player}, ${2:Text ActionUrl}, ${3:Boolean CanBeBought})"
        },
        {
            "trigger": "Boolean GetItemCanBeBought(CPlayer Player, Text ActionUrl)",
            "contents": "GetItemCanBeBought(${1:CPlayer Player}, ${2:Text ActionUrl})"
        },
        {
            "trigger": "CItemAnchor",
            "contents": "CItemAnchor"
        },
        {
            "trigger": "CItemAnchor::CardinalDirections::North",
            "contents": "CItemAnchor::CardinalDirections::North"
        },
        {
            "trigger": "CItemAnchor::CardinalDirections::East",
            "contents": "CItemAnchor::CardinalDirections::East"
        },
        {
            "trigger": "CItemAnchor::CardinalDirections::South",
            "contents": "CItemAnchor::CardinalDirections::South"
        },
        {
            "trigger": "CItemAnchor::CardinalDirections::West",
            "contents": "CItemAnchor::CardinalDirections::West"
        },
        {
            "trigger": "Vec3 CItemAnchor.Position",
            "contents": "Position"
        },
        {
            "trigger": "CAnchorData",
            "contents": "CAnchorData"
        },
        {
            "trigger": "Text CAnchorData.DefaultTag",
            "contents": "DefaultTag"
        },
        {
            "trigger": "Integer CAnchorData.DefaultOrder",
            "contents": "DefaultOrder"
        },
        {
            "trigger": "Text CAnchorData.Tag",
            "contents": "Tag"
        },
        {
            "trigger": "Integer CAnchorData.Order",
            "contents": "Order"
        },
        {
            "trigger": "CBlock CAnchorData.Block",
            "contents": "Block"
        },
        {
            "trigger": "CItemAnchor CAnchorData.Item",
            "contents": "Item"
        },
        {
            "trigger": "CBlockModelClip",
            "contents": "CBlockModelClip"
        },
        {
            "trigger": "CBlockModelClip::EnumClipType::ClassicClip",
            "contents": "CBlockModelClip::EnumClipType::ClassicClip"
        },
        {
            "trigger": "CBlockModelClip::EnumClipType::FreeClipSide",
            "contents": "CBlockModelClip::EnumClipType::FreeClipSide"
        },
        {
            "trigger": "CBlockModelClip::EnumClipType::FreeClipTop",
            "contents": "CBlockModelClip::EnumClipType::FreeClipTop"
        },
        {
            "trigger": "CBlockModelClip::EnumClipType::FreeClipBottom",
            "contents": "CBlockModelClip::EnumClipType::FreeClipBottom"
        },
        {
            "trigger": "CBlockModelClip::MultiDirEnum::SameDir",
            "contents": "CBlockModelClip::MultiDirEnum::SameDir"
        },
        {
            "trigger": "CBlockModelClip::MultiDirEnum::SymmetricalDirs",
            "contents": "CBlockModelClip::MultiDirEnum::SymmetricalDirs"
        },
        {
            "trigger": "CBlockModelClip::MultiDirEnum::AllDir",
            "contents": "CBlockModelClip::MultiDirEnum::AllDir"
        },
        {
            "trigger": "CBlockModelClip::MultiDirEnum::OpposedDirOnly",
            "contents": "CBlockModelClip::MultiDirEnum::OpposedDirOnly"
        },
        {
            "trigger": "CBlockModelClip::MultiDirEnum::PerpendicularDirsOnly",
            "contents": "CBlockModelClip::MultiDirEnum::PerpendicularDirsOnly"
        },
        {
            "trigger": "CBlockModelClip::MultiDirEnum::NextDirOnly",
            "contents": "CBlockModelClip::MultiDirEnum::NextDirOnly"
        },
        {
            "trigger": "CBlockModelClip::MultiDirEnum::PreviousDirOnly",
            "contents": "CBlockModelClip::MultiDirEnum::PreviousDirOnly"
        },
        {
            "trigger": "CMlControl",
            "contents": "CMlControl"
        },
        {
            "trigger": "CMlControl::AlignHorizontal::Left",
            "contents": "CMlControl::AlignHorizontal::Left"
        },
        {
            "trigger": "CMlControl::AlignHorizontal::HCenter",
            "contents": "CMlControl::AlignHorizontal::HCenter"
        },
        {
            "trigger": "CMlControl::AlignHorizontal::Right",
            "contents": "CMlControl::AlignHorizontal::Right"
        },
        {
            "trigger": "CMlControl::AlignHorizontal::None",
            "contents": "CMlControl::AlignHorizontal::None"
        },
        {
            "trigger": "CMlControl::AlignVertical::Top",
            "contents": "CMlControl::AlignVertical::Top"
        },
        {
            "trigger": "CMlControl::AlignVertical::VCenter",
            "contents": "CMlControl::AlignVertical::VCenter"
        },
        {
            "trigger": "CMlControl::AlignVertical::Bottom",
            "contents": "CMlControl::AlignVertical::Bottom"
        },
        {
            "trigger": "CMlControl::AlignVertical::None",
            "contents": "CMlControl::AlignVertical::None"
        },
        {
            "trigger": "CMlControl::AlignVertical::VCenter2",
            "contents": "CMlControl::AlignVertical::VCenter2"
        },
        {
            "trigger": "CMlFrame CMlControl.Parent",
            "contents": "Parent"
        },
        {
            "trigger": "Text CMlControl.ControlId",
            "contents": "ControlId"
        },
        {
            "trigger": "Text[] CMlControl.ControlClasses",
            "contents": "ControlClasses"
        },
        {
            "trigger": "Vec2 CMlControl.Size",
            "contents": "Size"
        },
        {
            "trigger": "AlignHorizontal CMlControl.HorizontalAlign",
            "contents": "HorizontalAlign"
        },
        {
            "trigger": "AlignVertical CMlControl.VerticalAlign",
            "contents": "VerticalAlign"
        },
        {
            "trigger": "Boolean CMlControl.Visible",
            "contents": "Visible"
        },
        {
            "trigger": "Vec2 CMlControl.RelativePosition_V3",
            "contents": "RelativePosition_V3"
        },
        {
            "trigger": "Real CMlControl.ZIndex",
            "contents": "ZIndex"
        },
        {
            "trigger": "Real CMlControl.RelativeScale",
            "contents": "RelativeScale"
        },
        {
            "trigger": "Real CMlControl.RelativeRotation",
            "contents": "RelativeRotation"
        },
        {
            "trigger": "Vec2 CMlControl.AbsolutePosition_V3",
            "contents": "AbsolutePosition_V3"
        },
        {
            "trigger": "Real CMlControl.AbsoluteScale",
            "contents": "AbsoluteScale"
        },
        {
            "trigger": "Real CMlControl.AbsoluteRotation",
            "contents": "AbsoluteRotation"
        },
        {
            "trigger": "Boolean CMlControl.IsFocused",
            "contents": "IsFocused"
        },
        {
            "trigger": "Boolean HasClass(Text Class)",
            "contents": "HasClass(${1:Text Class})"
        },
        {
            "trigger": "Boolean DataAttributeExists(Text DataName)",
            "contents": "DataAttributeExists(${1:Text DataName})"
        },
        {
            "trigger": "Text DataAttributeGet(Text DataName)",
            "contents": "DataAttributeGet(${1:Text DataName})"
        },
        {
            "trigger": "Void DataAttributeSet(Text DataName, Text DataValue)",
            "contents": "DataAttributeSet(${1:Text DataName}, ${2:Text DataValue})"
        },
        {
            "trigger": "Void Show()",
            "contents": "Show()"
        },
        {
            "trigger": "Void Hide()",
            "contents": "Hide()"
        },
        {
            "trigger": "Void Unload()",
            "contents": "Unload()"
        },
        {
            "trigger": "Void Focus()",
            "contents": "Focus()"
        },
        {
            "trigger": "CTaskResult_GetOnlinePresence",
            "contents": "CTaskResult_GetOnlinePresence"
        },
        {
            "trigger": "COnlinePresence[] CTaskResult_GetOnlinePresence.OnlinePresences",
            "contents": "OnlinePresences"
        },
        {
            "trigger": "Void AddLogin(Text Login)",
            "contents": "AddLogin(${1:Text Login})"
        },
        {
            "trigger": "Void StartTask()",
            "contents": "StartTask()"
        },
        {
            "trigger": "CardinalDirections MapUnits::GetNextDir(CardinalDirections Argument1)",
            "contents": "GetNextDir(${1:CardinalDirections Argument1})"
        },
        {
            "trigger": "CardinalDirections MapUnits::GetPreviousDir(CardinalDirections Argument1)",
            "contents": "GetPreviousDir(${1:CardinalDirections Argument1})"
        },
        {
            "trigger": "CardinalDirections MapUnits::GetOpposedDir(CardinalDirections Argument1)",
            "contents": "GetOpposedDir(${1:CardinalDirections Argument1})"
        },
        {
            "trigger": "CardinalDirections MapUnits::AddDirs(CardinalDirections Argument1, CardinalDirections Argument2)",
            "contents": "AddDirs(${1:CardinalDirections Argument1}, ${2:CardinalDirections Argument2})"
        },
        {
            "trigger": "CardinalDirections MapUnits::SubDirs(CardinalDirections Argument1, CardinalDirections Argument2)",
            "contents": "SubDirs(${1:CardinalDirections Argument1}, ${2:CardinalDirections Argument2})"
        },
        {
            "trigger": "Int3 MapUnits::GetNeighbourCoord(Int3 Argument1, CardinalDirections Argument2)",
            "contents": "GetNeighbourCoord(${1:Int3 Argument1}, ${2:CardinalDirections Argument2})"
        },
        {
            "trigger": "Int3 MapUnits::GetRotatedOffset(Int3 Argument1, CardinalDirections Argument2)",
            "contents": "GetRotatedOffset(${1:Int3 Argument1}, ${2:CardinalDirections Argument2})"
        },
        {
            "trigger": "Int3 MapUnits::GetRotatedOffsetPositive(Int3 Argument1, CardinalDirections Argument2, Int3 Argument3)",
            "contents": "GetRotatedOffsetPositive(${1:Int3 Argument1}, ${2:CardinalDirections Argument2}, ${3:Int3 Argument3})"
        },
        {
            "trigger": "Real TextLib::ToReal(Text _Text)\tReturns the Real corresponding to _Text.",
            "contents": "ToReal(${1:Text _Text})"
        },
        {
            "trigger": "Integer TextLib::ToInteger(Text _Text)\tReturns the Integer corresponding to _Text.",
            "contents": "ToInteger(${1:Text _Text})"
        },
        {
            "trigger": "Vec3 TextLib::ToColor(Text _Text)\tReturns the RGB color corresponding to _Text.",
            "contents": "ToColor(${1:Text _Text})"
        },
        {
            "trigger": "Text TextLib::SubString(Text _Text, Integer _Start, Integer _Length)\tReturns a substring of _Text.",
            "contents": "SubString(${1:Text _Text}, ${2:Integer _Start}, ${3:Integer _Length})"
        },
        {
            "trigger": "Text TextLib::SubText(Text _Text, Integer _Start, Integer _Length)\tReturns a substring of _Text.",
            "contents": "SubText(${1:Text _Text}, ${2:Integer _Start}, ${3:Integer _Length})"
        },
        {
            "trigger": "Integer TextLib::Length(Text _Text)\tReturns the length of _Text.",
            "contents": "Length(${1:Text _Text})"
        },
        {
            "trigger": "Text TextLib::ToText(Integer _Integer)\tReturns the Text corresponding to _Integer.",
            "contents": "ToText(${1:Integer _Integer})"
        },
        {
            "trigger": "Text TextLib::ToText(Real _Real)\tReturns the Text corresponding to _Real.",
            "contents": "ToText(${1:Real _Real})"
        },
        {
            "trigger": "Text TextLib::ToText(Boolean _Boolean)\tReturns the Text corresponding to _Boolean.",
            "contents": "ToText(${1:Boolean _Boolean})"
        },
        {
            "trigger": "Text TextLib::ToText(Int3 _Int3)\tReturns the Text corresponding to _Int3.",
            "contents": "ToText(${1:Int3 _Int3})"
        },
        {
            "trigger": "Text TextLib::ToText(Vec3 _Vec3)\tReturns the Text corresponding to _Vec3.",
            "contents": "ToText(${1:Vec3 _Vec3})"
        },
        {
            "trigger": "Text TextLib::TimeToText(Integer _Time, Boolean _IncludeCentiSeconds)\tReturns the Text corresponding to _Time.",
            "contents": "TimeToText(${1:Integer _Time}, ${2:Boolean _IncludeCentiSeconds})"
        },
        {
            "trigger": "Text TextLib::TimeToText(Integer _Time)\tReturns the Text corresponding to _Time.",
            "contents": "TimeToText(${1:Integer _Time})"
        },
        {
            "trigger": "Text TextLib::ColorToText(Vec3 _Color)\tReturns the Text corresponding to _Color.",
            "contents": "ColorToText(${1:Vec3 _Color})"
        },
        {
            "trigger": "Text TextLib::FormatInteger(Integer Argument1, Integer Argument2)",
            "contents": "FormatInteger(${1:Integer Argument1}, ${2:Integer Argument2})"
        },
        {
            "trigger": "Text TextLib::FormatReal(Real _Value, Integer _FPartLength, Boolean _HideZeroes, Boolean _HideDot)\tReturns the Text corresponding to a Real. With formatting.",
            "contents": "FormatReal(${1:Real _Value}, ${2:Integer _FPartLength}, ${3:Boolean _HideZeroes}, ${4:Boolean _HideDot})"
        },
        {
            "trigger": "Text TextLib::ToUpperCase(Text _TextToChange)\tChanges lower case characters to upper case characters.",
            "contents": "ToUpperCase(${1:Text _TextToChange})"
        },
        {
            "trigger": "Text TextLib::ToLowerCase(Text _TextToChange)\tChanges upper case characters to lower case characters.",
            "contents": "ToLowerCase(${1:Text _TextToChange})"
        },
        {
            "trigger": "Text TextLib::CloseStyleTags(Text _String)\tReturn a string where the previously unclosed $< tags have their $> counterpart.",
            "contents": "CloseStyleTags(${1:Text _String})"
        },
        {
            "trigger": "Boolean TextLib::CompareWithoutFormat(Text _Text1, Text _Text2, Boolean _IsCaseSensitive)\tCompares texts without taking format characters in account.",
            "contents": "CompareWithoutFormat(${1:Text _Text1}, ${2:Text _Text2}, ${3:Boolean _IsCaseSensitive})"
        },
        {
            "trigger": "Boolean TextLib::Find(Text _TextToFind, Text _TextToSearchIn, Boolean _IsFormatSensitive, Boolean _IsCaseSensitive)\tReturns True if the searched text is found in the text to search in.",
            "contents": "Find(${1:Text _TextToFind}, ${2:Text _TextToSearchIn}, ${3:Boolean _IsFormatSensitive}, ${4:Boolean _IsCaseSensitive})"
        },
        {
            "trigger": "Text TextLib::Compose(Text Argument1)",
            "contents": "Compose(${1:Text Argument1})"
        },
        {
            "trigger": "Text TextLib::Compose(Text Argument1, Text Argument2)",
            "contents": "Compose(${1:Text Argument1}, ${2:Text Argument2})"
        },
        {
            "trigger": "Text TextLib::Compose(Text Argument1, Text Argument2, Text Argument3)",
            "contents": "Compose(${1:Text Argument1}, ${2:Text Argument2}, ${3:Text Argument3})"
        },
        {
            "trigger": "Text TextLib::Compose(Text Argument1, Text Argument2, Text Argument3, Text Argument4)",
            "contents": "Compose(${1:Text Argument1}, ${2:Text Argument2}, ${3:Text Argument3}, ${4:Text Argument4})"
        },
        {
            "trigger": "Text TextLib::Compose(Text Argument1, Text Argument2, Text Argument3, Text Argument4, Text Argument5)",
            "contents": "Compose(${1:Text Argument1}, ${2:Text Argument2}, ${3:Text Argument3}, ${4:Text Argument4}, ${5:Text Argument5})"
        },
        {
            "trigger": "Text TextLib::Compose(Text Argument1, Text Argument2, Text Argument3, Text Argument4, Text Argument5, Text Argument6)",
            "contents": "Compose(${1:Text Argument1}, ${2:Text Argument2}, ${3:Text Argument3}, ${4:Text Argument4}, ${5:Text Argument5}, ${6:Text Argument6})"
        },
        {
            "trigger": "Text TextLib::MLEncode(Text Argument1)",
            "contents": "MLEncode(${1:Text Argument1})"
        },
        {
            "trigger": "Text TextLib::URLEncode(Text Argument1)",
            "contents": "URLEncode(${1:Text Argument1})"
        },
        {
            "trigger": "Text TextLib::StripFormatting(Text Argument1)",
            "contents": "StripFormatting(${1:Text Argument1})"
        },
        {
            "trigger": "Text[Void] TextLib::Split(Text _Separators, Text _Text)\tSplits a given text based on a given separators set.",
            "contents": "Split(${1:Text _Separators}, ${2:Text _Text})"
        },
        {
            "trigger": "Text TextLib::Join(Text _Separator, Text _Texts)\tJoins a set of texts with the given separator.",
            "contents": "Join(${1:Text _Separator}, ${2:Text _Texts})"
        },
        {
            "trigger": "Text TextLib::SmartSplit(Text Argument1, Integer Argument2, Integer Argument3, Integer Argument4)",
            "contents": "SmartSplit(${1:Text Argument1}, ${2:Integer Argument2}, ${3:Integer Argument3}, ${4:Integer Argument4})"
        },
        {
            "trigger": "Text TextLib::Trim(Text Argument1)",
            "contents": "Trim(${1:Text Argument1})"
        },
        {
            "trigger": "Text TextLib::ReplaceChars(Text Argument1, Text Argument2, Text Argument3)",
            "contents": "ReplaceChars(${1:Text Argument1}, ${2:Text Argument2}, ${3:Text Argument3})"
        },
        {
            "trigger": "Text TextLib::Replace(Text _Text, Text _ToReplace, Text _Replacement)\tReplaces occurences of _ToReplace in _Text with _Replacement.",
            "contents": "Replace(${1:Text _Text}, ${2:Text _ToReplace}, ${3:Text _Replacement})"
        },
        {
            "trigger": "Text TextLib::GetTranslatedText(Text _Text)\tLookup the text in the current translation dictionary.",
            "contents": "GetTranslatedText(${1:Text _Text})"
        },
        {
            "trigger": "Integer MathLib::Abs(Integer Argument1)",
            "contents": "Abs(${1:Integer Argument1})"
        },
        {
            "trigger": "Real MathLib::Abs(Real Argument1)",
            "contents": "Abs(${1:Real Argument1})"
        },
        {
            "trigger": "Real MathLib::ToReal(Integer Argument1)",
            "contents": "ToReal(${1:Integer Argument1})"
        },
        {
            "trigger": "Real MathLib::Sin(Real Argument1)",
            "contents": "Sin(${1:Real Argument1})"
        },
        {
            "trigger": "Real MathLib::Cos(Real Argument1)",
            "contents": "Cos(${1:Real Argument1})"
        },
        {
            "trigger": "Real MathLib::Tan(Real Argument1)",
            "contents": "Tan(${1:Real Argument1})"
        },
        {
            "trigger": "Real MathLib::Atan2(Real Argument1, Real Argument2)",
            "contents": "Atan2(${1:Real Argument1}, ${2:Real Argument2})"
        },
        {
            "trigger": "Real MathLib::Exp(Real Argument1)",
            "contents": "Exp(${1:Real Argument1})"
        },
        {
            "trigger": "Real MathLib::Rand(Real Argument1, Real Argument2)",
            "contents": "Rand(${1:Real Argument1}, ${2:Real Argument2})"
        },
        {
            "trigger": "Real MathLib::Rand(Real Argument1, Real Argument2, Integer Argument3)",
            "contents": "Rand(${1:Real Argument1}, ${2:Real Argument2}, ${3:Integer Argument3})"
        },
        {
            "trigger": "Integer MathLib::Rand(Integer Argument1, Integer Argument2)",
            "contents": "Rand(${1:Integer Argument1}, ${2:Integer Argument2})"
        },
        {
            "trigger": "Integer MathLib::Rand(Integer Argument1, Integer Argument2, Integer Argument3)",
            "contents": "Rand(${1:Integer Argument1}, ${2:Integer Argument2}, ${3:Integer Argument3})"
        },
        {
            "trigger": "Real MathLib::NearestReal(Integer Argument1)",
            "contents": "NearestReal(${1:Integer Argument1})"
        },
        {
            "trigger": "Integer MathLib::NearestInteger(Real Argument1)",
            "contents": "NearestInteger(${1:Real Argument1})"
        },
        {
            "trigger": "Integer MathLib::FloorInteger(Real Argument1)",
            "contents": "FloorInteger(${1:Real Argument1})"
        },
        {
            "trigger": "Integer MathLib::CeilingInteger(Real Argument1)",
            "contents": "CeilingInteger(${1:Real Argument1})"
        },
        {
            "trigger": "Real MathLib::Distance(Vec3 Argument1, Vec3 Argument2)",
            "contents": "Distance(${1:Vec3 Argument1}, ${2:Vec3 Argument2})"
        },
        {
            "trigger": "Real MathLib::DotProduct(Vec3 Argument1, Vec3 Argument2)",
            "contents": "DotProduct(${1:Vec3 Argument1}, ${2:Vec3 Argument2})"
        },
        {
            "trigger": "Vec3 MathLib::CrossProduct(Vec3 Argument1, Vec3 Argument2)",
            "contents": "CrossProduct(${1:Vec3 Argument1}, ${2:Vec3 Argument2})"
        },
        {
            "trigger": "Real MathLib::Angle(Vec3 Argument1, Vec3 Argument2)",
            "contents": "Angle(${1:Vec3 Argument1}, ${2:Vec3 Argument2})"
        },
        {
            "trigger": "Real MathLib::OrientedAngle(Vec3 Argument1, Vec3 Argument2)",
            "contents": "OrientedAngle(${1:Vec3 Argument1}, ${2:Vec3 Argument2})"
        },
        {
            "trigger": "Real MathLib::PI()",
            "contents": "PI()"
        },
        {
            "trigger": "Real MathLib::Asin(Real Argument1)",
            "contents": "Asin(${1:Real Argument1})"
        },
        {
            "trigger": "Real MathLib::Acos(Real Argument1)",
            "contents": "Acos(${1:Real Argument1})"
        },
        {
            "trigger": "Real MathLib::Pow(Real Argument1, Real Argument2)",
            "contents": "Pow(${1:Real Argument1}, ${2:Real Argument2})"
        },
        {
            "trigger": "Real MathLib::Ln(Real Argument1)",
            "contents": "Ln(${1:Real Argument1})"
        },
        {
            "trigger": "Real MathLib::Sqrt(Real Argument1)",
            "contents": "Sqrt(${1:Real Argument1})"
        },
        {
            "trigger": "Integer MathLib::Max(Integer _A, Integer _B)\tReturns the maximum between A and B.",
            "contents": "Max(${1:Integer _A}, ${2:Integer _B})"
        },
        {
            "trigger": "Integer MathLib::Min(Integer _A, Integer _B)\tReturns the minimum between A and B.",
            "contents": "Min(${1:Integer _A}, ${2:Integer _B})"
        },
        {
            "trigger": "Integer MathLib::Clamp(Integer _X, Integer _Min, Integer _Max)\tReturns the value X clamped to the range Min..Max.",
            "contents": "Clamp(${1:Integer _X}, ${2:Integer _Min}, ${3:Integer _Max})"
        },
        {
            "trigger": "Real MathLib::Max(Real _A, Real _B)\tReturns the maximum between A and B.",
            "contents": "Max(${1:Real _A}, ${2:Real _B})"
        },
        {
            "trigger": "Real MathLib::Min(Real _A, Real _B)\tReturns the minimum between A and B.",
            "contents": "Min(${1:Real _A}, ${2:Real _B})"
        },
        {
            "trigger": "Real MathLib::Clamp(Real _X, Real _Min, Real _Max)\tReturns the value X clamped to the range Min..Max.",
            "contents": "Clamp(${1:Real _X}, ${2:Real _Min}, ${3:Real _Max})"
        },
        {
            "trigger": "Real MathLib::Mod(Real _X, Real _Min, Real _Max)\tReturns the modulus of X in the range Min..Max.",
            "contents": "Mod(${1:Real _X}, ${2:Real _Min}, ${3:Real _Max})"
        },
        {
            "trigger": "Real AnimLib::SmoothStep(Real _X)\tReturns the value smoothly transitionning from 0 to 1.",
            "contents": "SmoothStep(${1:Real _X})"
        },
        {
            "trigger": "Real AnimLib::Ease(Text _Function, Real _T, Real _Base, Real _Change, Real _Duration)\tReturns the value animated from Base to Base+Delta using Robert Penner easing functions. Function must be one of: \"Linear\", \"QuadIn\", \"QuadOut\", \"QuadInOut\", \"CubicIn\", \"CubicOut\", \"CubicInOut\", \"QuartIn\", \"QuartOut\", \"QuartInOut\", \"QuintIn\", \"QuintOut\", \"QuintInOut\", \"SineIn\", \"SineOut\", \"SineInOut\", \"ExpIn\", \"ExpOut\", \"ExpInOut\", \"CircIn\", \"CircOut\", \"CircInOut\", \"BackIn\", \"BackOut\", \"BackInOut\", \"ElasticIn\", \"ElasticOut\", \"ElasticInOut\", \"ElasticIn2\", \"ElasticOut2\", \"ElasticInOut2\", \"BounceIn\", \"BounceOut\", \"BounceInOut\".",
            "contents": "Ease(${1:Text _Function}, ${2:Real _T}, ${3:Real _Base}, ${4:Real _Change}, ${5:Real _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseLinear(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseLinear(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInQuad(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInQuad(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseOutQuad(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseOutQuad(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInOutQuad(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInOutQuad(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInCubic(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInCubic(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseOutCubic(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseOutCubic(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInOutCubic(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInOutCubic(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInQuart(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInQuart(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseOutQuart(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseOutQuart(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInOutQuart(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInOutQuart(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInQuint(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInQuint(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseOutQuint(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseOutQuint(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInOutQuint(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInOutQuint(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInSine(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInSine(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseOutSine(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseOutSine(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInOutSine(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInOutSine(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInExp(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInExp(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseOutExp(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseOutExp(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInOutExp(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInOutExp(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInCirc(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInCirc(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseOutCirc(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseOutCirc(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInOutCirc(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInOutCirc(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInBack(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInBack(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseOutBack(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseOutBack(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInOutBack(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInOutBack(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInElastic(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInElastic(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseOutElastic(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseOutElastic(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInOutElastic(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInOutElastic(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInElastic2(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInElastic2(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseOutElastic2(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseOutElastic2(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInOutElastic2(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInOutElastic2(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInBounce(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInBounce(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseOutBounce(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseOutBounce(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        },
        {
            "trigger": "Real AnimLib::EaseInOutBounce(Integer _T, Real _Base, Real _Change, Integer _Duration)\tReturns the value animated from Base to Base+Delta using R. Penner easing functions.",
            "contents": "EaseInOutBounce(${1:Integer _T}, ${2:Real _Base}, ${3:Real _Change}, ${4:Integer _Duration})"
        }
    ],
    "scope": "source.ms"
}